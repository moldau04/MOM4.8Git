
@{
    ViewData["Title"] = " List Page";
    Layout = "~/Views/Shared/MOMLayout.cshtml";
}

<!--Grid Control-->
<link href="~/MOMUI/Design/css/grid.css" rel="stylesheet" />
@*<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">

<script type="text/javascript">
    var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
    var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

    function inWords(num) {
        if ((num = num.toString()).length > 9) return 'overflow';
        n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
        if (!n) return; var str = '';
        str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'crore ' : '';
        str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'lakh ' : '';
        str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'thousand ' : '';
        str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'hundred ' : '';
        str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + '' : '';
        return str;
    }
    function KeyPressed(sender, eventArgs) {
        //debugger
        if (eventArgs.get_keyCode() == 40) {
            $("#btnAddNewLines").click();
            return false;
        }
    }
    $(window.document).keydown(function (event) {
        if (event.which == 117) {
            $("#btnCopyPrevious").click();
            return false;
        }
    })
    function resetIndexF6() {
        //debugger
        var hdnSelectPOIndex = $("#hdnSelectPOIndex");
        $(hdnSelectPOIndex).val(-1);
    }
    (function ($) {
        $.extend({
            toDictionary: function (query) {
                var parms = {};
                var items = query.split("&");
                for (var i = 0; i < items.length; i++) {
                    var values = items[i].split("=");
                    var key1 = decodeURIComponent(values.shift().replace(/\+/g, '%20'));
                    var key = key1.split('$')[key1.split('$').length - 1];
                    var value = values.join("=")
                    parms[key] = decodeURIComponent(value.replace(/\+/g, '%20'));
                }
                return (parms);
            }
        })
    })(jQuery);
    (function ($) {
        $.fn.serializeFormJSON = function () {
            var o = [];
            $(this).find('tr:not(:first, :last)').each(function () {
                var elements = $(this).find('input, textarea, select')
                if (elements.size() > 0) {
                    var serialized = $(this).find('input, textarea, select').serialize();
                    var item = $.toDictionary(serialized);
                    o.push(item);
                }
            });
            return o;
        };
    })(jQuery);
    function itemJSON() {

        var rawData = $("#RadGrid_gvJobCostItems").serializeFormJSON();
        var formData = JSON.stringify(rawData);
        $("#hdnGLItem").val(formData);
    }
    function disablebuttons() {


        var isValid = true;
        //isValid = Page_ClientValidate('Check');
        if (isValid) {



            if ($("#lblTotalAmount").text() != '') {
                var tAmt = parseFloat($("#lblTotalAmount").text().replace(/[\$\(\),]/g, ''));
                if (parseFloat(tAmt) > 0) {
                    itemJSON();

                    return true;
                }
                else {
                    noty({
                        text: 'Check amount not acceptable, the check generation process cannot continue.',
                        type: 'warning',
                        layout: 'topCenter',
                        closeOnSelfClick: false,
                        timeout: 15000,
                        theme: 'noty_theme_default',
                        closable: true
                    });
                    return false;
                }
            }
            else {
                noty({
                    text: 'Check amount not acceptable, the check generation process cannot continue.',
                    type: 'warning',
                    layout: 'topCenter',
                    closeOnSelfClick: false,
                    timeout: 15000,
                    theme: 'noty_theme_default',
                    closable: true
                });
                return false;
            }
        }
        else {
            return isValid;
        }

    }
    function ChkVendor(source, arguments) {
        var bill = GetParameterValues('bill');
        //alert(bill);
        if (bill == "c") {
            //alert(bill);
            arguments.IsValid = arguments.Value != '';

        }
        else {
            arguments.IsValid = true;
        }
    }
    function InitializeGrids(Gridview) {

        $("#" + Gridview).on('click', 'a.addButton', function () {
            var $tr = $(this).closest('table').find('tr').eq(1);
            var $clone = $tr.clone();
            $clone.find('input:text').val('');
            $clone.insertAfter($tr.closest('table').find('tr').eq($tr.closest('table').find('tr').length - 2));
        });

        var rowone = $("#" + Gridview).find('tr').eq(1);
        $("input", rowone).each(function () {
            $(this).blur();
        });
    }
    ////////// This function will be called during delete operation to call two functions ///////////
    function CallCalAmountTax() {
        CalculateTotalAmt();
        CalculateTotalUseTaxExpense();
    }
    /////////////////// To calculate Total and to make Gridview Amount Value to 2 decimal ////////////

    function CalculateTotal(obj) {
        try {
            var masterTable = $find("#RadGrid_gvJobCostItems").get_masterTableView();
            var count = masterTable.get_dataItems().length;
            var item;
            for (var i = 0; i < count; i++) {
                item = masterTable.get_dataItems()[i];
                var Qty = item.findElement("txtGvQuan");
                var Amount = item.findElement("txtGvAmount");
                var Price = item.findElement("txtGvPrice");
                //                 var Price = item.findElement("hdnchkTaxable");

                //                 if(checkbox.checked == true){
                //     $(hdnchkTaxable).val('1');
                // }else{
                //     $(hdnchkTaxable).val('0');
                //}

                var QtyVal = $(Qty).val();
                var AmountVal = $(Amount).val();
                if (QtyVal != "" && AmountVal != "") {
                    if (!isNaN(parseFloat(QtyVal)) && !isNaN(parseFloat(AmountVal)) && parseFloat(QtyVal) != 0) {
                        var QtyPrice = parseFloat(AmountVal) / parseFloat(QtyVal);
                        $(Price).val(QtyPrice.toFixed(2));
                    } else {
                        $(Price).val("");
                    }
                }
            }
        } catch (e) {

        }
        if (!isNaN(parseFloat($(obj.id).value))) {
            $(obj.id).value = parseFloat($(obj.id).value).toFixed(2);
            CalTotalVal(obj);
        }
        else {
            CalTotalVal(obj);
        }

        CalculateTotalAmt();
        CalculateTotalUseTaxExpense();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    function CalculateUseTaxTotal(obj) {

        if (!isNaN(parseFloat($(obj.id).value))) {
            $(obj.id).value = parseFloat($(obj.id).value).toFixed(4);
        }
        CalculateTotalUseTaxExpense();
    }
    function CalculateTotalUseTaxExpense() {

        var tAmount = 0.00;
        var totalTax = 0.00;
        $("[id*=txtGvUseTax]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    totalTax = totalTax + parseFloat($(this).val());
                    var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    if (totalAmount != null && totalAmount != "") {
                        tAmount = tAmount + parseFloat(totalAmount) * parseFloat($(this).val()) / 100;
                    }
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });

        $("#lblTotalUseTax").text(tAmount.toFixed(2));
    }


    function CalculateTotalAmt() {
        debugger;
        var tAmount = 0.00;
        $("[id*=txtGvAmount]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    if (totalAmount != null && totalAmount != "") {
                        tAmount = tAmount + parseFloat($(this).val());
                    }
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });
        var tAmt = 0.00;
        //if ($("#lblTotalAmount").text() != '')
        //{

        CalculatePayTotal();
        CalculatePayTotalSelected();
        tAmt = parseFloat($("#lblTotalAmount11").text().replace(/[\$\(\),]/g, ''));
        //}


        //$('[id*=lblAmountPerTotalGrid]').text(tAmount.toFixed(2));
        $("#lblTotalAmount11").html(cleanUpCurrency("$" + parseFloat(parseFloat(tAmount)).toLocaleString("en-US", { minimumFractionDigits: 2 })));

        $("#lblTotalAmount").text((parseFloat(tAmt) + parseFloat(tAmount)).toFixed(2));

        $("#lblTotalAmount11").html(cleanUpCurrency("$" + parseFloat((parseFloat(tAmt) + parseFloat(tAmount))).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $('[id*=lblTotalAmt]').text((parseFloat(tAmt) + parseFloat(tAmount)).toFixed(2));

        var totalQty = 0.00;
        $("[id*=txtGvQuan]").each(function () {
            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {
                    totalQty = totalQty + parseFloat($(this).val());
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });
        $('[id*=lblTotalQty]').text(totalQty.toFixed(2));


        var tAmountstax = 0.00;

        $("[id*=txtGvStaxAmount]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    //if (totalAmount != null && totalAmount != "") {
                    tAmountstax = tAmountstax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                    //}
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });


        $('[id*=lblSalesTaxTotal]').text(tAmountstax.toFixed(2));

        var tAmountgsttax = 0.00;
        $("[id*=lblGstTax]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    //if (totalAmount != null && totalAmount != "") {
                    tAmountgsttax = tAmountgsttax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                    //}
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });


        $('[id*=lblGstTaxTotal]').text(tAmountgsttax.toFixed(2));

        var tAmountamttax = 0.00;

        //tAmountamttax = parseFloat(tAmountstax.toFixed(2)) + parseFloat(tAmountgsttax.toFixed(2));
        var totactualamt = 0.00;
        //totactualamt = parseFloat($('[id*=lblAmountPerTotalGrid]').text());
        totactualamt = parseFloat(tAmount);

        var totsaletaxamt = 0.00;
        totsaletaxamt = parseFloat($('[id*=lblSalesTaxTotal]').text());
        var totGSTtaxamt = 0.00;
        totGSTtaxamt = parseFloat($('[id*=lblGstTaxTotal]').text());


        if (isNaN(totsaletaxamt)) {

            totsaletaxamt = 0.00;
        }
        if (isNaN(totGSTtaxamt)) {

            totGSTtaxamt = 0.00;
        }

        tAmountamttax = totactualamt + totsaletaxamt + totGSTtaxamt;
        //$("[id*=lblAmountWithTax]").each(function () {

        //    if (!jQuery.trim($(this).text()) == '') {
        //        if (!isNaN(parseFloat($(this).text()))) {

        //            //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
        //            //if (totalAmount != null && totalAmount != "") {
        //                tAmountamttax = tAmountamttax + parseFloat($(this).text().replace(/[\$\(\),]/g, ''));
        //            //}
        //        } else
        //            $(this).text('');
        //    }
        //    else {
        //        $(this).text('');
        //    }
        //});


        $('[id*=lblAmountWithTaxTotal]').text(tAmountamttax.toFixed(2));
        $("#lblTotalAmount11").text(tAmountamttax.toFixed(2));
        CalculateTotalUseTaxExpense();


        var _currencyInWord = inWords(parseFloat(Math.trunc(parseFloat(tAmountamttax))));
        var d = parseFloat(tAmountamttax) - Math.trunc(parseFloat(tAmountamttax));
        if (d > 0) {
            d = Math.round(d * 100);
            _currencyInWord = _currencyInWord + " And " + d + " / 100";
        }
        _currencyInWord = "*** " + _currencyInWord + "****************";
        $("#lblDollar").html(_currencyInWord);
        $("#hdnTPay").val(parseFloat(tAmountamttax).toString());


        CalculatePayTotalSelected();
    }



    $("#txtVendor").keyup(function (event) {

        var hdnVendorID = $("#hdnVendorID");
        if ($("#txtVendor").value == '') {
            hdnVendorID.value = '';
        }
    });
    //////////////////////To make row's textbox visible///////////////////////////////////////////
    function VisibleRows(row, txt, gridview, event) {
        var rowst = $(row)

        var grid = $(gridview);
        $('#' + gridview + ' input:text.non-trans').each(function () {
            $(this).removeClass("non-trans");
            $(this).addClass("texttransparent");
        });
        $('#' + gridview + ' select.non-trans').each(function () {
            $(this).removeClass("non-trans");
            $(this).addClass("texttransparent");
        });

        var txtGvAcctNo = $(txt);
        $(txtGvAcctNo).removeClass("texttransparent");
        $(txtGvAcctNo).addClass("non-trans");

        var txtGvDesc = $(txt.replace('txtGvAcctNo', 'txtGvDesc'));
        $(txtGvDesc).removeClass("texttransparent");
        $(txtGvDesc).addClass("non-trans");

        var txtGvAmount = $(txt.replace('txtGvAcctNo', 'txtGvAmount'));
        $(txtGvAmount).removeClass("texttransparent");
        $(txtGvAmount).addClass("non-trans");

        var txtGvUseTax = $(txt.replace('txtGvAcctNo', 'txtGvUseTax'));
        $(txtGvUseTax).removeClass("texttransparent");
        $(txtGvUseTax).addClass("non-trans");

        var txtGvLoc = $(txt.replace('txtGvAcctNo', 'txtGvLoc'));
        $(txtGvLoc).removeClass("texttransparent");
        $(txtGvLoc).addClass("non-trans");

        var txtGvJob = $(txt.replace('txtGvAcctNo', 'txtGvJob'));
        $(txtGvJob).removeClass("texttransparent");
        $(txtGvJob).addClass("non-trans");

        var txtGvPhase = $(txt.replace('txtGvAcctNo', 'txtGvPhase'));
        $(txtGvPhase).removeClass("texttransparent");
        $(txtGvPhase).addClass("non-trans");

        var txtGvItem = $(txt.replace('txtGvAcctNo', 'txtGvItem'));
        $(txtGvItem).removeClass("texttransparent");
        $(txtGvItem).addClass("non-trans");

    }
    /////////////////////////////////////////////////////////////////////////////
    function lblselectp() {

        $("#lblSelectedPayment").text($("#lblRunBalance").text());
    }
    function OnGridCommand(sender, args) {
        if (args.get_commandName() == "Page") {
            CheckAllCheckbox();



        }
        else if (args.get_commandName() == "PageSize") {
            CheckAllCheckbox();
        }
    }
    function ddlVendoronchange(value) {

        if (value == "-1") {
            $("#lblSelectedPayment").text($("#lblRunBalance").text());
            $("#lblSelectedVendorCount").text($("#lblTotalVendorCount").text());

            $("#lblVendorBal").text("$0.00");
        }
        else if (value == "0") {
            $("#lblSelectedVendorCount").text("0");
            $("#lblVendorBal").text("$0.00");
        }
        else {
            $("#lblSelectedVendorCount").text("1");
        }
    }
    function CalculatePayTotal() {
        var tPay = 0;
        var tDisc = 0;
        var tBal = 0;
        $("#gvBills").find('tr:not(:first, :last)').each(function () {
            var $tr = $(this);

            if ($tr.find('input[id*=txtGvPay]').attr('id') != "" && typeof $tr.find('input[id*=txtGvPay]').attr('id') != 'undefined') {
                var payment = $tr.find('input[id*=txtGvPay]').val().replace(/[\$\(\),]/g, '');

                if (!isNaN(parseFloat(payment))) {
                    tPay += parseFloat(payment);
                }
            }


            //if ($tr.find('input[id*=txtGvDisc]').attr('id') != "" && typeof $tr.find('input[id*=txtGvDisc]').attr('id') != 'undefined') {
            //  var disc = $tr.find('input[id*=txtGvDisc]').val().replace(/[\$\(\),]/g, '');

            //                    if (!isNaN(parseFloat(disc))) {
            //                      tDisc += parseFloat(disc);
            //                }
            //          }

            if ($tr.find('[id*=lblBalance]').attr('id') != "" && typeof $tr.find('[id*=lblBalance]').attr('id') != 'undefined') {
                //var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\(\),]/g, '');
                var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\,]/g, '');
                if (bal.includes('(')) {
                    bal = bal.replace(/[\$\(\),]/g, '');
                    bal = -bal;
                }

                if (!isNaN(parseFloat(bal))) {
                    tBal += parseFloat(bal);
                }
            }



            //////////////

            if ($tr.find('[id*=chkSelect]').attr('id') != "" && typeof $tr.find('[id*=chkSelect]').attr('id') != 'undefined') {
                if ($tr.find('[id*=chkSelect]').prop('checked') == true) {
                    if ($tr.find('input[id*=txtGvDisc]').attr('id') != "" && typeof $tr.find('input[id*=txtGvDisc]').attr('id') != 'undefined') {
                        var disc = $tr.find('input[id*=txtGvDisc]').val().replace(/[\$\(\),]/g, '');

                        if (!isNaN(parseFloat(disc))) {
                            tDisc += parseFloat(disc);
                        }
                    }
                }
            }


            //////////////


        });
        var _currencyInWord = inWords(parseFloat(Math.trunc(tPay)));
        var d = tPay - Math.trunc(tPay);
        if (d > 0) {
            d = Math.round(d * 100);
            _currencyInWord = _currencyInWord + " And " + d + " / 100";
        }
        _currencyInWord = "*** " + _currencyInWord + "****************";
        $("#lblSelectedPayment").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $("#lblRequirement").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $("#lblTotalAmount").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $("#lblDollar").html(_currencyInWord);
        $("#hdnTPay").val(tPay.toString());
        $('.cls-payment').html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $("#lblTotalDiscount").html(cleanUpCurrency("$" + parseFloat(tDisc).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $('.cls-disc').html(cleanUpCurrency("$" + parseFloat(tDisc).toLocaleString("en-US", { minimumFractionDigits: 2 })));

        $('.cls-bal').html(cleanUpCurrency("$" + parseFloat(tBal).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        GetPaymentTotal();
        //var vdis = $("#lblTotalDiscount").html().replace(/[\$\(\),]/g, '');
        //$('.cls-disc').html(cleanUpCurrency("$" + parseFloat(vdis).toLocaleString("en-US", { minimumFractionDigits: 2 })));
    }

    function CalculatePayTotalSelected() {
        var tPay = 0;
        var tDisc = 0;
        var tvendors = 0;
        var titems = 0;
        var tBal = 0;
        $("#gvBills").find('tr:not(:first, :last)').each(function () {
            var $tr = $(this);

            if ($tr.find('input[id*=txtGvPay]').attr('id') != "" && typeof $tr.find('input[id*=txtGvPay]').attr('id') != 'undefined') {
                var payment = $tr.find('input[id*=txtGvPay]').val().replace(/[\$\(\),]/g, '');

                if (!isNaN(parseFloat(payment))) {
                    tPay += parseFloat(payment);
                }
            }
            //if ($tr.find('input[id*=txtGvDisc]').attr('id') != "" && typeof $tr.find('input[id*=txtGvDisc]').attr('id') != 'undefined') {
            //  var disc = $tr.find('input[id*=txtGvDisc]').val().replace(/[\$\(\),]/g, '');

            //                    if (!isNaN(parseFloat(disc))) {
            //                      tDisc += parseFloat(disc);
            //                }
            //          }

            if ($tr.find('[id*=lblBalance]').attr('id') != "" && typeof $tr.find('[id*=lblBalance]').attr('id') != 'undefined') {
                // var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\(\),]/g, '');
                var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\,]/g, '');
                if (bal.includes('(')) {
                    bal = bal.replace(/[\$\(\),]/g, '');
                    bal = -bal;
                }
                if (!isNaN(parseFloat(bal))) {
                    tBal += parseFloat(bal);
                }
            }


            //////////////

            if ($tr.find('[id*=chkSelect]').attr('id') != "" && typeof $tr.find('[id*=chkSelect]').attr('id') != 'undefined') {
                if ($tr.find('[id*=chkSelect]').prop('checked') == true) {
                    if ($tr.find('input[id*=txtGvDisc]').attr('id') != "" && typeof $tr.find('input[id*=txtGvDisc]').attr('id') != 'undefined') {
                        var disc = $tr.find('input[id*=txtGvDisc]').val().replace(/[\$\(\),]/g, '');

                        if (!isNaN(parseFloat(disc))) {
                            tDisc += parseFloat(disc);
                        }
                    }
                }
            }


            //////////////


        });



        //var vitems = calculateItems();
        //$("#lblOpenItems").html(vitems.toString());


        //$("#lblAutoSelectBalance").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $('.cls-payment').html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $("#lblTotalDiscount").html(cleanUpCurrency("$" + parseFloat(tDisc).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        $('.cls-disc').html(cleanUpCurrency("$" + parseFloat(tDisc).toLocaleString("en-US", { minimumFractionDigits: 2 })));

        $('.cls-bal').html(cleanUpCurrency("$" + parseFloat(tBal).toLocaleString("en-US", { minimumFractionDigits: 2 })));
        GetPaymentTotal();
        //var vdis = $("#lblTotalDiscount").html().replace(/[\$\(\),]/g, '');
        //$('.cls-disc').html(cleanUpCurrency("$" + parseFloat(vdis).toLocaleString("en-US", { minimumFractionDigits: 2 })));
    }

    function calculateItems() {
        var grid = $("#gvBills"); //
        var count = 0;
        //for (var i = 0; i < <%= gvBills.Items.Count - 2 %>; i++) {

        //    var CheckBox1 = $("input[id*=chkSelect]")//chkRow Id of Check box
        //    if (CheckBox1[i].checked) {
        //        count = count + 1;
        //    }
        //}

        return count;
    }
    function calculateVendor() {
        var grid = $("#gvBills"); //
        var count = 0;
        var prevValue = "";
        for (var i = 1; i < grid.rows.length - 1; i++) {
            var CheckBox1 = $("input[id*=chkSelect]")

            //if (i == 1)
            //{
            //    prevValue = grid.rows[i].cells[1].childNodes[1].innerHTML.toString();

            //}
            if (CheckBox1[i - 1].checked) {
                if (grid.rows[i].cells[1].childNodes[1].innerHTML.toString() == prevValue) {
                    count = count;
                }
                else {
                    count = count + 1;
                }
                prevValue = grid.rows[i].cells[1].childNodes[1].innerHTML;
            }

        }

        return count;
    }

    //function pageLoad(sender, args) {
    $("#txtDateBefore").hide();
    $("#txtdated").hide();
    $(function () {
        function a_dta() {
            this.prefixText = null;
            this.con = null;
            this.custID = null;
        }
        var queryven = "";
        function dtaaven() {
            this.prefixText = null;
            this.con = null;
            this.Acct = null;
        }
        $("[id*=txtGvUseTax]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},

            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/getUseTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {

                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            select: function (event, ui) {

                if (ui.item.value == 0)
                    window.location.href = "addbills.aspx";
                else {
                    var txtGvUseTax = this.id;
                    $(this).val(ui.item.Rate);

                    var hdnUtax = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtax'));
                    var hdnUtaxGL = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtaxGL'));

                    $(hdnUtax).val(ui.item.Name);
                    $(hdnUtaxGL).val(ui.item.GL);
                }

                return false;
            },
            focus: function (event, ui) {

                $(this).val(ui.item.Rate);
                return false;
            },
            minLength: 0,
            delay: 250
        })
        $.each($(".tsearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.Rate;
                var result_item = item.Name;
                var result_desc = item.GL;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_value + "</span></a>")
                        .appendTo(ul);
                }
            };
        });



        $("[id*=txtGvLoc]").autocomplete({
            open: function (e, ui) {
                /* create the scrollbar each time autocomplete menu opens/updates */
                $(".ui-autocomplete").mCustomScrollbar({
                    setHeight: 182,
                    theme: "dark-3",
                    autoExpandScrollbar: true
                });
            },
            response: function (e, ui) {
                /* destroy the scrollbar after each search completes, before the menu is shown */
                $(".ui-autocomplete").mCustomScrollbar("destroy");
            },

            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetJobLocations",
                    data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + false + '", "con": "' + dtaaa.con + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load phase details");
                    }
                });
            },
            select: function (event, ui) {

                var txtGvLoc = this.id;
                var txtGvJob = $(txtGvLoc.replace('txtGvLoc', 'txtGvJob'));
                var hdnJobID = $(txtGvLoc.replace('txtGvLoc', 'hdnJobID'));

                $(hdnJobID).val(ui.item.ID);
                $(txtGvJob).val(ui.item.fDesc);
                $(this).val(ui.item.Tag);

                return false;
            },
            focus: function (event, ui) {
                $(this).val(ui.item.fDesc);
                return false;
            },
            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val());
        })
        $.each($(".jsearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {

                var ula = ul;
                var itema = item;
                var result_value = item.ID;
                var result_item = item.fDesc;
                var result_desc = item.Tag;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>';
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>';
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a><b> Job: </b> " + result_item + ", <span style='color:Gray;'><b> Loc: </b>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }
            };
        });

        $("#txtDiscGL").autocomplete({
            source: function (request, response) {
                var dtaaa = new a_dta();
                dtaaa.prefixText = request.term;
                query = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetAccountName",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load accounts");
                    }
                });
            },
            select: function (event, ui) {
                $("#txtDiscGL").val(ui.item.label);
                $("#hdnDiscGL").val(ui.item.value);
                return false;
            },
            focus: function (event, ui) {
                $("#txtDiscGL").val(ui.item.label);
                return false;
            },
            minLength: 0,
            delay: 250
        })
            .bind('click', function () { $(this).autocomplete("search"); })
            .data("ui-autocomplete")._renderItem = function (ul, item) {
                //debugger;
                var ula = ul;
                var itema = item;
                var result_value = item.value;
                var result_item = item.acct;
                var result_desc = item.label;

                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    //return $("<li></li>")
                    //.data("item.autocomplete", item)
                    //.append("<a>" + result_item + "</a>")
                    //.appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + " : <span>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }

            }
        $("#txtDiscGLs").autocomplete({
            source: function (request, response) {
                var dtaaa = new a_dta();
                dtaaa.prefixText = request.term;
                query = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetAccountName",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load accounts");
                    }
                });
            },
            select: function (event, ui) {
                $("#txtDiscGLs").val(ui.item.label);
                $("#hdnDiscGLs").val(ui.item.value);
                return false;
            },
            focus: function (event, ui) {
                $("#txtDiscGLs").val(ui.item.label);
                return false;
            },
            minLength: 0,
            delay: 250
        })
            .bind('click', function () { $(this).autocomplete("search"); })
            .data("ui-autocomplete")._renderItem = function (ul, item) {
                //debugger;
                var ula = ul;
                var itema = item;
                var result_value = item.value;
                var result_item = item.acct;
                var result_desc = item.label;

                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    //return $("<li></li>")
                    //.data("item.autocomplete", item)
                    //.append("<a>" + result_item + "</a>")
                    //.appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + " : <span>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }

            }
        $("[id*=txtGvUseTax]").keypress(function (e) {
            var keyCode = e.which;

            return false;

        });
        $("#txtVendor").autocomplete({

            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},
            source: function (request, response) {

                var dtaaa = new dtaaven();
                dtaaa.prefixText = request.term;
                query = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetVendorName",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load vendor name");
                    }
                });
            },
            select: function (event, ui) {
                var str = ui.item.Name;
                if (str == "No Record Found!") {
                    $("#txtVendor").val("");
                }
                else {
                    $("#txtVendor").val(ui.item.Name);
                    $("#hdnVendorID").val(ui.item.ID);

                    $("#ddlVendor").val(ui.item.ID);

                    if ($('txtqstgv').style.display == 'block') {

                        $("#txtqst").text(ui.item.STax);
                        $("#hdnQST").val(ui.item.STaxRate);
                        $("#hdnQSTGL").val(ui.item.STaxGL);
                        $("#hdnSTaxType").val(ui.item.STaxType);
                        $("#hdnSTaxName").val(ui.item.STaxName);
                    }
                    else {
                        $("#txtqst").text("0");
                        $("#hdnQST").val("0");
                        $("#hdnQSTGL").val("0");
                        $("#hdnSTaxType").val("0");
                        $("#hdnSTaxName").val("0");
                    }

                    if ($('txttaxcodegv').style.display == 'block') {
                        $("#txtusetaxc").text(ui.item.UTax);
                        $("#hdnusetaxc").val(ui.item.UTaxRate);
                        $("#hdnusetaxcGL").val(ui.item.SUaxGL);
                        $("#hdnUTaxType").val(ui.item.UTaxType);
                        $("#hdnUTaxName").val(ui.item.UtaxName);
                    }
                    else {
                        $("#txtusetaxc").text("0");
                        $("#hdnusetaxc").val("0");
                        $("#hdnusetaxcGL").val("0");
                        $("#hdnUTaxType").val("0");
                        $("#hdnUTaxName").val("0");
                    }


                    CallSelectedIndexChanged();



                }

                return false;
            },
            focus: function (event, ui) {


                $("#txtVendor").val(ui.item.Name);

                return false;
            },
            minLength: 0,
            delay: 250
        })
            .data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.ID;
                var result_item = item.Name;
                var result_Company = item.Company;
                var result_desc = item.desc;

                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span>' + FullMatch + '</span>'
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span>' + FullMatch + '</span>'
                    });
                }
                if (result_value == 0) {

                    return $("<li></li>")
                        .data("ui-autocomplete-item", item)
                        .append("<span class='auto_item'>" + result_item + "</span> <span class='auto_desc'>" + result_desc + "</span>")
                        .appendTo(ul);
                }
                else {
                    var append_data = "";
                    //Premission Check.....
                    var chk = '<% Convert.ToString(Session["COPer"]) %>';
                    if (chk == "1") {
                        append_data = "<span class='auto_item'>" + result_item + "</span> <span class='auto_desc'>" + result_desc + "</span>" + "<span class='con_hide' style='color:Gray;'> ," + result_Company + "</span></a>";
                    }
                    else {
                        append_data = "<span class='auto_item'>" + result_item + "</span> <span class='auto_desc'>" + result_desc + "</span>";
                    }

                    return $("<li ></li>")
                        .data("ui-autocomplete-item", item)
                        .append(append_data)
                        .appendTo(ul);
                }
            }




        $("[id*=chkSelect]").change(function () {
            try {
                var chk = $(this).attr('id');
                // debugger;
                /////////////////////
                //var txtPay = $(this).parent().find('input[id$="txtGvPay"]').attr('id');
                //var txtDisc = $(this).parent().next().next().next().next().find('input[id$="txtGvDisc"]').attr('id');
                //var lblDue = $(this).parent().next().next().next().find('span[id$="lblBalance"]').attr('id');
                //var hdnPrevDue = $(this).parent().next().next().next().find('input:hidden[id$="hdnPrevDue"]').attr('id');
                var hdnSelected = $(chk.replace('chkSelect', 'hdnSelected'));
                var hdnOriginal = $(chk.replace('chkSelect', 'hdnOriginal'));
                var hdnPrevDue = $(chk.replace('chkSelect', 'hdnPrevDue'));
                var lblDue = $(chk.replace('chkSelect', 'lblBalance'))
                var txtDisc = $(chk.replace('chkSelect', 'txtGvDisc'));
                var txtPay = $(chk.replace('chkSelect', 'txtGvPay'));
                var pay = $(txtPay).val().toString().replace(/[\$\(\),]/g, '');
                var disc = $(txtDisc).val().toString().replace(/[\$\(\),]/g, '');
                //////////////////////
                var due = parseFloat($(lblDue).text().toString().replace(/[\$\(\),]/g, ''))
                var prevDue = parseFloat($(hdnOriginal).val() - $(hdnSelected).val())
                var pay = 0;

                var rpay = pay.toLocaleString("en-US", { minimumFractionDigits: 2 });
                var rprevDue = prevDue.toLocaleString("en-US", { minimumFractionDigits: 2 });
                if ($(this).prop('checked') == true) {

                    $(txtPay).val(rprevDue)
                    $(txtDisc).val('0.00')
                    $(lblDue).text(cleanUpCurrency('$' + rpay))
                    SelectedRowStyle("#gvBills")
                }
                else if ($(this).prop('checked') == false) {
                    $(txtPay).val(rpay)
                    $(txtDisc).val(rpay)
                    $(lblDue).text(cleanUpCurrency('$' + rprevDue))
                    //  $(lblDue).text(cleanUpCurrency('$' + pay))
                    $(this).closest('tr').removeAttr("style");
                }
                CalculatePayTotal();
                CalculatePayTotalSelected();

            } catch (e) {

            }

        });




        $("[id*=txtGvDisc]").change(function () {
            //debugger;
            var txtDisc = $(this).attr('id');
            var chk = $(this).parent().prevAll().find('input:checkbox[id$="chkSelect"]');
            var lblDue = $(this).parent().prev().find('span[id$="lblBalance"]');
            var hdnPrevDue = $(this).parent().prev().find('input:hidden[id$="hdnPrevDue"]');
            var disc = $(this).val().toString().replace(/[\$\(\),]/g, '');
            var pay = $(this).parent().next().find('input[id$="txtGvPay"]').val().replace(/[\$\(\),]/g, '');
            var hdnDisc = $(this).parent().prev().find('input:hidden[id$="hdnDisc"]');
            var hdnSelected = $(this).parent().prev().find('input:hidden[id$="hdnSelected"]');
            var hdnOriginal = $(this).parent().prev().find('input:hidden[id$="hdnOriginal"]');

            if (pay == '') {
                pay = 0;
                $(this).parent().next().find('input[id$="txtGvPay"]').val('$0.00')
            }
            if (disc == '') {
                disc = 0;
                $(this).val('$0.00')
            }

            var Selected = parseFloat($(hdnSelected).val());
            var Original = parseFloat($(hdnOriginal).val());

            var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);

            if (parseFloat(Duepayment) >= 0) {
                //$(this).parent().prev().find('span[id$="lblBalance"]').val(parseFloat(Duepayment).toLocaleString("en-US", { minimumFractionDigits: 2 }));
                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
            else {
                disc = 0;
                var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);

                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
            total = parseFloat(pay) + parseFloat(disc);
            if (total != 0) {

                //debugger;
                //disc = parseFloat(disc);
                //var due = parseFloat($(lblDue).text().toString().replace(/[\$\(\),]/g, ''));
                //var prevDue = parseFloat($(hdnPrevDue).val())
                //alert(due);
                //alert(prevDue);
                //var IsNeg = false;
                //if (disc < 0) {
                //    IsNeg = true;
                //    pay = pay * -1;
                //    disc = disc * -1;
                //    prevDue = prevDue * -1;
                //    total = total * -1;
                //}
                //// debugger;
                //if (prevDue < total) {
                //    if (prevDue < disc) {
                //        pay = 0;
                //        disc = prevDue;
                //    }
                //    else {
                //        pay = prevDue - disc;
                //    }
                //    total = parseFloat(pay) + parseFloat(disc);
                //}

                //due = prevDue - total;
                //if (IsNeg) {
                //    pay = pay * -1;
                //    prevDue = prevDue * -1;
                //    disc = disc * -1;
                //    due = due * -1;
                //}


                //var payy = parseFloat(pay) + parseFloat(due);
                $(this).val(disc.toLocaleString("en-US", { minimumFractionDigits: 2 }));
                //$(lblDue).text(cleanUpCurrency('$' + due.toLocaleString("en-US", { minimumFractionDigits: 2 })));
                //$(this).parent().next().find('input[id$="txtGvPay"]').val(payy.toLocaleString("en-US", { minimumFractionDigits: 2 }))
                $(chk).prop('checked', true);
                SelectedRowStyle("#gvBills")
            }
            else {
                $(chk).prop('checked', false);
                $(this).closest('tr').removeAttr("style");
            }
            CalculatePayTotal();
            CalculatePayTotalSelected();
            $("#btnSelectChkBox").click();
        });


        $("[id*=txtGvPay]").change(function () {
            // debugger;
            var txtPay = $(this).attr('id');

            var chk = $(this).parent().prevAll().find('input:checkbox[id$="chkSelect"]');
            var lblDue = $(this).parent().prev().prev().find('span[id$="lblBalance"]');
            var hdnPrevDue = $(this).parent().prev().prev().find('input:hidden[id$="hdnPrevDue"]');
            var pay = $(this).val().toString().replace(/[\$\(\),]/g, '');
            var disc = $(this).parent().prev().find('input[id$="txtGvDisc"]').val().toString().replace(/[\$\(\),]/g, '');

            var hdnDisc = $(this).parent().prev().prev().find('input:hidden[id$="hdnDisc"]');
            var hdnSelected = $(this).parent().prev().prev().find('input:hidden[id$="hdnSelected"]');
            var hdnOriginal = $(this).parent().prev().prev().find('input:hidden[id$="hdnOriginal"]');

            //-----------------Start:Commented By Juily - 19-12-2019 ---------------//
            //var total = 0;
            //-----------------End: By Juily - 19-12-2019 -------------------------//
            if (pay == '') {
                pay = 0;
                $(this).val('$0.00')
            }
            if (disc == '') {
                disc = 0;
                $(this).parent().prev().find('input[id$="txtGvDisc"]').val('$0.00')
            }

            var Selected = parseFloat($(hdnSelected).val());
            var Original = parseFloat($(hdnOriginal).val());


            var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);
            //------------------Start:Code By Juily - 19-12-2019 --------------------//
            if ((parseFloat(Duepayment) < 0 && parseFloat(Original) > 0) || (parseFloat(Duepayment) > 0 && parseFloat(Original) < 0)) {
                noty({
                    text: 'OverPayment is not allowed.',
                    type: 'warning',
                    layout: 'topCenter',
                    closeOnSelfClick: true,
                    timeout: false,
                    theme: 'noty_theme_default',
                    closable: false
                });

                pay = 0;
                var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);
                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
                //$(lblDue).text('$0.00');
                total = parseFloat(pay) + parseFloat(disc);
                if (total == 0) {
                    $(this).val(pay.toLocaleString("en-US", { minimumFractionDigits: 2 }));
                    $(chk).prop('checked', true);
                    SelectedRowStyle("#gvBills")
                }
                else {
                    $(chk).prop('checked', false);
                    $(this).closest('tr').removeAttr("style");
                }
            }
            else {
                //$(lblDue).text('$0.00');
                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
                total = parseFloat(pay) + parseFloat(disc);
                if (total != 0) {
                    $(this).val(pay.toLocaleString("en-US", { minimumFractionDigits: 2 }));
                    $(chk).prop('checked', true);
                    SelectedRowStyle("#gvBills")
                }
                else {
                    $(chk).prop('checked', false);
                    $(this).closest('tr').removeAttr("style");
                }
            }

            //-------------------End: By Juily - 19-12-2019-------------------------//

            //------------------Start:Code By Juily - 19-12-2019 --------------------//
            //$(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            //-------------------End: By Juily - 19-12-2019-------------------------//

            //if (parseFloat(Duepayment) >= 0) {
            //    //$(this).parent().prev().find('span[id$="lblBalance"]').val(parseFloat(Duepayment).toLocaleString("en-US", { minimumFractionDigits: 2 }));
            //    $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            //}
            //else {
            //    pay = 0;
            //    var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);

            //    $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            //}
            //-----------------Start:Commented By Juily - 19-12-2019 ---------------//

            //-------------------End: By Juily - 19-12-2019-------------------------//
            //GetInvoiceTotal();
            CalculatePayTotal();
            CalculatePayTotalSelected();
            //PageMethods.GetPaymentRetainCheckbox();
            $("#btnSelectChkBox").click();
        })
    });


    $('input[name="radio-group"]').change(function () {

        if ($('rdDateBefore').checked) {
            $("#txtDateBefore").show();
            $("#txtdated").hide();
        }
        if ($('rdDated').checked) {
            $("#txtdated").show();
            $("#txtDateBefore").hide();

        }
        if ($('rdDue').checked) {
            $("#txtdated").hide();
            $("#txtDateBefore").hide();

        }
        if ($('rdClear').checked) {
            $("#txtdated").hide();
            $("#txtDateBefore").hide();

        }
        if ($('rdRegard').checked) {
            $("#txtdated").hide();
            $("#txtDateBefore").hide();

        }

        //var val = $('rdDue').checked;
        //alert(val);
    });



    //}
    function cleanUpCurrency(s) {

        var expression = '-';

        //Check if it is in the proper format
        if (s.match(expression)) {
            //It matched - strip out - and append parentheses
            return s.replace("$-", "\($") + ")";

        }
        else {
            return s;
        }
    }
    function cancel() {

        window.parent.$("#btnSave").click();
        return true;
    }

    function cancel() {
        //debugger;
        window.parent.$("#btnCancel").click();

        window.parent.$("#btnSave").click();
        return true;
    }


    function cancelbatch() {
        //debugger;
        window.parent.$("#bbtnClose").click();

        window.parent.$("#btnCncl").click();
        return true;
    }



    function ReloadPage() {
        return true;
    }
    function isNumberKeyCheck(evt, txt) {
        var valpaymethod = $("#ddlPayment").val();
        if (valpaymethod == "0") {
            var charCode = (evt.which) ? evt.which : event.keyCode

            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;

            return true;
        }
        else {
            return true;
        }
    }

    function isNumberKey(evt, txt) {

        var charCode = (evt.which) ? evt.which : event.keyCode

        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    $(document).ready(function () {
        $("#btnPrint").click(function () {
            $("#pnlCheck").print();
            return (false);
        });
        InitializeGrids("#RadGrid_gvJobCostItems");


        $("[id*=txtGvUseTax]").keypress(function (e) {
            var keyCode = e.which;

            return false;

        });

    });


    function isDecimalKey(el, evt) {

        var charCode = (evt.which) ? evt.which : event.keyCode;

        var number = el.value.split('.');
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }

        if (number.length > 1 && charCode == 46) {
            return false;
        }
        var caratPos = getSelectionStart(el);
        var dotPos = el.value.indexOf(".");
        if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
            return false;
        }
        return true;
    }
    function getSelectionStart(o) {
        if (o.createTextRange) {
            var r = document.selection.createRange().duplicate()
            r.moveEnd('character', o.value.length)
            if (r.text == '') return o.value.length
            return o.value.lastIndexOf(r.text)
        } else return o.selectionStart
    }
    function dtaa() {
        //this.prefixText = null;
        //this.con = null;
        this.checkno = null;
        this.bank = null;

    }
    function IsExistCheckNo() {

        var valCheckNo = $("#txtNextCheck").val();
        var valBank = $("#ddlBank").val();
        var valPaymenttype = $("#ddlPayment").val();
        var dtaaa = new dtaa();
        dtaaa.checkno = valCheckNo;
        dtaaa.bank = valBank;
        dtaaa.paytype = valPaymenttype;

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "AccountAutoFill.asmx/CheckNumValid",
            data: JSON.stringify(dtaaa),
            dataType: "json",
            async: true,
            success: function (data) {

                if (data.d == true) {
                    noty({
                        text: 'Check #' + valCheckNo + ' already exists. Since duplicate check numbers are not supported, the check generation process cannot continue.',
                        type: 'warning',
                        layout: 'topCenter',
                        closeOnSelfClick: false,
                        timeout: 15000,
                        theme: 'noty_theme_default',
                        closable: true
                    });
                    $("#txtNextCheck").val('');
                }
                Materialize.updateTextFields();
                return true;
            },
            failure: function (response) {
                //alert(response);
                return false;
            },
            error: function (result) {
                alert("Due to unexpected errors we were unable to load availability");
                return false;
            }
        });
    }

    function OnChange(txt) {
        $("#mesg")[0].innerHTML = "";
    }
    function displayWriteCheck() {
        $("#dvWriteCheck").show();
        $("#btnPrint").show();
        $("#btnSubmit").show();
        $("#btnCutCheck").hide();
    }
    function displayapplycredit(showhide) {
        if (showhide == "1") {
            $("#btnApplyCredit").show();
        }
        else {
            $("#btnApplyCredit").hide();
        }

    }
    function VisibleRow(row, txt, gridview, event) {  //To make row's textbox visible

        var rowst = $(row);
        var grid = $(gridview);
        $("#gvBills input:text.non-trans").each(function () {

            $(this).removeClass("non-trans");
            $(this).addClass("texttransparent");
        });
        $("#gvBills select.non-trans").each(function () {

            $(this).removeClass("non-trans");
            $(this).addClass("texttransparent");

        });

        var txtGvDisc = $(txt);
        $(txtGvDisc).removeClass("texttransparent");
        $(txtGvDisc).addClass("non-trans");

        var txtGvPay = $(txt.replace('txtGvDisc', 'txtGvPay'));
        $(txtGvPay).removeClass("texttransparent");
        $(txtGvPay).addClass("non-trans");

    }

    function DiscEmptyValidate(sender, args) {

        var tDisc = 0;

        var vdis = $("#lblTotalDiscount").html().replace(/[\$\(\),]/g, '');
        if (!isNaN(parseFloat(vdis))) {
            tDisc += parseFloat(vdis);
        }
        if (tDisc != 0) {
            var hdnDiscGL = $("#hdnDiscGL");
            if (hdnDiscGL.value == '') {
                args.IsValid = false;
            }
        }
    }
    function DiscEmptyValidates(sender, args) {

        var tDisc = 0;

        var vdis = $("#lblTotalDiscount").html().replace(/[\$\(\),]/g, '');
        if (!isNaN(parseFloat(vdis))) {
            tDisc += parseFloat(vdis);
        }
        if (tDisc != 0) {
            var hdnDiscGLs = $("#hdnDiscGLs");
            if (hdnDiscGLs.value == '') {
                args.IsValid = false;
            }
        }
    }
    function Alert() {
        alert('alert')
    }


    //function isDecimalKey(el, evt) {

    //    var charCode = (evt.which) ? evt.which : event.keyCode;

    //    var number = el.value.split('.');
    //    if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
    //        return false;
    //    }

    //    if (number.length > 1 && charCode == 46) {
    //        return false;
    //    }
    //    var caratPos = getSelectionStart(el);
    //    var dotPos = el.value.indexOf(".");
    //    if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
    //        return false;
    //    }
    //    return true;
    //}
    //function getSelectionStart(o) {
    //    if (o.createTextRange) {
    //        var r = document.selection.createRange().duplicate()
    //        r.moveEnd('character', o.value.length)
    //        if (r.text == '') return o.value.length
    //        return o.value.lastIndexOf(r.text)
    //    } else return o.selectionStart
    //}
    function opencCeateForm() {
        //alert("Hello");
        //modal.hide();
        window.radopen(null, "RadCreateWindow");
    }



    function SelectedRowStyle(gridview) {
        var grid = $(gridview);
        $('#' + gridview + ' tr').each(function () {
            var $tr = $(this);
            var chk = $tr.find('input[id*=chkSelect]');
            if (chk.prop('checked') == true) {
                $tr.css('background-color', '#c3dcf8');
                $tr.css('font-weight', 'bold');
            }
        })
    }
</script>*@


<style>
    .rptSti tr:nth-child(2n+1) {
        background: none !important;
    }

    .rm_mm td {
        background-color: none !important;
    }
</style>

<div id="divSuccess">
    <button type="button" class="close" data-dismiss="alert">×</button>
    These month/year period is closed out. You do not have permission to add/update this record.
</div>
<div style="height: 65px !important;">
    <div id="divButtons">
        <div id="breadcrumbs-wrapper">
            <header>
                <div class="container row-color-grey">
                    <div class="row">
                        <div class="col s12 m12 l12">
                            <div class="row">
                                <div class="page-title">
                                    <i class="mdi-communication-contacts"></i>&nbsp;
                                    <label class="title_text" ID="lblHeader" style="font-size:14px">Write Checks</label>
                                    <label class="title_text_Name" ID="lblUserName"></label>
                                </div>
                                <div ID="UpdatePanel9">
                                    <div>
                                        <div class="btnlinks">
                                            <a ID="btnSubmit" CausesValidation="true" TabIndex="38" onclick="disableButton(this,''); javascript:return disablebuttons();">
                                                Save & Print Check
                                            </a>
                                        </div>
                                    </div>
                                    @*<Triggers>
                                            <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                            <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                        </Triggers>*@
                                </div>
                                <div class="btnlinks">
                                    <a ID="btnSave" ValidationGroup="Check" CausesValidation="true">
                                        Submit
                                    </a>
                                </div>

                                <div class="btnlinks">
                                    <a ID="btnCutCheck" CausesValidation="true" onclick="checkvalidation()">Process Payment</a>
                                </div>
                                <div class="btnlinks">
                                    <a ID="btnApplyCredit" onclick="OpenApplyCreditModal();return false">Apply Credit</a>
                                </div>
                                <input type="button" ID="btnSelectChkBox" CausesValidation="False" value="Button" />
                                <div class="rght-content">
                                    <div class="btnclosewrap">
                                        <a ID="lnkClose" CausesValidation="false" ToolTip="Close">
                                            <i class="mdi-content-clear"></i>
                                        </a>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </header>
        </div>

        <div class="container breadcrumbs-bg-custom">
            <div class="row">
                <div class="col s12 m12 l12" id="dvbilldetailtop">
                    <div class="row">
                        <div class="tblnks">
                            <ul class="anchor-links" id="ulAccrd">
                                <li>
                                    <div style="float: left;">
                                        <a ID="chkBatch" CausesValidation="false">Select for Check Run</a>
                                    </div>
                                    <div style="display: flex; flex-wrap: nowrap;">
                                        <div ID="UpdatePanel10">
                                            <div>
                                                <div style="float: left; margin-left: 5px;">
                                                    <label ID="lblVendorCount" Visible="false">Vendors:</label>
                                                    <label ID="lblVCountValue" Visible="false"></label>
                                                </div>
                                                <div style="float: left; margin-left: 5px;">
                                                    <label ID="lblOI" Visible="false">Selected Items:</label>
                                                    <label ID="lblOpenItems" Visible="false"></label>
                                                </div>

                                                <div style="float: left; margin-left: 5px;">
                                                    <label ID="lblBal" Visible="false">Payment:</label>
                                                    <label ID="lblAutoSelectBalance" Visible="false"></label>
                                                </div>

                                            </div>
                                            @*<Triggers>
                                                    <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                    <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                                </Triggers>*@
                                        </div>
                                    </div>
                            </ul>
                        </div>

                        <div class="tblnksright">
                            <div ID="updtrunbillcount">
                                <div>
                                    <div style=" display: flex; flex-wrap: nowrap; float:right; padding-right:30px;">
                                        <div style="margin: 5px;">Running Total Selected Bill Count : </div>
                                        <div style="margin: 5px; padding-right:5px;">
                                            <label ID="lblruntotbillcount">0</label>
                                        </div>

                                    </div>
                                </div>
                                @*<Triggers>
                                        <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                        <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                    </Triggers>*@
                            </div>

                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="srchpane-advanced" id="srchpaneupr">
            <div class="form-content-wrap">
                <div class="form-content-pd">
                    <div class="form-section-row" id="dpane">
                        <div class="form-section3" style="height:150px !important">
                            <div class="input-field col s12">
                                <div class="row">
                                    <input type="text" ID="txtVendor" MaxLength="75"
                                           placeholder="Search by vendor" />
                                    @Html.Hidden("hdnVendorID")
                                    @Html.Hidden("hdEditCase", "false")
                                    <label for="txtVendor">Vendor</label>
                                </div>
                            </div>
                            <div class="input-field col s12">
                                <div class="row">
                                    <input type="text" ID="txtbillref" />
                                    <label for="txtbillref">Ref No</label>
                                </div>
                            </div>
                            <div class="input-field col s12" id="txtdiscgv">
                                <div class="row">
                                    <span id="txttaxcodegv"></span>
                                    <span class="ttlval" style="display:block;">
                                        <label ID="txtusetaxc">0.00</label>
                                    </span>
                                    @Html.Hidden("hdnusetaxcGL")
                                    @Html.Hidden("hdnusetaxc")
                                    @Html.Hidden("hdnUTaxType")
                                    @Html.Hidden("hdnUTaxName")
                                    @Html.Hidden("hdnDiscGLs")

                                    <input type="text" ID="txtDiscGLs" Placeholder="Search by acct# and name" />
                                    <label ID="lbltxtDiscGLs" for="txtDiscGLs">Discount GL</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-section3-blank">

                            &nbsp;
                        </div>

                        <div class="form-section3">

                            <div class="input-field col s12">
                                <div class="row">
                                    <input type="text" ID="txtMemo1" />
                                    <label for="txtMemo1">Bill Memo</label>
                                </div>
                            </div>
                            <div class="text-field col s12">
                                <div class="row">
                                    <label style="font-size: 0.9em;">Bill Total</label>
                                    <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                        <label ID="lblTotalAmount11"></label>
                                    </span>

                                </div>
                            </div>

                            <div class="input-field col s12 pdrt lblfield" id="txtgstgv">
                                <div class="row">
                                    <span class="ttlab">GST</span>
                                    <span class="ttlval"><label ID="txtgst">0.00</label></span>
                                    @Html.Hidden("hdnGSTGL")
                                    @Html.Hidden("hdnGST")
                                </div>
                            </div>

                        </div>

                        <div class="form-section3-blank">

                            &nbsp;
                        </div>
                        <div class="form-section3">

                            <div class="input-field col s12">

                                <div class="row">
                                    <div class="input-field col s6" style="padding-top:27px;">
                                        <input type="checkbox" ID="chkIsRecurr" class="css-checkbox" onclick="showfreq();" />
                                        <label for="chkIsRecurr">Is Recurring</label>
                                    </div>
                                    <div class="input-field col s6" style="display:block;" id="dvfreq">
                                        <select ID="ddlFrequency" class="browser-default">
                                            <option>Select</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="text-field col s12">
                                <div class="row">
                                    <label style="font-size: 0.9em;">Use Tax</label>
                                    <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                        <label ID="lblTotalUseTax"></label>
                                    </span>
                                </div>
                            </div>

                            <div class="input-field col s12 pdrt lblfield" style="display:block;" id="txtqstgv">
                                <div class="row">
                                    <span class="ttlab" id="spansalestax">Sales Tax</span>
                                    <span class="ttlval">
                                        <label ID="txtqst">0.00</label>
                                    </span>
                                    @Html.Hidden("hdnQSTGL")
                                    @Html.Hidden("hdnQST")
                                    @Html.Hidden("hdnSTaxType")
                                    @Html.Hidden("hdnSTaxName")
                                </div>
                            </div>

                        </div>
                    </div>

                </div>

                <div class="form-section-row" id="srchpane">
                    <div class="form-section3">
                        <div class="input-field col s12">
                            <div class="row">
                                <label class="drpdwn-label">Search for Bills</label>
                                <select ID="ddlInvoice" class="browser-default" AutoPostBack="true">
                                    <option Value="0">All</option>
                                    <option Value="1">Outstanding</option>
                                    <option Value="2">Due</option>
                                    <option Value="3">Credit Bills</option>
                                </select>

                                <div ID="UpdatePanel7">
                                    <div>
                                        <input type="text" ID="txtSearchDate" class="datepicker_mom" MaxLength="10"
                                               autocomplete="off" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="input-field col s12">
                            <div class="row">
                                <label class="drpdwn-label">Vendor</label>
                                <select ID="ddlVendor" class="browser-default" onchange="ddlVendoronchange(this.value);" AutoPostBack="true" TabIndex="1">
                                    <option>Select</option>
                                </select>
                            </div>
                        </div>
                        <div class="input-field col s12">
                            <div class="row">
                                @Html.Hidden("hdnDiscGL")
                                <input type="text" ID="txtDiscGL" Placeholder="Search by acct# and name" />
                                <label ID="lbltxtDiscGL" for="txtDiscGL">Discount GL</label>
                            </div>
                        </div>
                        <div class="input-field col s12" id="dvCompanyPermission">
                            <div class="row">
                                <label class="drpdwn-label">Company</label>
                                <select ID="ddlCompany" class="browser-default" AutoPostBack="true">
                                    <option>Select</option>
                                </select>
                            </div>
                        </div>

                    </div>
                    <div class="form-section3-blank">
                        &nbsp;
                    </div>
                    <div class="form-section3">
                        <div class="text-field col s12" id="vendorBalance">
                            <div class="row">
                                <label style="font-size: 0.9em;">Vendor Balance</label>
                                <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                    <div ID="updVendorBal">
                                        <div>
                                            <label ID="lblVendorBal"></label>
                                        </div>
                                        @*<Triggers>
                                                <asp:AsyncPostBackTrigger ControlID="ddlVendor" />
                                            </Triggers>*@
                                    </div>
                                </span>
                            </div>
                        </div>
                        <div class="text-field col s12" id="DiscTaken">
                            <div class="row">
                                <label style="font-size: 0.9em;">Discount Taken</label>
                                <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                    <div ID="updTotalDisc">
                                        <div>
                                            <label ID="lblTotalDiscount"></label>
                                        </div>
                                        @*<Triggers>
                                                <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                            </Triggers>*@
                                    </div>
                                </span>
                            </div>
                        </div>
                        <div class="text-field col s12" id="Div1">
                            <div class="row">
                                <label style="font-size: 0.9em;">Selected Vendor Count</label>
                                <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                    <div ID="UpdateSelectedVendorCount">
                                        <div>
                                            <label ID="lblSelectedVendorCount"></label>
                                        </div>
                                        @*<Triggers>
                                                <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                            </Triggers>*@
                                    </div>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="form-section3-blank">
                        &nbsp;
                    </div>
                    <div class="form-section3">
                        <div class="text-field col s12" id="SelectPay">
                            <div class="row">
                                <label style="font-size: 0.9em;">Selected Vendor Payment</label>
                                <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                    <div ID="updSelectedPay">
                                        <div>
                                            <label ID="lblSelectedPayment"></label>
                                        </div>
                                        @*<Triggers>
                                                <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />

                                            </Triggers>*@
                                    </div>
                                </span>
                            </div>
                            @Html.Hidden("hdnTPay")
                        </div>
                        <div ID="UpdatePanel8">
                            <div>
                                <div class="text-field col s12" id="runningBalance">
                                    <div class="row">
                                        <label style="font-size: 0.9em;">Running Total Balance Selected</label>
                                        <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                            <label ID="lblRunBalance"></label>
                                        </span>
                                    </div>
                                </div>
                                <div class="text-field col s12" id="vendorCount">
                                    <div class="row">
                                        <label style="font-size: 0.9em;">Running Vendor Count Selected</label>
                                        <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                            <label ID="lblTotalVendorCount"></label>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            @*<Triggers>
                                    <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                    <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                </Triggers>*@
                        </div>
                    </div>
                </div>
                <div id="dvWriteCheck" style="display: block;">
                    <div class="form-section-row" id="pnlWriteCheck">
                        <div class="section-ttle">
                            Generate Check
                        </div>
                        <div class="form-section3">
                            <div class="input-field col s12">
                                <div class="row">
                                    <label class="drpdwn-label">Bank Account </label>
                                    <select ID="ddlBank" class="browser-default" ValidationGroup="Check"
                                            AutoPostBack="true">
                                        <option>Select</option>
                                    </select>
                                </div>
                            </div>
                            <div class="input-field col s12">
                                <div class="row">
                                    <label class="drpdwn-label">Form of Payment</label>

                                    <select ID="ddlPayment" class="browser-default" AutoPostBack="true">
                                        <option>Select</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="form-section3-blank">
                            &nbsp;
                        </div>
                        <div class="form-section3">
                            <div class="text-field col s12">
                                <div class="row">
                                    <label style="font-size: 0.9em;">Current Balance </label>
                                    <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                        <div ID="UpdatePanel3">
                                            <div>
                                                <label ID="lblCurrentBal"></label>
                                            </div>
                                            @*<Triggers>
                                                    <asp:AsyncPostBackTrigger ControlID="ddlBank" />
                                                    <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                    <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                                </Triggers>*@
                                        </div>
                                    </span>
                                </div>
                            </div>

                            <div class="text-field col s12">
                                <div class="row">
                                    <label style="font-size: 0.9em;">Requirement</label>
                                    <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                        <div ID="UpdatePanel6">
                                            <div>
                                                <div>
                                                    <label ID="lblRequirement"></label>
                                                </div>
                                            </div>
                                            @*<Triggers>
                                                    <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                    <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                                </Triggers>*@
                                        </div>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="form-section3-blank">
                            &nbsp;
                        </div>
                        <div class="form-section3">
                            <div class="text-field col s12">
                                <div class="row">
                                    <label style="font-size: 0.9em;">Ending Balance</label>
                                    <span style="float: right !important; font-size: 0.9em; color: #000 !important;">
                                        <div ID="UpdatePanel4">
                                            <div>
                                                <label ID="lblCheckEndingBalance"></label>
                                            </div>
                                            @*<Triggers>
                                                    <asp:AsyncPostBackTrigger ControlID="ddlBank" />
                                                    <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                    <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                                </Triggers>*@
                                        </div>
                                    </span>
                                </div>
                            </div>

                            <div class="input-field col s12">
                                <div class="row">
                                    <div ID="UpdatePanel5">
                                        <div>
                                            <input type="text" ID="txtNextCheck" MaxLength="19"
                                                   onkeypress="return isNumberKey(event,this)" autocomplete="off" onchange="return IsExistCheckNo();" />
                                            <label ID="lblCheck" for="txtNextCheck">Next Check#</label>
                                        </div>
                                        @*<Triggers>
                                                <asp:AsyncPostBackTrigger ControlID="ddlBank" />
                                                <asp:AsyncPostBackTrigger ControlID="ddlPayment" />
                                                <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                            </Triggers>*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="pnlCheck" class="form-section-row checkdiv">
                        <div class="section-ttle checktitle">
                            Check
                        </div>
                        <div class="checkcontent">

                            <div class="input-field col s11">
                                <div class="row">
                                    &nbsp;
                                </div>
                            </div>
                            <div class="input-field col s1">
                                <label ID="lblDate" for="txtDate">Date</label>
                                <input type="text" ID="txtDate" class="datepicker_mom" autocomplete="off" Width="80" ValidationGroup="Check" />
                            </div>

                            <div class="text-field col s10">
                                <div class="row">
                                    <div ID="UpdatePanel1">
                                        <div>
                                            <label style="float:left;">Pay to the order of</label>
                                            <label ID="lblVendor" class="checklbl"></label>
                                        </div>
                                    </div>

                                </div>
                            </div>

                            <div class="text-field col s2">
                                <div class="row" style="float:right;">
                                    <div ID="updTotalAmount">
                                        <div>
                                            <label ID="lblTotalAmount"></label>
                                        </div>
                                        @*<Triggers>
                                                <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                            </Triggers>*@
                                    </div>
                                </div>
                            </div>

                            <div class="text-field col s11">
                                <div class="row">
                                    <div ID="UpdatePanel2">
                                        <div>
                                            <label ID="lblDollar" class="checklbl"></label>
                                        </div>
                                        @*<Triggers>
                                                <asp:AsyncPostBackTrigger ControlID="btnCutCheck" />
                                                <asp:AsyncPostBackTrigger ControlID="btnSelectChkBox" />
                                            </Triggers>*@
                                    </div>
                                </div>
                            </div>
                            <div class="text-field col s1">
                                <div class="row" style="float: right;">
                                    Dollars
                                </div>
                            </div>


                            <div class="input-field col s12">
                                <div class="row">
                                    <label ID="lblMemo" for="txtMemo" class="checklbl">Memo</label>
                                    <input type="text" ID="txtMemo" autocomplete="off" />
                                </div>
                            </div>
                        </div>


                    </div>
                </div>
            </div>

        </div>
    </div>






    <div class="grid_container">
        <div class="form-section-row" style="margin-bottom: 0 !important;">
            <div class="RadGrid RadGrid_Material FormGrid">


            </div>
        </div>
    </div>

    <div>
        <div class="container accordian-wrap">
            <div class="row">
                <div class="col s12 m12 l12">
                    <div class="row">
                        <ul class="collapsible popout collapsible-accordion form-accordion-head" data-collapsible="expandable">
                            <li id="liaccrdGlAccount">
                                <div id="accrdGlAccount" class="collapsible-header accrd accordian-text-custom "><i class="mdi-action-info"></i>GL Account Info</div>
                                <div class="collapsible-body">
                                    <div class="form-content-wrap">
                                        <div class="form-content-pd">
                                            @*<telerik:RadAjaxPanel ID="RadAjaxPanel_gvDepositGL" LoadingPanelID="RadAjaxLoadingPanel1"
                                                ClientEvents-OnRequestStart="requestStart" ClientEvents-OnResponseEnd="responseEnd">*@
                                            <div class="form-section-row">
                                                <div class="grid_container" style="overflow-y:scroll;">

                                                    <div class="form-section-row" style="margin-bottom: 0 !important;">
                                                        <div class="RadGrid RadGrid_Material FormGrid">

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="btnlinks">
                                                <a ID="btnAddNewLines" CausesValidation="False" Style="color: #000; font-size: 1.5em; display:contents; padding: 0" Width="20px"
                                                   ToolTip="Add New Row" onclick="itemJSON();">
                                                    <i class="mdi-content-add-circle" style="color: #2bab54;font-size: 1.2em; font-weight: bold;"></i>
                                                </a>

                                                <a ID="btnCopyPrevious" CausesValidation="false" onclick="itemJSON();" Style="display: block;">Copy Previous</a>
                                            </div>
                                            @*</telerik:RadAjaxPanel>*@
                                            <div class="cf"></div>
                                        </div>
                                    </div>
                                </div>
                            </li>


                            <li id="adEditPayment">
                                <div id="accrdPayment" class="collapsible-header accrd active accordian-text-custom "><i class="mdi-action-info"></i>Bills Info</div>
                                <div class="collapsible-body">
                                    <div class="form-content-wrap">
                                        <div class="form-content-pd">
                                            <div class="form-section-row">
                                                <div class="grid_container">
                                                    <div class="form-section-row" style="margin-bottom: 0 !important;">

                                                        <div class="RadGrid RadGrid_Material FormGrid">


                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="cf"></div>
                                        </div>
                                    </div>
                                </div>

                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.Hidden("hdnSelectPOIndex")
@Html.Hidden("hdnRowField")
@Html.Hidden("hdnBatch")
@Html.Hidden("hdnTransID")
@Html.Hidden("hdnStatus")
@Html.Hidden("hdnGLItem")
@Html.Hidden("hdnInvDefaultAcctID", "")
@Html.Hidden("hdnInvDefaultAcctName", "")
@Html.Hidden("hdOpSeqID")
@Html.Hidden("hdLineNo")
@Html.Hidden("hdnIsAutoCompleteSelected")

@*<script defer src="https://use.fontawesome.com/releases/v5.0.10/js/all.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        $(window).scroll(function () {
            if ($(window).scrollTop() >= 0) {
                $('#divButtons').addClass('fixed-header');
            }
            if ($(window).scrollTop() <= 0) {
                $('#divButtons').removeClass('fixed-header');
            }
        });

        //$.ajax({
        //    type: "POST",
        //    contentType: "application/json; charset=utf-8",
        //    url: "AccountAutoFill.asmx/GetIsSalesTaxAPBill",
        //    //data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + false + '", "con": "' + dtaaa.con + '"}',
        //    dataType: "json",
        //    async: true,
        //    success: function (data) {
        //        //response($.parseJSON(data.d));
        //        var ui = JSON.parse(data.d);

        //        if (ui.length > 0) {
        //            var IsSalesTaxAPBill = ui[0].IsSalesTaxAPBill;
        //            var IsUseTaxAPBill = ui[0].IsUseTaxAPBill;
        //            if (IsSalesTaxAPBill == "1") {

        //                //$('txtgstgv').style.display = 'block';
        //                $('txtqstgv').style.display = 'block';
        //            } else {


        //                //$('txtgstgv').style.display = 'none';
        //                $('txtqstgv').style.display = 'none';
        //            }

        //            if (IsUseTaxAPBill == "1") {
        //                $('txttaxcodegv').style.display = 'block';

        //            } else {

        //                $('txttaxcodegv').style.display = 'none';

        //            }
        //            //$(txtGvAcctName).val(ui[0].DefaultAcct);
        //        }


        //    },
        //    error: function (result) {
        //        alert("Due to unexpected errors we were unable to load phase details");
        //    }
        //});

        var bqs = GetParameterValues('bill');
        var vqs = GetParameterValues('vid');
        var rqs = GetParameterValues('ref');
        if (bqs == 'c') {

            ValidatorEnable($("#rfvtxtvendor")[0], true);

            var tAmount = 0.00;
            if ($find("#RadGrid_gvJobCostItems") != null) {
                var masterTable = $find("#RadGrid_gvJobCostItems").get_masterTableView();
                var count = masterTable.get_dataItems().length;
                var item;
                for (var i = 0; i < count; i++) {
                    item = masterTable.get_dataItems()[i];
                    var Qty = item.findElement("txtGvQuan");
                    var Amount = item.findElement("txtGvAmount");
                    var Price = item.findElement("txtGvPrice");
                    var QtyVal = $(Qty).val();
                    var AmountVal = $(Amount).val();
                    if (QtyVal != "" && AmountVal != "") {
                        if (!isNaN(parseFloat(QtyVal)) && !isNaN(parseFloat(AmountVal)) && parseFloat(QtyVal) != 0) {
                            var QtyPrice = parseFloat(AmountVal) / parseFloat(QtyVal);
                            tAmount = tAmount + parseFloat(AmountVal);
                        }
                    }
                }
            }
            if (parseFloat(tAmount) > 0) {
                ValidatorEnable($("#rfvbillref")[0], true);
                ValidatorEnable($("#rfvMemo1")[0], true);
            }
            else {
                ValidatorEnable($("#rfvbillref")[0], false);
                ValidatorEnable($("#rfvMemo1")[0], false);
            }
        }
        else {

            ValidatorEnable($("#rfvtxtvendor")[0], false);
            ValidatorEnable($("#rfvbillref")[0], false);
            ValidatorEnable($("#rfvMemo1")[0], false);
        }
        if (bqs != null && vqs != null && rqs != null) {

            var totalpay = 0;
            var tPay = 0;
            var tDisc = 0;
            var tBal = 0;
            var tPay1 = 0;
            var tDisc1 = 0;
            var tBal1 = 0;
            var tDisc = 0;
            var tvendors = 0;
            var titems = 0;
            $("#gvBills").find('tr:not(:first, :last)').each(function () {
                var $tr = $(this);

                var chk = $tr.find('input[id*=chkSelect]');
                var hlInvoice = $tr.find('[id*=hlInvoice]').text();
                if (rqs == hlInvoice) {

                    //if (ret == true) {
                    //    $tr.css('background-color', '#c3dcf8');
                    //    chk.prop('checked', true);
                    //}
                    //else {
                    //    chk.prop('checked', false);
                    //    $tr.removeAttr("style");
                    //}
                    chk.prop('checked', true);
                    $tr.css('background-color', '#c3dcf8');
                    var hdnSelected = $tr.find('[id*=hdnSelected]');
                    var hdnOriginal = $tr.find('[id*=hdnOriginal]');
                    var hdnPrevDue = $tr.find('[id*=hdnPrevDue]');
                    var lblDue = $tr.find('[id*=lblBalance]');
                    var txtDisc = $tr.find('input[id*=txtGvDisc]');
                    var hdnDisc = $tr.find('[id*=hdnDisc]');
                    var txtPay = $tr.find('input[id*=txtGvPay]');

                    var pay = $(txtPay).val().toString().replace(/[\$\(\),]/g, '');
                    var disc = $(txtDisc).val().toString().replace(/[\$\(\),]/g, '');

                    var OrgDisc = parseFloat($(hdnDisc).val());
                    var rOrgDisc = OrgDisc.toLocaleString("en-US", { minimumFractionDigits: 2 });
                    //////////////////////
                    var due = parseFloat($(lblDue).text().toString().replace(/[\$\(\),]/g, ''));
                    //var prevDue = parseFloat($(hdnOriginal).val() - $(hdnSelected).val());
                    var prevDue = parseFloat($(hdnOriginal).val() - $(hdnSelected).val() - $(hdnDisc).val());
                    var pay = 0;

                    var rpay = pay.toLocaleString("en-US", { minimumFractionDigits: 2 });
                    var rprevDue = prevDue.toLocaleString("en-US", { minimumFractionDigits: 2 });


                    //if ($(this).prop('checked') == true) {

                    $(txtPay).val(rprevDue)
                    $(txtDisc).val(rOrgDisc)
                    //$(txtDisc).val('0.00')
                    $(lblDue).text(cleanUpCurrency('$' + rpay))
                    SelectedRowStyle("#gvBills")
                    //}


                    CalculatePayTotal();
                    CalculatePayTotalSelected();
                    $("#btnSelectChkBox").click();
                }

                // if ($tr.find('input[id*=txtGvPay]').attr('id') != "" && typeof $tr.find('input[id*=txtGvPay]').attr('id') != 'undefined') {
                //var payments = $tr.find('input[id*=txtGvPay]').val().replace(/[\$\(\),]/g, '');

                //if (!isNaN(parseFloat(payments))) {
                //    totalpay += parseFloat(payments);
                //}
                //}


            });
            //$("#lblTotalAmount11").text(totalpay.toFixed(2));

        }

    });

    function SetOpToHiddenPop() {
        var selectedLineNo = $("#hdLineNo").val();
        var lineItem = $("#lineItem999").val();
        $("#" + selectedLineNo).val(lineItem);

        var radwindow = $find("#RadWindowWarehouse");
        radwindow.close();
    }

    function OnClientCloseHandler1(sender, args) {
        var selectedLineNo = $("#hdLineNo").val();
        var lineItem = $("#lineItem999").val();
        $("#" + selectedLineNo).val(lineItem);
    }

    function SetOpToHiddenField() {
        var selectedRow = $("#hdOpSeqID").val();
        var selectedLineNo = $("#hdLineNo").val();
        var selectedCode = $('input[name=opSquence]:checked').val();
        $("#" + selectedRow).val(selectedCode);
        var lineItem = $("#lineItem" + selectedCode).val();
        //alert(lineItem);
        $("#" + selectedLineNo).val(lineItem);

        var radwindow = $find("#RadWindowWarehouse");
        radwindow.close();
        $("#" + selectedLineNo).val(lineItem);
    }


    function pageLoad(sender, args) {
        $("#txtdated").hide();
        $("#txtDateBefore").hide();

        $('input[name="radio-group"]').change(function () {
            if ($('rdDateBefore').checked) {
                $("#txtDateBefore").show();
                $("#txtdated").hide();
            }
            if ($('rdDated').checked) {
                $("#txtdated").show();
                $("#txtDateBefore").hide();

            }
            if ($('rdDue').checked) {
                $("#txtdated").hide();
                $("#txtDateBefore").hide();

            }
            if ($('rdClear').checked) {
                $("#txtdated").hide();
                $("#txtDateBefore").hide();
            }
            if ($('rdRegard').checked) {
                $("#txtdated").hide();
                $("#txtDateBefore").hide();

            }

        });

        $('.datepicker_wc').pikaday({
            firstDay: 0,
            format: 'MM/DD/YYYY',
            minDate: new Date(2000, 1, 1),
            maxDate: new Date(2100, 12, 31),
            yearRange: [2000, 2100]
        });


        $("[id*=chkSelect]").change(function () {
            //debugger;
            try {
                var chk = $(this).attr('id');
                // debugger;
                /////////////////////
                //var txtPay = $(this).parent().find('input[id$="txtGvPay"]').attr('id');
                //var txtDisc = $(this).parent().next().next().next().next().find('input[id$="txtGvDisc"]').attr('id');
                //var lblDue = $(this).parent().next().next().next().find('span[id$="lblBalance"]').attr('id');
                //var hdnPrevDue = $(this).parent().next().next().next().find('input:hidden[id$="hdnPrevDue"]').attr('id');


                var hdnSelected = $(chk.replace('chkSelect', 'hdnSelected'));
                var hdnOriginal = $(chk.replace('chkSelect', 'hdnOriginal'));
                var hdnPrevDue = $(chk.replace('chkSelect', 'hdnPrevDue'));
                var lblDue = $(chk.replace('chkSelect', 'lblBalance'))
                var txtDisc = $(chk.replace('chkSelect', 'txtGvDisc'));
                var hdnDisc = $(chk.replace('chkSelect', 'hdnDisc'));
                var txtPay = $(chk.replace('chkSelect', 'txtGvPay'));

                var pay = $(txtPay).val().toString().replace(/[\$\(\),]/g, '');
                var disc = $(txtDisc).val().toString().replace(/[\$\(\),]/g, '');

                var OrgDisc = parseFloat($(hdnDisc).val());
                var rOrgDisc = OrgDisc.toLocaleString("en-US", { minimumFractionDigits: 2 });
                //////////////////////
                var due = parseFloat($(lblDue).text().toString().replace(/[\$\(\),]/g, ''));
                //var prevDue = parseFloat($(hdnOriginal).val() - $(hdnSelected).val());
                var prevDue = parseFloat($(hdnOriginal).val() - $(hdnSelected).val() - $(hdnDisc).val());
                var pay = 0;

                var rpay = pay.toLocaleString("en-US", { minimumFractionDigits: 2 });
                var rprevDue = prevDue.toLocaleString("en-US", { minimumFractionDigits: 2 });


                if ($(this).prop('checked') == true) {

                    $(txtPay).val(rprevDue)
                    $(txtDisc).val(rOrgDisc)
                    //$(txtDisc).val('0.00')
                    $(lblDue).text(cleanUpCurrency('$' + rpay))
                    SelectedRowStyle("#gvBills")
                }
                else if ($(this).prop('checked') == false) {
                    $(txtPay).val(rpay)
                    //$(txtDisc).val(rpay)
                    $(txtDisc).val(rOrgDisc)
                    $(lblDue).text(cleanUpCurrency('$' + rprevDue))
                    $(this).closest('tr').removeAttr("style");
                }

                CalculatePayTotal();
                CalculatePayTotalSelected();
                $("#btnSelectChkBox").click();
            } catch (e) {

            }
        });

        $("[id*=chkSelectAll]").change(function () {
            //debugger;
            var ret = $(this).prop('checked');
            var tPay = 0;
            var tDisc = 0;
            var tBal = 0;
            var tPay1 = 0;
            var tDisc1 = 0;
            var tBal1 = 0;
            var tDisc = 0;
            var tvendors = 0;
            var titems = 0;
            $("#gvBills").find('tr:not(:first, :last)').each(function () {
                var $tr = $(this);
                var chk = $tr.find('input[id*=chkSelect]');
                if (ret == true) {
                    $tr.css('background-color', '#c3dcf8');
                    chk.prop('checked', true);
                }
                else {
                    chk.prop('checked', false);
                    $tr.removeAttr("style");
                }

                var ch_id = chk.attr('id');
                if (ch_id != undefined) {
                    if (ch_id != "ctl00_ContentPlaceHolder1_gvBills_ctl00_ctl02_ctl00_chkSelectAll") {
                        CalGrid(ch_id);
                    }
                }
                if ($tr.find('input[id*=txtGvPay]').attr('id') != "" && typeof $tr.find('input[id*=txtGvPay]').attr('id') != 'undefined') {
                    var payment = $tr.find('input[id*=txtGvPay]').val().replace(/[\$\(\),]/g, '');

                    if (!isNaN(parseFloat(payment))) {
                        tPay += parseFloat(payment);

                    }
                }


                if ($tr.find('input[id*=txtGvDisc]').attr('id') != "" && typeof $tr.find('input[id*=txtGvDisc]').attr('id') != 'undefined') {
                    var disc = $tr.find('input[id*=txtGvDisc]').val().replace(/[\$\(\),]/g, '');

                    if (!isNaN(parseFloat(disc))) {
                        tDisc += parseFloat(disc);
                    }
                }

                if ($tr.find('[id*=lblBalance]').attr('id') != "" && typeof $tr.find('[id*=lblBalance]').attr('id') != 'undefined') {
                    //var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\(\),]/g, '');
                    var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\,]/g, '');
                    if (bal.includes('(')) {
                        bal = bal.replace(/[\$\(\),]/g, '');
                        bal = -bal;
                    }

                    if (!isNaN(parseFloat(bal))) {
                        tBal += parseFloat(bal);
                    }
                }
                if ($tr.find('input[id*=txtGvPay]').attr('id') != "" && typeof $tr.find('input[id*=txtGvPay]').attr('id') != 'undefined') {
                    var payment = $tr.find('input[id*=txtGvPay]').val().replace(/[\$\(\),]/g, '');

                    if (!isNaN(parseFloat(payment))) {
                        tPay1 += parseFloat(payment);
                    }
                }
                if ($tr.find('input[id*=txtGvDisc]').attr('id') != "" && typeof $tr.find('input[id*=txtGvDisc]').attr('id') != 'undefined') {
                    var disc = $tr.find('input[id*=txtGvDisc]').val().replace(/[\$\(\),]/g, '');

                    if (!isNaN(parseFloat(disc))) {
                        tDisc1 += parseFloat(disc);
                    }
                }

                if ($tr.find('[id*=lblBalance]').attr('id') != "" && typeof $tr.find('[id*=lblBalance]').attr('id') != 'undefined') {
                    //var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\(\),]/g, '');
                    var bal = $tr.find('[id*=lblBalance]').text().replace(/[\$\,]/g, '');
                    if (bal.includes('(')) {
                        bal = bal.replace(/[\$\(\),]/g, '');
                        bal = -bal;
                    }
                    if (!isNaN(parseFloat(bal))) {
                        tBal1 += parseFloat(bal);
                    }
                }
            })
            var _currencyInWord = inWords(parseFloat(Math.trunc(tPay)));
            var d = tPay - Math.trunc(tPay);
            if (d > 0) {
                d = Math.round(d * 100);
                _currencyInWord = _currencyInWord + " And " + d + " / 100";
            }
            _currencyInWord = "*** " + _currencyInWord + "****************";
            $("#lblSelectedPayment").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $("#lblRequirement").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $("#lblTotalAmount").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $("#lblTotalAmount11").html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $("#lblDollar").html(_currencyInWord);
            $("#hdnTPay").val(tPay.toString());
            $('.cls-payment').html(cleanUpCurrency("$" + parseFloat(tPay).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $("#lblTotalDiscount").html(cleanUpCurrency("$" + parseFloat(tDisc).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $('.cls-disc').html(cleanUpCurrency("$" + parseFloat(tDisc).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            GetPaymentTotal();

            $('.cls-bal').html(cleanUpCurrency("$" + parseFloat(tBal).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            //var vitems = calculateItems();
            //$("#lblOpenItems").html(vitems.toString());

            //$("#lblAutoSelectBalance").html(cleanUpCurrency("$" + parseFloat(tPay1).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $('.cls-payment').html(cleanUpCurrency("$" + parseFloat(tPay1).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $("#lblTotalDiscount").html(cleanUpCurrency("$" + parseFloat(tDisc1).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $('.cls-disc').html(cleanUpCurrency("$" + parseFloat(tDisc1).toLocaleString("en-US", { minimumFractionDigits: 2 })));

            $('.cls-bal').html(cleanUpCurrency("$" + parseFloat(tBal1).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            $("#btnSelectChkBox").click();
        });

        var firstReport = '<%=Session["wc_first"] %>';
        if (firstReport == "true") {
            showFirstWindow();
                //<% Session["wc_first"] = null; %>
            }

        var secondReport = '<%=Session["wc_second"] %>';
        if (secondReport == "true") {
            showSecondWindow();
                //<% Session["wc_second"] = null; %>
            }

        var thirdReport = '<%=Session["wc_third"] %>';
        if (thirdReport == "true") {
            showThirdWindow();
                //<% Session["wc_third"] = null; %>
            }


        $("[id*=txtGvDisc]").change(function () {
            //debugger;
            var txtDisc = $(this).attr('id');
            var chk = $(this).parent().prevAll().find('input:checkbox[id$="chkSelect"]');
            var lblDue = $(this).parent().prev().find('span[id$="lblBalance"]');
            var hdnPrevDue = $(this).parent().prev().find('input:hidden[id$="hdnPrevDue"]');
            var disc = $(this).val().toString().replace(/[\$\(\),]/g, '');
            var pay = $(this).parent().next().find('input[id$="txtGvPay"]').val().replace(/[\$\(\),]/g, '');
            var hdnDisc = $(this).parent().prev().find('input:hidden[id$="hdnDisc"]');
            var hdnSelected = $(this).parent().prev().find('input:hidden[id$="hdnSelected"]');
            var hdnOriginal = $(this).parent().prev().find('input:hidden[id$="hdnOriginal"]');

            if (pay == '') {
                pay = 0;
                $(this).parent().next().find('input[id$="txtGvPay"]').val('$0.00')
            }
            if (disc == '') {
                disc = 0;
                $(this).val('$0.00')
            }

            var Selected = parseFloat($(hdnSelected).val());
            var Original = parseFloat($(hdnOriginal).val());

            var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);

            if (parseFloat(Duepayment) >= 0) {
                //$(this).parent().prev().find('span[id$="lblBalance"]').val(parseFloat(Duepayment).toLocaleString("en-US", { minimumFractionDigits: 2 }));
                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
            else {
                disc = 0;
                var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);

                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
            total = parseFloat(pay) + parseFloat(disc);
            if (total != 0) {

                //debugger;
                //disc = parseFloat(disc);
                //var due = parseFloat($(lblDue).text().toString().replace(/[\$\(\),]/g, ''));
                //var prevDue = parseFloat($(hdnPrevDue).val())
                //alert(due);
                //alert(prevDue);
                //var IsNeg = false;
                //if (disc < 0) {
                //    IsNeg = true;
                //    pay = pay * -1;
                //    disc = disc * -1;
                //    prevDue = prevDue * -1;
                //    total = total * -1;
                //}
                //// debugger;
                //if (prevDue < total) {
                //    if (prevDue < disc) {
                //        pay = 0;
                //        disc = prevDue;
                //    }
                //    else {
                //        pay = prevDue - disc;
                //    }
                //    total = parseFloat(pay) + parseFloat(disc);
                //}

                //due = prevDue - total;
                //if (IsNeg) {
                //    pay = pay * -1;
                //    prevDue = prevDue * -1;
                //    disc = disc * -1;
                //    due = due * -1;
                //}


                //var payy = parseFloat(pay) + parseFloat(due);
                $(this).val(disc.toLocaleString("en-US", { minimumFractionDigits: 2 }));
                //$(lblDue).text(cleanUpCurrency('$' + due.toLocaleString("en-US", { minimumFractionDigits: 2 })));
                //$(this).parent().next().find('input[id$="txtGvPay"]').val(payy.toLocaleString("en-US", { minimumFractionDigits: 2 }))
                $(chk).prop('checked', true);
                SelectedRowStyle("#gvBills")
            }
            else {
                $(chk).prop('checked', false);
                $(this).closest('tr').removeAttr("style");
            }
            CalculatePayTotal();
            CalculatePayTotalSelected();
            $("#btnSelectChkBox").click();
        });

        $("[id*=txtGvPay]").change(function () {
            // debugger;

            var txtPay = $(this).attr('id');

            var chk = $(this).parent().prevAll().find('input:checkbox[id$="chkSelect"]');
            var lblDue = $(this).parent().prev().prev().find('span[id$="lblBalance"]');
            var hdnPrevDue = $(this).parent().prev().prev().find('input:hidden[id$="hdnPrevDue"]');
            var pay = $(this).val().toString().replace(/[\$\(\),]/g, '');
            var disc = $(this).parent().prev().find('input[id$="txtGvDisc"]').val().toString().replace(/[\$\(\),]/g, '');

            var hdnDisc = $(this).parent().prev().prev().find('input:hidden[id$="hdnDisc"]');
            var hdnSelected = $(this).parent().prev().prev().find('input:hidden[id$="hdnSelected"]');
            var hdnOriginal = $(this).parent().prev().prev().find('input:hidden[id$="hdnOriginal"]');

            //--------------Start:Comment By Juily - 19-12-2019----------------------//
            //var total = 0;
            //--------------------End: By Juily - 19-12-2019-----------------//
            if (pay == '') {
                pay = 0;
                $(this).val('$0.00')
            }
            if (disc == '') {
                disc = 0;
                $(this).parent().prev().find('input[id$="txtGvDisc"]').val('$0.00')
            }

            var Selected = parseFloat($(hdnSelected).val());
            var Original = parseFloat($(hdnOriginal).val());

            var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);
            //--------------Start:Code By Juily - 19-12-2019----------------------//

            if ((parseFloat(Duepayment) < 0 && parseFloat(Original) > 0) || (parseFloat(Duepayment) > 0 && parseFloat(Original) < 0)) {
                noty({
                    text: 'OverPayment is not allowed.',
                    type: 'warning',
                    layout: 'topCenter',
                    closeOnSelfClick: true,
                    timeout: false,
                    theme: 'noty_theme_default',
                    closable: false
                });

                pay = 0;
                var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);

                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
                //$(lblDue).text('$0.00');
                total = parseFloat(pay) + parseFloat(disc);
                if (total == 0) {
                    $(this).val(pay.toLocaleString("en-US", { minimumFractionDigits: 2 }));
                    $(chk).prop('checked', true);
                    SelectedRowStyle("#gvBills")
                }
                else {
                    $(chk).prop('checked', false);
                    $(this).closest('tr').removeAttr("style");
                }
            }
            else {
                //$(lblDue).text('$0.00');
                $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
                total = parseFloat(pay) + parseFloat(disc);
                if (total != 0) {
                    $(this).val(pay.toLocaleString("en-US", { minimumFractionDigits: 2 }));
                    $(chk).prop('checked', true);
                    SelectedRowStyle("#gvBills")
                }
                else {
                    $(chk).prop('checked', false);
                    $(this).closest('tr').removeAttr("style");
                }
            }

            //--------------------End: By Juily - 19-12-2019-----------------//

            //--------------Start: Commented By Juily - 19-12-2019----------------------//
            //$(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            //--------------------End: By Juily - 19-12-2019-----------------//

            //if (parseFloat(Duepayment) >= 0) {
            //    //$(this).parent().prev().find('span[id$="lblBalance"]').val(parseFloat(Duepayment).toLocaleString("en-US", { minimumFractionDigits: 2 }));
            //    $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            //}
            //else {
            //    pay = 0;
            //    var Duepayment = parseFloat(Original) - parseFloat(Selected) - parseFloat(pay) - parseFloat(disc);

            //    $(lblDue).text(cleanUpCurrency('$' + Duepayment.toLocaleString("en-US", { minimumFractionDigits: 2 })));
            //}
            //--------------Start: Commented By Juily - 19-12-2019----------------------//

            //--------------------End: By Juily - 19-12-2019-----------------//
            //GetInvoiceTotal();
            CalculatePayTotal();
            CalculatePayTotalSelected();
            //PageMethods.GetPaymentRetainCheckbox();
            $("#btnSelectChkBox").click();

        });
        $("#txtVendor").keyup(function (event) {

            var hdnVendorID = $("#hdnVendorID");
            if ($("#txtVendor").val() == '') {
                hdnVendorID.value = '';
            }
        });
        // Materialize.updateTextFields();
        function dtaas() {
            this.prefixText = null;
            this.vendor = null;
            this.con = null;
        }
        $("#RadGrid_gvJobCostItems tbody tr input:text, #RadGrid_gvJobCostItems tbody tr input:checkbox, #RadGrid_gvJobCostItems tbody tr select").on("focus", function (e) {
            // For F6
            var ctr = $(e)[0].target;
            var currRow = $(ctr).closest('tbody>tr');
            var hdnIndexVal = $(currRow).find("[id*=hdnIndex]").val();
            $("#hdnSelectPOIndex").val(hdnIndexVal);
            $(ctr).select();
            // Work around Chrome's little problem
            //$(ctr).onmouseup = function() {
            //    // Prevent further mouseup intervention
            //    $(ctr).onmouseup = null;
            //    return false;
            //};
        });
        $("[id*=txtGvJob]").focusout(function () {
            var txtGvJob = $(this).attr('id');
            var txtGvAcctNo = $(txtGvJob.replace('txtGvJob', 'txtGvAcctNo'));
            var strAcctNo = $(txtGvAcctNo).val();

            var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
            var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
            var txtGvAcctName = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvAcctName'));

            if (strAcctNo == '') {

                var vendorId = $("#hdnVendorID").val();
                if (vendorId != '') {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetGLbyVendor",
                        data: '{"vendor": "' + vendorId + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            var ui = $.parseJSON(data.d);

                            if (ui.length > 0) {
                                var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct;
                                var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).value;
                                //-----If Inventory code select then we set default inventory Acct
                                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                if (GvPhase == 'Inventory') {
                                    $(txtGvAcctNo).val(InvDefaultAcctName);
                                    $(hdnAcctID).val(InvDefaultAcctID);
                                }
                                else {
                                    $(txtGvAcctNo).val(strAcct);
                                    $(hdnAcctID).val(ui[0].DA);
                                }
                                //$(txtGvAcctName).val(ui[0].DefaultAcct);
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load default acct#");
                        }
                    });
                }
            }
        });

        $("[id*=chkSelectAllGtax]").change(function () {
            //debugger;
            var ret = $(this).prop('checked');

            $("#RadGrid_gvJobCostItems").find('tr:not(:first, :last)').each(function () {
                var $tr = $(this);
                var chk = $tr.find('input[id*=chkGTaxable]');
                if (ret == true) {
                    chk.prop('checked', true);
                }
                else {
                    chk.prop('checked', false);
                }

                var ch_id = chk.attr('id');
                if (ch_id != undefined) {
                    if (ch_id != "ctl00_ContentPlaceHolder1_gvBills_ctl00_ctl02_ctl00_chkSelectAllGtax") {
                        CalTotalValGtax1(ch_id);
                    }
                }

            })

        });
        $("[id*=chkSelectAllStax]").change(function () {
            //debugger;
            var ret = $(this).prop('checked');

            $("#RadGrid_gvJobCostItems").find('tr:not(:first, :last)').each(function () {
                var $tr = $(this);
                var chk = $tr.find('input[id*=chkTaxable]');
                if (ret == true) {
                    chk.prop('checked', true);
                }
                else {
                    chk.prop('checked', false);
                }

                var ch_id = chk.attr('id');
                if (ch_id != undefined) {
                    if (ch_id != "ctl00_ContentPlaceHolder1_gvBills_ctl00_ctl02_ctl00_chkSelectAllStax") {
                        CalTotalValStax1(ch_id);
                    }
                }

            })

        });
        //---$$$$$ Start Items Autocomplete $$$$$$$--

        $("[id*=txtGvItem]").change(function () {
            //alert();
            var txtGvItem = $(this);
            var strItem = $(this).val();

            var txtGvItem1 = $(txtGvItem).attr('id');
            var hdnTypeId = $(txtGvItem1.replace('txtGvItem', 'hdnTypeId'));
            var hdnPID = $(txtGvItem1.replace('txtGvItem', 'hdnPID'));
            var txtGvItem = $(txtGvItem1.replace('txtGvItem', 'txtGvItem'));
            var hdnItemID = $(txtGvItem1.replace('txtGvItem', 'hdnItemID'));
            var txtGvDesc = $(txtGvItem1.replace('txtGvItem', 'txtGvDesc'));
            var job = $(txtGvItem1.replace('txtGvItem', 'hdnJobID')).value;
            var typeId = $(hdnTypeId).val();

            if (strItem != "") {

                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    // url: "AccountAutoFill.asmx/GetAutoFillItem",
                    url: "AccountAutoFill.asmx/GetPhaseExpByJobTypePO",
                    data: '{"prefixText": "' + strItem + '", "typeId": "' + typeId + '", "job": "' + job + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        var ui = $.parseJSON(data.d);
                        if (ui.length == 0) {
                            //$(txtGvItem).val('');
                            $(hdnItemID).val('');
                            $(hdnPID).val('');
                        }
                        else {
                            $(txtGvItem).val(ui[0].ItemDesc1);
                            $(hdnItemID).val(ui[0].ItemID);
                            $(hdnPID).val(ui[0].Line);
                            $(txtGvDesc).val(ui[0].fDesc);
                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Item");
                    }
                });
            }
            else {
                $(hdnPID).val('');
                $(hdnItemID).val('');
            }
        });

        $("[id*=txtGvItem]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},
            source: function (request, response) {

                var curr_control = this.element.attr('id');
                var job = $(curr_control.replace('txtGvItem', 'hdnJobID')).value;

                var typeId = $(curr_control.replace('txtGvItem', 'hdnTypeId')).value;
                var prefixText = request.term;
                query = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetPhaseByItem",
                    data: '{"typeId": "' + typeId + '", "jobId": "' + job + '", "prefixText": "' + prefixText + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load item.");
                    },
                    complete: function () {
                        $(this).data('requestRunning', false);
                    }
                });

                return false;
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                var curr_control = this.id;
                var hdnItemID = $(curr_control.replace('txtGvItem', 'hdnItemID'));
                var txtGvDesc = $(curr_control.replace('txtGvItem', 'txtGvDesc'));
                var hdnPID = $(curr_control.replace('txtGvItem', 'hdnPID'));
                var job = $(curr_control.replace('txtGvItem', 'hdnJobID')).val();

                var str = ui.item.ItemDesc;
                var strId = ui.item.ItemID;

                var GvPhase = $(curr_control.replace('txtGvItem', 'txtGvPhase')).val();
                //-----If Inventory code select then we set default inventory Acct
                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                if (GvPhase == 'Inventory') {

                    var txtGvPrice = $(curr_control.replace('txtGvItem', 'txtGvPrice'));
                    $(txtGvPrice).val(ui.item.Price);
                    CalTotalVal(txtGvPrice);
                    var txtGvAcctNo = $(curr_control.replace('txtGvItem', 'txtGvAcctNo'));
                    var hdnAcctID = $(curr_control.replace('txtGvItem', 'hdnAcctID'));
                    $(txtGvAcctNo).val(InvDefaultAcctName);
                    $(hdnAcctID).val(InvDefaultAcctID);
                }


                var CountOpsq = ui.item.CountData;
                if (CountOpsq > 1) {

                    var hdOpSq = $(curr_control.replace('txtGvItem', 'hdOpSq'));
                    var hdOpSq_ID = $(hdOpSq).attr('id');
                    var hdnPID_ID = $(hdnPID).attr('id');
                    $("#hdOpSeqID").val(hdOpSq_ID);
                    $("#hdLineNo").val(hdnPID_ID);

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetOpsqList",
                        data: '{"jobId": "' + job + '", "ItemID": "' + strId + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            var dd = $.parseJSON(data.d);
                            $('#opDiv').empty();
                            $.each(dd, function (k, v) {
                                $('#opDiv').append('<div><input type="radio" id="' + v["Code"] + '" name="opSquence" value="' + v["Code"] + '" /><label for="' + v["Code"] + '">' + v["Code"] + ":" + v["fDesc"] + '</label><input type="hidden" id="lineItem' + v["Code"] + '" value="' + v["Line"] + '"></div>');
                            });
                            var radwindow = $find("#RadWindowWarehouse");
                            radwindow.show();
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load item.");
                        }
                    });
                }

                if (strId == "0") {
                    $(this).val("");
                    $(hdnItemID).val("");
                    $(hdnPID).val("");

                }
                else {
                    if (ui.item.ItemID) {
                        $(txtGvDesc).val(ui.item.fDesc);
                        $(hdnItemID).val(ui.item.ItemID);
                        $(hdnPID).val(ui.item.Line);
                        $(this).val(ui.item.ItemDesc1);
                    }
                    else {
                        $(this).val("");
                        $(hdnPID).val(ui.item.Line);
                        $(txtGvDesc).val(ui.item.ItemDesc1);
                    }
                }
                return false;
            },
            focus: function (event, ui) {
                if (ui.item) {
                    $(this).val(ui.item.ItemDesc1);
                }
                return false;
            },

            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val());
        })
        $.each($(".pisearchinput"), function (index, item) {

            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.ItemID;
                var result_item = item.ItemDesc1;
                var result_line = item.Line;
                var result_itemfdesc = item.fDesc;
                var x = new RegExp('\\b' + query, 'ig');

                try {
                    if (result_item != null) {
                        result_item = result_item.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>';
                        });
                    }

                    if (result_itemfdesc != null) {
                        result_itemfdesc = result_itemfdesc.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>';
                        });
                    }
                } catch{ }

                if (result_line == "0") {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>  " + result_item + ", <span style='color:Gray;'><b>  </b>" + result_itemfdesc + "</span></a>")
                        .appendTo(ul);
                }
                else {
                    if (result_item == undefined) { result_item = 'No Record Found!'; }
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' class='fas fa-check-square' title=''></i>" + result_item + "</span>")
                        .appendTo(ul);
                }
            };
        });
        //---$$$$$ END Items  autocomplete $$$$$$$--





        $("[id*=txtGvJob]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},

            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;
                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetJobLocations",
                    data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + true + '", "con": "' + dtaaa.con + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load project details");
                    }
                });
            },
            select: function (event, ui) {
                var txtGvJob = this.id;
                var txtGvLoc = $(txtGvJob.replace('txtGvJob', 'txtGvLoc'));
                var hdnJobID = $(txtGvJob.replace('txtGvJob', 'hdnJobID'));
                var txtGvAcctNo = $(txtGvJob.replace('txtGvJob', 'txtGvAcctNo'));
                var hdnAcctID = $(txtGvJob.replace('txtGvJob', 'hdnAcctID'));

                $(hdnJobID).val(ui.item.ID);
                var jobStr = ui.item.ID + ", " + ui.item.fDesc;
                $(this).val(jobStr);
                $(txtGvLoc).val(ui.item.Tag);
                var GvPhase = $(txtGvJob.replace('txtGvJob', 'txtGvPhase')).val();
                //-----If Inventory code select then we set default inventory Acct
                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                if (GvPhase == 'Inventory') {
                    $(txtGvAcctNo).val(InvDefaultAcctName);
                    $(hdnAcctID).val(InvDefaultAcctID);
                }
                else {
                    $(hdnAcctID).val(ui.item.GLExp);
                    var strAcct = ui.item.Acct + ' - ' + ui.item.DefaultAcct;
                    $(txtGvAcctNo).val(strAcct);
                }
                $('#hdnIsAutoCompleteSelected').val('1');
                return false;
            },
            focus: function (event, ui) {
                try {
                    $(this).val(ui.item.fDesc);
                } catch{ }

                return false;
            },
            //change: function (event, ui) {
            //    var txtGvJob = this.id;
            //    var hdnJobID = $(txtGvJob.replace('txtGvJob', 'hdnJobID'));
            //    var strJob = $(txtGvJob).value;

            //    if (strJob == '') {
            //        $(hdnJobID).val('')
            //    }
            //},
            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })
        $.each($(".psearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.ID;
                var result_item = item.fDesc;
                var result_desc = item.Tag;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });

                if (result_value != null) {
                    result_value = result_value.toString().replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }
                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a><b> Project: </b> " + result_value + ", " + result_item + ", <span style='color:Gray;'><b> Loc: </b>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }
            };
        });

        $("[id*=txtGvJob]").change(function () {
            var isAutoCompleteSelected = $('#hdnIsAutoCompleteSelected').val();
            $('#hdnIsAutoCompleteSelected').val('0');
            if (isAutoCompleteSelected != '1') {
                //debugger
                //var txtGvJob = ;
                var strItem = $(this).val();
                var txtGvJobId = $(this).attr('id');
                var txtGvLoc = $(txtGvJobId.replace('txtGvJob', 'txtGvLoc'));
                var hdnJobID = $(txtGvJobId.replace('txtGvJob', 'hdnJobID'));
                var txtGvAcctNo = $(txtGvJobId.replace('txtGvJob', 'txtGvAcctNo'));
                var hdnAcctID = $(txtGvJobId.replace('txtGvJob', 'hdnAcctID'));
                var txtGvJob = $(txtGvJobId);
                strItem = $(hdnJobID).val();
                if (strItem != "") {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetJobLocations",
                        data: '{"prefixText": "' + strItem + '", "IsJob": "' + true + '", "con": ""}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            var ui = $.parseJSON(data.d);
                            if (ui.length == 0) {
                                $(txtGvJob).val('');
                                $(hdnJobID).val('');
                            }
                            else {
                                //debugger
                                $(hdnJobID).val(ui[0].ID);
                                var jobStr = ui[0].ID + ", " + ui[0].fDesc;
                                $(txtGvJob).val(jobStr);
                                $(txtGvLoc).val(ui[0].Tag);
                                $(hdnAcctID).val(ui[0].GLExp);
                                var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct;
                                $(txtGvAcctNo).val(strAcct);
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load project details");
                        }
                    });
                }
                else {
                    $(txtGvJob).val('');
                    $(hdnJobID).val('');
                }
            }
        });
        $("[id*=txtGvAcctNo]").focusout(function () {
            var txtGvAcctNo = $(this);
            var strAcctNo = $(this).val();

            var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
            var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
            var hdnJobID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnJobID'));

            if (strAcctNo == '') {
                var job = $(hdnJobID).val();
                if (job != '' && job != '0') {

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetGLExpByProject",
                        data: '{"Job": "' + job + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {

                            var ui = $.parseJSON(data.d);

                            if (ui.length > 0) {
                                var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct
                                var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).value;
                                //-----If Inventory code select then we set default inventory Acct
                                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                if (GvPhase == 'Inventory') {
                                    $(txtGvAcctNo).val(InvDefaultAcctName);
                                    $(hdnAcctID).val(InvDefaultAcctID);

                                }
                                else {
                                    $(txtGvAcctNo).val(strAcct);
                                    $(hdnAcctID).val(ui[0].GLExp);
                                }
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load default expense acct#");
                        }
                    });
                }
                else {

                    var vendorId = $("#hdnVendorID").val();
                    if (vendorId != '') {
                        $.ajax({
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            url: "AccountAutoFill.asmx/GetGLbyVendor",
                            data: '{"vendor": "' + vendorId + '"}',
                            dataType: "json",
                            async: true,
                            success: function (data) {
                                var ui = $.parseJSON(data.d);

                                if (ui.length > 0) {
                                    var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct
                                    var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).value;
                                    //-----If Inventory code select then we set default inventory Acct
                                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                    if (GvPhase == 'Inventory') {
                                        $(txtGvAcctNo).val(InvDefaultAcctName);
                                        $(hdnAcctID).val(InvDefaultAcctID);

                                    }
                                    else {
                                        $(txtGvAcctNo).val(strAcct);
                                        $(hdnAcctID).val(ui[0].DA);
                                    }
                                }
                            },
                            error: function (result) {
                                alert("Due to unexpected errors we were unable to load default acct#");
                            }
                        });
                    }
                }
            }
        });

        $("[id*=txtGvAcctNo]").change(function () {
            var txtGvAcctNo = $(this);
            var strAcctNo = $(this).val();
            strAcctNo = strAcctNo.split(" -")[0];
            var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
            var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
            var hdnJobID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnJobID'));

            if (strAcctNo != '') {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetChartByAcct",
                    data: '{"prefixText": "' + strAcctNo + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        var ui = $.parseJSON(data.d);

                        if (ui.length == 0) {
                            var strAcct = $(txtGvAcctNo).val();
                            $(txtGvAcctNo).val('');
                            noty({
                                text: 'Acct #' + strAcct + ' doesn\'t exist!',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: false,
                                theme: 'noty_theme_default',
                                closable: true
                            });
                        }
                        else {
                            var strAcct = ui[0].Acct + ' - ' + ui[0].fDesc;
                            var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).value;
                            //-----If Inventory code select then we set default inventory Acct
                            var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                            var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                            if (GvPhase == 'Inventory') {
                                $(txtGvAcctNo).val(InvDefaultAcctName);
                                $(hdnAcctID).val(InvDefaultAcctID);

                            }
                            else {
                                $(txtGvAcctNo).val(strAcct);
                                $(hdnAcctID).val(ui[0].ID);
                            }
                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Acct#");
                    }
                });
            }

        });

        $("[id*=txtGvAcctNo]").autocomplete({
            source: function (request, response) {
                var dtaaa = new dtaas();
                dtaaa.prefixText = request.term;
                query = request.term;
                //debugger;
                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetAccountName",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            select: function (event, ui) {

                if (ui.item.value == 0)
                    window.location.href = "addcoa.aspx";
                else {
                    var txtGvAcctName = this.id;
                    var hdnAcctID = $(txtGvAcctName.replace('txtGvAcctNo', 'hdnAcctID'));
                    var strAcct = ui.item.acct + " - " + ui.item.label;
                    var GvPhase = $(txtGvAcctName.replace('txtGvAcctNo', 'txtGvPhase')).value;
                    //-----If Inventory code select then we set default inventory Acct
                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                    if (GvPhase == 'Inventory') {
                        $(this).val(InvDefaultAcctName);
                        $(hdnAcctID).val(InvDefaultAcctID);

                    }
                    else {
                        $(hdnAcctID).val(ui.item.value);
                        $(this).val(strAcct);
                    }
                }

                return false;
            },
            focus: function (event, ui) {
                $(this).val(ui.item.acct);
                return false;
            },
            change: function (event, ui) {

                var txtGvAcctNo = this.id;
                var hdnAcctID = $(txtGvAcctNo.replace('txtGvAcctNo', 'hdnAcctID'));
                var strAcct = $(txtGvAcctNo).val();

                if (strAcct == '') {
                    $(hdnAcctID).val('')
                }
            },
            minLength: 0,
            delay: 250
        })
        $.each($(".searchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {

                var ula = ul;
                var itema = item;
                var result_value = item.value;
                var result_item = item.label;
                var result_desc = item.acct;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }
            };
        });
        $("[id*=txtGvPhase]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},
            source: function (request, response) {

                var curr_control = this.element.attr('id');
                var job = $(curr_control.replace('txtGvPhase', 'hdnJobID'));
                var prefixText = request.term;
                var job = $(job.id).val();
                if (job == "0") { job = ""; }
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetPhase",
                    data: '{"jobID": "' + job + '", "prefixText": "' + prefixText + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load type.");
                    },
                    complete: function () {
                        $(this).data('requestRunning', false);
                    }
                });
                return false;
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                var txtGvPhase = this.id;
                var hdnTypeId = $(txtGvPhase.replace('txtGvPhase', 'hdnTypeId'));
                var hdOpSq = $(txtGvPhase.replace('txtGvPhase', 'hdOpSq'));
                var str = ui.item.TypeName;
                if (str == "No Record Found!") {
                    $(this).val("");
                }
                else {
                    try {
                        $(hdnTypeId).val(ui.item.Type);
                        $(this).val(ui.item.TypeName);
                        $(hdOpSq).val(ui.item.Code);
                    } catch{ }
                }

                var GvPhase = $(txtGvPhase.replace('txtGvPhase', 'txtGvPhase')).val();
                //-----If Inventory code select then we set default inventory Acct
                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                if (GvPhase == 'Inventory') {
                    var txtGvAcctNo = $(txtGvPhase.replace('txtGvPhase', 'txtGvAcctNo'));
                    var hdnAcctID = $(txtGvPhase.replace('txtGvPhase', 'hdnAcctID'));
                    $(txtGvAcctNo).val(InvDefaultAcctName);
                    $(hdnAcctID).val(InvDefaultAcctID);
                }


                return false;
            },
            focus: function (event, ui) {
                //debugger
                if (ui.item != null) {
                    $(this).val(ui.item.TypeName);
                }
                return false;
            },
            minLength: 0,
            delay: 250
        })
            .click(function () {
                $(this).autocomplete('search', $(this).val())
            })
        $.each($(".phsearchinput"), function (index, item) {

            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.Type;
                var result_item = item.TypeName;
                var result_GroupName = item.GroupName;
                var result_Code = item.Code;
                var result_CodeDesc = item.CodeDesc;
                if (result_Code != null && result_Code != "")
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' class='fa fa-check-square' title=''></i>" + result_GroupName + ", " + result_Code + ", " + result_CodeDesc + ", <span style='color:Gray;'><b>  </b>" + result_item + "</span></span>")
                        .appendTo(ul);
                else
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' title=''></i>" + result_item + "</span>")
                        .appendTo(ul);
            };
        });

        //$("[id*=txtGvPhase]").change(function () {
        //    var txtGvPhase = $(this);
        //    var strPhase = $(this).val();

        //    var txtGvPhase1 = $(txtGvPhase).attr('id');
        //    var hdnTypeId = $(txtGvPhase1.replace('txtGvPhase', 'hdnTypeId'));
        //    var hdnPID = $(txtGvPhase1.replace('txtGvPhase', 'hdnPID'));
        //    var txtGvItem = $(txtGvPhase1.replace('txtGvPhase', 'txtGvItem'));
        //    var hdnItemID = $(txtGvPhase1.replace('txtGvPhase', 'hdnItemID'));
        //    var txtGvDesc = $(txtGvPhase1.replace('txtGvPhase', 'txtGvDesc'));

        //    if (strPhase != "") {
        //        $.ajax({
        //            type: "POST",
        //            contentType: "application/json; charset=utf-8",
        //            url: "AccountAutoFill.asmx/GetAutoFillPhase",
        //            data: '{"prefixText": "' + strPhase + '"}',
        //            dataType: "json",
        //            async: true,
        //            success: function (data) {

        //                var ui = $.parseJSON(data.d);

        //                if (ui.length == 0) {
        //                    $(txtGvPhase).val('');
        //                    $(hdnTypeId).val('');
        //                    $(hdnPID).val('');
        //                    $(txtGvItem).val('');
        //                    $(hdnItemID).val('');
        //                    noty({
        //                        text: 'Type \'' + strPhase + '\' doesn\'t exist!',
        //                        type: 'warning',
        //                        layout: 'topCenter',
        //                        closeOnSelfClick: false,
        //                        timeout: 5000,
        //                        theme: 'noty_theme_default',
        //                        closable: true
        //                    });
        //                }
        //                else {
        //                    var lbl = ui[0].Label;
        //                    var val = ui[0].Value;
        //                    $(txtGvPhase).val(lbl);
        //                    $(hdnTypeId).val(val);
        //                }
        //            },
        //            error: function (result) {
        //                alert("Due to unexpected errors we were unable to load Type");
        //            }
        //        });
        //    }
        //    else {
        //        $(hdnPID).val('');
        //        $(hdnTypeId).val('');
        //        $(txtGvItem).val('');
        //        $(hdnItemID).val('');
        //        $(txtGvDesc).val('');
        //    }
        //});
        $("[id*=txtGvPhase]").change(function () {
            //debugger
            //var txtGvPhase = $(this);
            var strPhase = $(this).val();
            var txtGvPhaseId = $(this).attr('id');
            var hdnTypeId = $(txtGvPhaseId.replace('txtGvPhase', 'hdnTypeId'));
            var hdntxtGvPhase = $(txtGvPhaseId.replace('txtGvPhase', 'hdntxtGvPhase'));
            var hdOpSq = $(txtGvPhaseId.replace('txtGvPhase', 'hdOpSq'));
            //var txtGvPhase1 = $(txtGvPhase).attr('id');
            //var hdnTypeId = $(txtGvPhase1.replace('txtGvPhase', 'hdnTypeId'));
            var hdnPID = $(txtGvPhaseId.replace('txtGvPhase', 'hdnPID'));
            var txtGvItem = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvItem'));
            var hdnItemID = $(txtGvPhaseId.replace('txtGvPhase', 'hdnItemID'));
            var txtGvDesc = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvDesc'));
            var txtGvAcctNo = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvAcctNo'));
            var hdnAcctID = $(txtGvPhaseId.replace('txtGvPhase', 'hdnAcctID'));
            //var txtGvWarehouse = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvWarehouse'));
            //var txtGvWarehouseLocation = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvWarehouseLocation'));
            var txtGvPhase = $(txtGvPhaseId);
            var hdnJobContr = $(txtGvPhaseId.replace('txtGvPhase', 'hdnJobID'));
            var job = $(hdnJobContr.id).val();
            if (job == "0") { job = ""; }
            if (strPhase != "") {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    //url: "AccountAutoFill.asmx/GetAutoFillPhase",
                    //data: '{"prefixText": "' + strPhase + '"}',
                    url: "AccountAutoFill.asmx/GetPhase",
                    data: '{"jobID": "' + job + '", "prefixText": "' + strPhase + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        //debugger
                        var ui = $.parseJSON(data.d);
                        if (ui.length == 0) {
                            $(txtGvPhase).val('');
                            $(hdnTypeId).val('');
                            $(hdnPID).val('');
                            $(txtGvItem).val('');
                            $(hdnItemID).val('');
                            noty({
                                text: 'Type \'' + strPhase + '\' doesn\'t exist!',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: 5000,
                                theme: 'noty_theme_default',
                                closable: true
                            });
                        }
                        else {
                            $(hdnTypeId).val(ui[0].Type);
                            console.log(hdnTypeId.value);
                            $(hdOpSq).val(ui[0].Code);
                            $(txtGvPhase).val(ui[0].TypeName);
                            $(hdntxtGvPhase).val(ui[0].TypeName);
                            //console.log(hdntxtGvPhase.value);
                            //var txtGvAcctNo;
                            //var hdnAcctID;
                            //var txtGvWarehouse;
                            //var txtGvWarehouseLocation;

                            if (ui[0].TypeName == "Inventory") {
                                try {
                                    //HideGridColums("true");
                                    //do inventory default account

                                    $(txtGvAcctNo).val($("#hdnInvDefaultAcctName").val());
                                    $(hdnAcctID).val($("#hdnInvDefaultAcctID").val());

                                    //$(txtGvWarehouse).attr('readOnly', false);
                                    //$(txtGvWarehouseLocation).attr('readOnly', false);
                                } catch (e) { }
                            }
                            else {
                                // HideGridColums("false");
                                try {
                                    //txtGvWarehouse = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouse'));
                                    //txtGvWarehouseLocation = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouseLocation'));
                                    //txtGvWarehouse.readOnly = true;
                                    //txtGvWarehouseLocation.readOnly = true;
                                    //$(txtGvWarehouse).attr('readOnly', true);
                                    //$(txtGvWarehouseLocation).attr('readOnly', true);
                                    //$(txtGvWarehouse).val('');
                                    //$(txtGvWarehouseLocation).val('');
                                    //txtGvAcctNo = $(txtGvPhase.replace('txtGvPhase', 'txtGvAcctNo'));
                                    //hdnAcctID = $(txtGvPhase.replace('txtGvPhase', 'hdnAcctID'));
                                    if (ui[0].AcctName != '' && ui[0].AcctID != '' && ui[0].AcctName != undefined && ui[0].AcctID != undefined) {
                                        $(txtGvAcctNo).val(ui.item.AcctName);
                                        $(hdnAcctID).val(ui.item.AcctID);
                                    }
                                } catch (e) { }
                            }
                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Type");
                    }
                });
            }
            else {
                $(hdnPID).val('');
                $(hdnTypeId).val('');
                $(txtGvItem).val('');
                $(hdnItemID).val('');
                $(txtGvDesc).val('');
            }
        });
        $("[id*=txtGvPhase]").focusout(function () {
            $(this).change();
        });



        $("[id*=txtGvUseTax]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},
            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/getUseTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                            response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                if (ui.item.value == 0)
                    window.location.href = "addbills.aspx";
                else {
                    var txtGvUseTax = this.id;
                    $(this).val(ui.item.Rate);

                    var hdnUtax = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtax'));
                    var hdnUtaxGL = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtaxGL'));

                    $(hdnUtax).val(ui.item.Name);
                    $(hdnUtaxGL).val(ui.item.GL);
                }

                return false;
            },
            focus: function (event, ui) {

                $(this).val(ui.item.Rate);
                return false;
            },
            minLength: 0,
            delay: 250

        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })
        $.each($(".tsearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.Rate;
                var result_item = item.Name;
                var result_desc = item.GL;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });

                if (result_value != null) {
                    result_value = result_value.toString().replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_value + "</span></a>")
                        .appendTo(ul);
                }
            };
        });


        $("[id*=txtGvUseTax]").change(function () {

            //var txtGvPhase = $(this);
            var strPhase = $(this).val();
            var txtGvUseTax = this.id;
            var hdnUtax = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtax'));
            var hdnUtaxGL = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtaxGL'));
            var dtaaa = new dtaa();
            dtaaa.prefixText = strPhase;
            if (strPhase != "") {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    //url: "AccountAutoFill.asmx/GetAutoFillPhase",
                    //data: '{"prefixText": "' + strPhase + '"}',
                    url: "AccountAutoFill.asmx/getUseTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        // debugger

                        var ui = $.parseJSON(data.d);

                        if (ui.length == 0) {

                            $(hdnUtax).val('');
                            $(hdnUtaxGL).val('');
                            $(this).val("");

                            noty({
                                text: 'Tax \'' + strPhase + '\' doesn\'t exist!',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: 5000,
                                theme: 'noty_theme_default',
                                closable: true
                            });
                        }
                        else {
                            $(this).val(ui[0].Rate);
                            $(hdnUtax).val(ui[0].Name);

                            $(hdnUtaxGL).val(ui[0].GL);


                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Type");
                    }
                });
            }
            else {
                $(hdnUtax).val('');
                $(hdnUtaxGL).val('');
                $(this).val('');
            }
        });


    }
    function OpenApplyCreditModal() {
             debugger;
        var tDisc = 0;

        var vdis = $("#lblTotalDiscount").html().replace(/[\$\(\),]/g, '');
        if (!isNaN(parseFloat(vdis))) {
            tDisc += parseFloat(vdis);
        }
        if (tDisc != 0) {
            var bqs = GetParameterValues('bill');
            var vqs = GetParameterValues('vid');
            var rqs = GetParameterValues('ref');
            if (bqs == 'c') {
                if (vqs == null) {
                         var hdnDiscGLs = $("#hdnDiscGLs");
                    if (hdnDiscGLs.value == '') {
                        ValidatorEnable($("#cvDiscGLs")[0], true);
                    }
                    else {
                        ValidatorEnable($("#cvDiscGLs")[0], false);
                        var wnd = $find("#ReprintCheckRange");
                        wnd.set_title("Apply Credit");
                        wnd.Show();
                    }


                }
            }
            else {

                var hdnDiscGL = $("#hdnDiscGL");
                if (hdnDiscGL.value == '') {
                    ValidatorEnable($("#cvDiscGL")[0], true);
                }
                else {
                    ValidatorEnable($("#cvDiscGL")[0], false);
                    var wnd = $find("#ReprintCheckRange");
                    wnd.set_title("Apply Credit");
                    wnd.Show();
                }
            }
        }
        else {

            ValidatorEnable($("#cvDiscGLs")[0], false);
            ValidatorEnable($("#cvDiscGL")[0], false);
            var wnd = $find("#ReprintCheckRange");
            wnd.set_title("Apply Credit");
            wnd.Show();
        }





    }
    function CloseApplyCreditModal() {
        var wnd = $find("#ReprintCheckRange");
        wnd.Close();

    }

    function showFirstWindow() {
        Sys.Application.remove_load(showFirstWindow);
        var oWindowCust = $find("# RadWindowFirstReport");
        oWindowCust.show();
    }

    function showSecondWindow() {
        Sys.Application.remove_load(showSecondWindow);
        var oWindowCust = $find("#RadWindowSecondReport");
        oWindowCust.show();
    }

    function showThirdWindow() {
        Sys.Application.remove_load(showThirdWindow);
        var oWindowCust = $find("#RadWindowThirdReport");
        oWindowCust.show();
    }

    function OnClientCloseHandler(sender, args) {
            //debugger
            //<% Session["wc_first"] = null; %>
            //<% Session["wc_second"] = null; %>
            //<% Session["wc_third"] = null; %>
            var bill = GetParameterValues('bill');
        var vid = GetParameterValues('vid');
        if (bill == null) {
            $find("#RadAjaxManager_WC").ajaxRequest();

            //window.setTimeout(function () {

            //    window.location.href = "WriteChecks.aspx";

            //}, 500);
        }
        else {
            if (vid == null) {
                noty({ text: 'Checks Saved Successfully! </br> <b>', dismissQueue: true, type: 'success', layout: 'topCenter', closeOnSelfClick: true, timeout: false, theme: 'noty_theme_default', closable: false });

                window.setTimeout(function () {

                    window.location.href = "managechecks.aspx?f=c";

                }, 1000);
            }
            else {
                $find("#RadAjaxManager_WC").ajaxRequest();
            }
        }


    }
    function GetParameterValues(param) {
        var url = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < url.length; i++) {
            var urlparam = url[i].split('=');
            if (urlparam[0] == param) {
                return urlparam[1];
            }
        }
    }
    function CalGrid(chk) {
        var hdnSelected = $(chk.replace('chkSelect', 'hdnSelected'));
        var hdnOriginal = $(chk.replace('chkSelect', 'hdnOriginal'));
        var hdnPrevDue = $(chk.replace('chkSelect', 'hdnPrevDue'));
        var lblDue = $(chk.replace('chkSelect', 'lblBalance'))
        var txtDisc = $(chk.replace('chkSelect', 'txtGvDisc'));
        var txtPay = $(chk.replace('chkSelect', 'txtGvPay'));

        var pay = $(txtPay).val().toString().replace(/[\$\(\),]/g, '');
        var disc = $(txtDisc).val().toString().replace(/[\$\(\),]/g, '');
        //////////////////////
        var due = parseFloat($(lblDue).text().toString().replace(/[\$\(\),]/g, ''))
        var prevDue = parseFloat($(hdnOriginal).val() - $(hdnSelected).val())
        var pay = 0;

        var rpay = pay.toLocaleString("en-US", { minimumFractionDigits: 2 });
        var rprevDue = prevDue.toLocaleString("en-US", { minimumFractionDigits: 2 });
        if ($("#" + chk).prop('checked') == true) {

            $(txtPay).val(rprevDue)
            $(txtDisc).val('0.00')
            $(lblDue).text(cleanUpCurrency('$' + rpay))
            SelectedRowStyle("#gvBills")
        }
        else if ($("#" + chk).prop('checked') == false) {

            $(txtPay).val(rpay)
            $(txtDisc).val(rpay)
            $(lblDue).text(cleanUpCurrency('$' + rprevDue))
            $(this).closest('tr').removeAttr("style");
        }
        //CalculatePayTotal();
        //CalculatePayTotalSelected();
    }

    /////////////////// To calculate Total and to make Gridview Amount Value to 2 decimal ////////////NK
    function CalTotalValStax(checkbox) {

        var cb = checkbox.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");
        if (parseFloat(stax.value.toString().replace(/[\$\(\),]/g, '')) <= 0) {

            noty({
                text: 'Please Set the Provincial Tax at vendor level',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 1500,
                theme: 'noty_theme_default',
                closable: true
            });
            $(hdnchkTaxable).val('0');
            checkbox.checked = false;

        }
        else {


            var staxGL = $("#hdnQSTGL");
            var gtaxGL = $("#hdnGSTGL");

            var staxType = $("#hdnSTaxType");

            var txtGvQuan;
            var txtGvPrice;
            var txtGvAmount;
            var lblSalesTax;
            var lblGstTax;
            var hdnGSTTaxAm;
            var hdnSTaxAm;
            var txtGvStaxAmount;
            var lblAmountWithTax;
            var valAmount;
            var hdnchkTaxable;
            var hdnSTaxGL;
            var hdnGSTTaxGL;
            var isGst = 0;
            var totamt = 0;
            var staxAmt = 0;
            var gtaxAmt = 0;
            var staxAmtGL = 0;
            var gtaxAmtGL = 0;

            txtGvPrice = $(cb.replace('chkTaxable', 'txtGvPrice'));
            txtGvQuan = $(cb.replace('chkTaxable', 'txtGvQuan'));
            txtGvAmount = $(cb.replace('chkTaxable', 'txtGvAmount'));
            //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
            lblGstTax = $(cb.replace('chkTaxable', 'lblGstTax'));
            lblAmountWithTax = $(cb.replace('chkTaxable', 'lblAmountWithTax'));
            hdnAmountWithTax = $(cb.replace('chkTaxable', 'hdnAmountWithTax'));
            hdnchkTaxable = $(cb.replace('chkTaxable', 'hdnchkTaxable'));
            hdnSTaxGL = $(cb.replace('chkTaxable', 'hdnSTaxGL'));
            hdnGSTTaxGL = $(cb.replace('chkTaxable', 'hdnGSTTaxGL'));
            hdnSTaxAm = $(cb.replace('chkTaxable', 'hdnSTaxAm'));
            txtGvStaxAmount = $(cb.replace('chkTaxable', 'txtGvStaxAmount'));
            hdnGSTTaxAm = $(cb.replace('chkTaxable', 'hdnGSTTaxAm'));

            gtaxAmt = parseFloat($(hdnGSTTaxAm).val());
            gtaxAmt = parseFloat(gtaxAmt) || 0;
            if (checkbox.checked == true) {
                $(hdnchkTaxable).val('1');
            } else {
                $(hdnchkTaxable).val('0');
            }

            isGst = 1;
            //if ($('txtgstgv').style.display == 'block')
            //{
            //    isGst = 1;
            //}
            //else
            //{
            //    isGst = 0;
            //}


            if (!jQuery.trim($(txtGvQuan).val()) == '') {
                if (isNaN(parseFloat($(txtGvQuan).val()))) {
                    $(txtGvQuan).val('0.00');
                }
            }

            if (!jQuery.trim($(txtGvPrice).val()) == '') {
                if (isNaN(parseFloat($(txtGvPrice).val()))) {
                    $(txtGvPrice).val('');
                }
            }

            if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                    valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                    $(txtGvAmount).val(valAmount.toFixed(2));
                    //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                    var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                    $(txtGvPrice).val(valPrice.toFixed(2));
                    //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            }





            //if (isGst == 1) {
            //    if (gtax == null) {
            //        gtaxAmt = 0.00;
            //        gtaxAmtGL = 0;
            //        $(lblGstTax).val(gtaxAmt.toFixed(2));

            //        $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
            //        $(hdnGSTTaxGL).val(gtaxAmtGL);
            //    }
            //    else if (gtax.value != '') {
            //        if (checkbox.checked == true) {
            //            gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
            //            $(lblGstTax).val(gtaxAmt.toFixed(2));
            //            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
            //            gtaxAmtGL = parseInt(gtaxGL.value);
            //            $(hdnGSTTaxGL).val(gtaxAmtGL.value);
            //        }
            //        else {
            //            gtaxAmt = 0.00;
            //            gtaxAmtGL = 0;
            //        }
            //        $(lblGstTax).val(gtaxAmt.toFixed(2));

            //        $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
            //        $(hdnGSTTaxGL).val(gtaxAmtGL);

            //    }

            //}

            if (checkbox.checked == true) {
                if (parseInt(staxType.value) == 0 || parseInt(staxType.value) == 2) {
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.value);

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.value);
                    }
                }
                else if (parseInt(staxType.value) == 1) {
                    var oldvalAmount = valAmount;
                    //if (isGst == 1) {
                    valAmount = parseFloat(valAmount) + gtaxAmt;

                    //}


                    // if (parseFloat(gtaxAmt) > 0) {

                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;
                    }
                    // }
                    //else {
                    //noty({
                    //    text: 'Please This is a compound tax. Please select GST tax.',
                    //    type: 'warning',
                    //    layout: 'topCenter',
                    //    closeOnSelfClick: false,
                    //    timeout: 1500,
                    //    theme: 'noty_theme_default',
                    //    closable: true
                    //});
                    //$(hdnchkTaxable).val('0');
                    //checkbox.checked = false;
                    //staxAmt = 0.00;
                    //staxAmtGL = 0;
                    //}
                }




            } else {
                staxAmt = 0.00;
                staxAmtGL = 0;
            }
            if (isNaN(staxAmt)) {

                staxAmt = 0.00;
            }
            if (isNaN(gtaxAmt)) {

                gtaxAmt = 0.00;
            }
            if (isNaN(valAmount)) {

                valAmount = 0.00;
            }


            //$(lblSalesTax).val(staxAmt.toFixed(2));
            $(hdnSTaxAm).val(staxAmt.toFixed(2));
            $(txtGvStaxAmount).val(staxAmt.toFixed(2));

            $(hdnSTaxGL).val(staxAmtGL);



            totamt = valAmount + staxAmt;
            if (isGst == 1) {
                totamt = totamt + gtaxAmt;
            }
            $(lblAmountWithTax).text(totamt.toFixed(2));
            //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
            $(hdnAmountWithTax).val(totamt.toFixed(2));
        }

        //CalculateTotalAmtSST();
        CalculateTotalAmt();
    }

    function CalTotalValGtax(checkbox) {

        var cb = checkbox.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");
        //if (parseFloat(stax.value.toString().replace(/[\$\(\),]/g, '')) <= 0) {

        //    noty({
        //        text: 'Please Set the Provincial Tax at vendor level',
        //        type: 'warning',
        //        layout: 'topCenter',
        //        closeOnSelfClick: false,
        //        timeout: 1500,
        //        theme: 'noty_theme_default',
        //        closable: true
        //    });
        //    $(hdnchkTaxable).val('0');
        //    checkbox.checked = false;

        //}
        //else {


        var staxGL = $("#hdnQSTGL");
        var gtaxGL = $("#hdnGSTGL");

        var staxType = $("#hdnSTaxType");

        var txtGvQuan;
        var txtGvPrice;
        var txtGvAmount;
        var lblSalesTax;
        var lblGstTax;
        var hdnGSTTaxAm;
        var hdnSTaxAm;
        var txtGvStaxAmount;
        var lblAmountWithTax;
        var valAmount;
        var hdnchkTaxable;
        var hdnSTaxGL;
        var hdnGSTTaxGL;
        var isGst = 0;
        var totamt = 0;
        var staxAmt = 0;
        var gtaxAmt = 0;
        var staxAmtGL = 0;
        var gtaxAmtGL = 0;

        txtGvPrice = $(cb.replace('chkGTaxable', 'txtGvPrice'));
        txtGvQuan = $(cb.replace('chkGTaxable', 'txtGvQuan'));
        txtGvAmount = $(cb.replace('chkGTaxable', 'txtGvAmount'));
        //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
        lblGstTax = $(cb.replace('chkGTaxable', 'lblGstTax'));
        lblAmountWithTax = $(cb.replace('chkGTaxable', 'lblAmountWithTax'));
        hdnAmountWithTax = $(cb.replace('chkGTaxable', 'hdnAmountWithTax'));
        hdnchkGTaxable = $(cb.replace('chkGTaxable', 'hdnchkGTaxable'));
        hdnSTaxGL = $(cb.replace('chkGTaxable', 'hdnSTaxGL'));
        hdnGSTTaxGL = $(cb.replace('chkGTaxable', 'hdnGSTTaxGL'));
        hdnSTaxAm = $(cb.replace('chkGTaxable', 'hdnSTaxAm'));
        txtGvStaxAmount = $(cb.replace('chkGTaxable', 'txtGvStaxAmount'));
        hdnGSTTaxAm = $(cb.replace('chkGTaxable', 'hdnGSTTaxAm'));

        hdnchkTaxable = $(cb.replace('chkGTaxable', 'hdnchkTaxable'));


        staxAmt = parseFloat($(hdnSTaxAm).val());

        if (checkbox.checked == true) {
            $(hdnchkGTaxable).val('1');
        } else {
            $(hdnchkGTaxable).val('0');
        }


            isGst = 1;
        //if ($('txtgstgv').style.display == 'block')
        //{
        //    isGst = 1;
        //}
        //else
        //{
        //    isGst = 0;
        //}


        if (!jQuery.trim($(txtGvQuan).val()) == '') {
            if (isNaN(parseFloat($(txtGvQuan).val()))) {
                $(txtGvQuan).val('0.00');
            }
        }

        if (!jQuery.trim($(txtGvPrice).val()) == '') {
            if (isNaN(parseFloat($(txtGvPrice).val()))) {
                $(txtGvPrice).val('');
            }
        }

        if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                $(txtGvAmount).val(valAmount.toFixed(2));
                //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                $(txtGvPrice).val(valPrice.toFixed(2));
                //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        }




        if (checkbox.checked == true) {
            //if (isGst == 1) {
            if (gtax == null) {
                gtaxAmt = 0.00;
                gtaxAmtGL = 0;
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);
            }
            else if (gtax.value != '') {
                if (checkbox.checked == true) {
                    gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                    $(lblGstTax).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    gtaxAmtGL = parseInt(gtaxGL.value);
                    $(hdnGSTTaxGL).val(gtaxAmtGL.value);
                }
                else {
                    gtaxAmt = 0.00;
                    gtaxAmtGL = 0;
                }
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);


                if ($(hdnchkTaxable).val() == '1') {
                    if (parseInt(staxType.value) == 1) {
                        var oldvalAmount = valAmount;
                        if (checkbox.checked == true) {
                            valAmount = parseFloat(valAmount) + gtaxAmt;
                        }
                        if (parseFloat(valAmount) < 0) {

                            staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                            staxAmt = staxAmt * (-1);
                            //staxAmtGL = parseInt(staxGL.value);
                            valAmount = oldvalAmount;

                        } else {
                            staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                            //staxAmtGL = parseInt(staxGL.value);
                            valAmount = oldvalAmount;
                        }
                    }
                }
                else {
                    staxAmt = 0;
                }
                $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
                $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));








            }

        }
        else {
            gtaxAmt = 0.00;
            gtaxAmtGL = 0;
            $(lblGstTax).val(gtaxAmt.toFixed(2));

            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
            $(hdnGSTTaxGL).val(gtaxAmtGL);

            if ($(hdnchkTaxable).val() == '1') {
                if (parseInt(staxType.value) == 1) {
                    var oldvalAmount = valAmount;
                    if (checkbox.checked == true) {
                        valAmount = parseFloat(valAmount) + gtaxAmt;
                    }
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;
                    }
                }
            }
            else {
                staxAmt = 0;
            }

            $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
            $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));
        }

        //if (checkbox.checked == true) {
        //    if (parseInt(staxType.value) == 0 || parseInt(staxType.value) == 2) {
        //        if (parseFloat(valAmount) < 0) {

        //            staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
        //            staxAmt = staxAmt * (-1);
        //            staxAmtGL = parseInt(staxGL.value);

        //        } else {
        //            staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
        //            staxAmtGL = parseInt(staxGL.value);
        //        }
        //    }
        //    else if (parseInt(staxType.value) == 1) {
        //        var oldvalAmount = valAmount;
        //        if (isGst == 1) {
        //            valAmount = parseFloat(valAmount) + gtaxAmt;
        //        }
        //        if (parseFloat(valAmount) < 0) {

        //            staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
        //            staxAmt = staxAmt * (-1);
        //            staxAmtGL = parseInt(staxGL.value);
        //            valAmount = oldvalAmount;

        //        } else {
        //            staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
        //            staxAmtGL = parseInt(staxGL.value);
        //            valAmount = oldvalAmount;
        //        }
        //    }

        debugger;


        //} else {
        //    staxAmt = 0.00;
        //    staxAmtGL = 0;
        //}
        if (isNaN(staxAmt)) {

            staxAmt = 0.00;
        }
        if (isNaN(gtaxAmt)) {

            gtaxAmt = 0.00;
        }
        if (isNaN(valAmount)) {

            valAmount = 0.00;
        }


        //$(lblSalesTax).val(staxAmt.toFixed(2));
        //$(hdnSTaxAm).val(staxAmt.toFixed(2));
        //$(txtGvStaxAmount).val(staxAmt.toFixed(2));

        //$(hdnSTaxGL).val(staxAmtGL);



        totamt = valAmount + staxAmt;
        if (isGst == 1) {
            totamt = totamt + gtaxAmt;
        }
        $(lblAmountWithTax).text(totamt.toFixed(2));
        //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
        $(hdnAmountWithTax).val(totamt.toFixed(2));
        //}

        //CalculateTotalAmtSST();
        CalculateTotalAmt();
    }
    function CalTotalValGtax1(checkbox) {
        //var cb = checkbox.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");

        var staxGL = $("#hdnQSTGL");
        var gtaxGL = $("#hdnGSTGL");
        var staxType = $("#hdnSTaxType");
        var txtGvQuan;
        var txtGvPrice;
        var txtGvAmount;
        var lblSalesTax;
        var lblGstTax;
        var hdnGSTTaxAm;
        var hdnSTaxAm;
        var txtGvStaxAmount;
        var lblAmountWithTax;
        var valAmount;
        var hdnchkTaxable;
        var hdnSTaxGL;
        var hdnGSTTaxGL;
        var isGst = 0;
        var totamt = 0;
        var staxAmt = 0;
        var gtaxAmt = 0;
        var staxAmtGL = 0;
        var gtaxAmtGL = 0;

        txtGvPrice = $(checkbox.replace('chkGTaxable', 'txtGvPrice'));
        txtGvQuan = $(checkbox.replace('chkGTaxable', 'txtGvQuan'));
        txtGvAmount = $(checkbox.replace('chkGTaxable', 'txtGvAmount'));
        //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
        lblGstTax = $(checkbox.replace('chkGTaxable', 'lblGstTax'));
        lblAmountWithTax = $(checkbox.replace('chkGTaxable', 'lblAmountWithTax'));
        hdnAmountWithTax = $(checkbox.replace('chkGTaxable', 'hdnAmountWithTax'));
        hdnchkTaxable = $(checkbox.replace('chkGTaxable', 'hdnchkGTaxable'));
        hdnSTaxGL = $(checkbox.replace('chkGTaxable', 'hdnSTaxGL'));
        hdnGSTTaxGL = $(checkbox.replace('chkGTaxable', 'hdnGSTTaxGL'));
        hdnSTaxAm = $(checkbox.replace('chkGTaxable', 'hdnSTaxAm'));
        txtGvStaxAmount = $(checkbox.replace('chkGTaxable', 'txtGvStaxAmount'));
        hdnGSTTaxAm = $(checkbox.replace('chkGTaxable', 'hdnGSTTaxAm'));

        var cb = $(checkbox);

        staxAmt = parseFloat($(hdnSTaxAm).val());

        if (cb.checked == true) {
            $(hdnchkTaxable).val('1');
        } else {
            $(hdnchkTaxable).val('0');
        }

        isGst = 1;


        if (!jQuery.trim($(txtGvQuan).val()) == '') {
            if (isNaN(parseFloat($(txtGvQuan).val()))) {
                $(txtGvQuan).val('0.00');
            }
        }

        if (!jQuery.trim($(txtGvPrice).val()) == '') {
            if (isNaN(parseFloat($(txtGvPrice).val()))) {
                $(txtGvPrice).val('');
            }
        }

        if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                $(txtGvAmount).val(valAmount.toFixed(2));
                //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                $(txtGvPrice).val(valPrice.toFixed(2));
                //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        }


        if (cb.checked == true) {
            //if (isGst == 1) {
            if (gtax == null) {
                gtaxAmt = 0.00;
                gtaxAmtGL = 0;
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);
            }
            else if (gtax.value != '') {
                if (cb.checked == true) {
                    gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                    $(lblGstTax).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    gtaxAmtGL = parseInt(gtaxGL.value);
                    $(hdnGSTTaxGL).val(gtaxAmtGL.value);
                }
                else {
                    gtaxAmt = 0.00;
                    gtaxAmtGL = 0;
                }
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);



                if (parseInt(staxType.value) == 1) {
                    var oldvalAmount = valAmount;
                    if (isGst == 1) {
                        valAmount = parseFloat(valAmount) + gtaxAmt;
                    }
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;
                    }
                }
                $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
                $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));

            }

        }
        else {
            gtaxAmt = 0.00;
            gtaxAmtGL = 0;
            $(lblGstTax).val(gtaxAmt.toFixed(2));

            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
            $(hdnGSTTaxGL).val(gtaxAmtGL);

            if (parseInt(staxType.value) == 1) {
                var oldvalAmount = valAmount;
                if (isGst == 1) {
                    valAmount = parseFloat(valAmount) + gtaxAmt;
                }
                if (parseFloat(valAmount) < 0) {

                    staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                    staxAmt = staxAmt * (-1);
                    //staxAmtGL = parseInt(staxGL.value);
                    valAmount = oldvalAmount;

                } else {
                    staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                    //staxAmtGL = parseInt(staxGL.value);
                    valAmount = oldvalAmount;
                }
            }


            $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
            $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));
        }



        if (isNaN(staxAmt)) {

            staxAmt = 0.00;
        }
        if (isNaN(gtaxAmt)) {

            gtaxAmt = 0.00;
        }
        if (isNaN(valAmount)) {

            valAmount = 0.00;
        }

        totamt = valAmount + staxAmt;
        if (isGst == 1) {
            totamt = totamt + gtaxAmt;
        }
        $(lblAmountWithTax).text(totamt.toFixed(2));
        $(hdnAmountWithTax).val(totamt.toFixed(2));

        CalculateTotalAmt();
    }
    function CalTotalValStax1(checkbox) {

        //var cb = checkbox.id;
        var cb = $(checkbox);
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");
        if (parseFloat(stax.value.toString().replace(/[\$\(\),]/g, '')) <= 0) {

            noty({
                text: 'Please Set the Provincial Tax at vendor level',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 1500,
                theme: 'noty_theme_default',
                closable: true
            });
            $(hdnchkTaxable).val('0');
            cb.checked = false;

        }
        else {


            var staxGL = $("#hdnQSTGL");
            var gtaxGL = $("#hdnGSTGL");

            var staxType = $("#hdnSTaxType");

            var txtGvQuan;
            var txtGvPrice;
            var txtGvAmount;
            var lblSalesTax;
            var lblGstTax;
            var hdnGSTTaxAm;
            var hdnSTaxAm;
            var txtGvStaxAmount;
            var lblAmountWithTax;
            var valAmount;
            var hdnchkTaxable;
            var hdnSTaxGL;
            var hdnGSTTaxGL;
            var isGst = 0;
            var totamt = 0;
            var staxAmt = 0;
            var gtaxAmt = 0;
            var staxAmtGL = 0;
            var gtaxAmtGL = 0;

            txtGvPrice = $(checkbox.replace('chkTaxable', 'txtGvPrice'));
            txtGvQuan = $(checkbox.replace('chkTaxable', 'txtGvQuan'));
            txtGvAmount = $(checkbox.replace('chkTaxable', 'txtGvAmount'));
            //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
            lblGstTax = $(checkbox.replace('chkTaxable', 'lblGstTax'));
            lblAmountWithTax = $(checkbox.replace('chkTaxable', 'lblAmountWithTax'));
            hdnAmountWithTax = $(checkbox.replace('chkTaxable', 'hdnAmountWithTax'));
            hdnchkTaxable = $(checkbox.replace('chkTaxable', 'hdnchkTaxable'));
            hdnSTaxGL = $(checkbox.replace('chkTaxable', 'hdnSTaxGL'));
            hdnGSTTaxGL = $(checkbox.replace('chkTaxable', 'hdnGSTTaxGL'));
            hdnSTaxAm = $(checkbox.replace('chkTaxable', 'hdnSTaxAm'));
            txtGvStaxAmount = $(checkbox.replace('chkTaxable', 'txtGvStaxAmount'));
            hdnGSTTaxAm = $(checkbox.replace('chkTaxable', 'hdnGSTTaxAm'));

            gtaxAmt = parseFloat($(hdnGSTTaxAm).val());
            gtaxAmt = parseFloat(gtaxAmt) || 0;
            if (cb.checked == true) {
                $(hdnchkTaxable).val('1');
            } else {
                $(hdnchkTaxable).val('0');
            }

            isGst = 1;

            if (!jQuery.trim($(txtGvQuan).val()) == '') {
                if (isNaN(parseFloat($(txtGvQuan).val()))) {
                    $(txtGvQuan).val('0.00');
                }
            }

            if (!jQuery.trim($(txtGvPrice).val()) == '') {
                if (isNaN(parseFloat($(txtGvPrice).val()))) {
                    $(txtGvPrice).val('');
                }
            }

            if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                    valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                    $(txtGvAmount).val(valAmount.toFixed(2));
                    //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                    var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                    $(txtGvPrice).val(valPrice.toFixed(2));
                    //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            }

            if (cb.checked == true) {
                if (parseInt(staxType.value) == 0 || parseInt(staxType.value) == 2) {
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.value);

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.value);
                    }
                }
                else if (parseInt(staxType.value) == 1) {
                    var oldvalAmount = valAmount;
                    //if (isGst == 1) {
                    valAmount = parseFloat(valAmount) + gtaxAmt;

                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;
                    }

                }


            } else {
                staxAmt = 0.00;
                staxAmtGL = 0;
            }
            if (isNaN(staxAmt)) {

                staxAmt = 0.00;
            }
            if (isNaN(gtaxAmt)) {

                gtaxAmt = 0.00;
            }
            if (isNaN(valAmount)) {

                valAmount = 0.00;
            }

            $(hdnSTaxAm).val(staxAmt.toFixed(2));
            $(txtGvStaxAmount).val(staxAmt.toFixed(2));

            $(hdnSTaxGL).val(staxAmtGL);

            totamt = valAmount + staxAmt;
            if (isGst == 1) {
                totamt = totamt + gtaxAmt;
            }
            $(lblAmountWithTax).text(totamt.toFixed(2));
            $(hdnAmountWithTax).val(totamt.toFixed(2));
        }

        CalculateTotalAmt();
    }


    function TotalwithTax(txtGvStaxAmount) {
        debugger;
        var cb = txtGvStaxAmount.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");

        var cbs = $(cb.replace('txtGvStaxAmount', 'chkTaxable'));
        //var ch_id = chk.attr('id');
        //var cbs = $(ch_id);

        var cbg = $(cb.replace('txtGvStaxAmount', 'chkGTaxable'));
        //var ch_idg = chkg.attr('id');
        //var cbg = $(ch_idg);

        if (parseFloat(stax.value.toString().replace(/[\$\(\),]/g, '')) <= 0) {

            noty({
                text: 'Please Set the Provincial Tax at vendor level',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 1500,
                theme: 'noty_theme_default',
                closable: true
            });
            $(hdnchkTaxable).val('0');
            cbs.checked = false;

        }
        else {
            var staxGL = $("#hdnQSTGL");
            var gtaxGL = $("#hdnGSTGL");

            var staxType = $("#hdnSTaxType");

            var txtGvQuan;
            var txtGvPrice;
            var txtGvAmount;
            var lblSalesTax;
            var lblGstTax;
            var hdnGSTTaxAm;
            var hdnSTaxAm;
            var txtGvStaxAmount;
            var lblAmountWithTax;
            var valAmount;
            var hdnchkTaxable;
            var hdnSTaxGL;
            var hdnGSTTaxGL;
            var isGst = 0;
            var totamt = 0;
            var staxAmt = 0;
            var gtaxAmt = 0;
            var staxAmtGL = 0;
            var gtaxAmtGL = 0;

            txtGvPrice = $(cb.replace('txtGvStaxAmount', 'txtGvPrice'));
            txtGvQuan = $(cb.replace('txtGvStaxAmount', 'txtGvQuan'));
            txtGvAmount = $(cb.replace('txtGvStaxAmount', 'txtGvAmount'));
            //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
            lblGstTax = $(cb.replace('txtGvStaxAmount', 'lblGstTax'));
            lblAmountWithTax = $(cb.replace('txtGvStaxAmount', 'lblAmountWithTax'));
            hdnAmountWithTax = $(cb.replace('txtGvStaxAmount', 'hdnAmountWithTax'));
            hdnchkTaxable = $(cb.replace('txtGvStaxAmount', 'hdnchkTaxable'));
            hdnSTaxGL = $(cb.replace('txtGvStaxAmount', 'hdnSTaxGL'));
            hdnGSTTaxGL = $(cb.replace('txtGvStaxAmount', 'hdnGSTTaxGL'));
            hdnSTaxAm = $(cb.replace('txtGvStaxAmount', 'hdnSTaxAm'));
            txtGvStaxAmount = $(cb.replace('txtGvStaxAmount', 'txtGvStaxAmount'));
            hdnGSTTaxAm = $(cb.replace('txtGvStaxAmount', 'hdnGSTTaxAm'));

            isGst = 1;
            if (!jQuery.trim($(txtGvQuan).val()) == '') {
                if (isNaN(parseFloat($(txtGvQuan).val()))) {
                    $(txtGvQuan).val('0.00');
                }
            }

            if (!jQuery.trim($(txtGvPrice).val()) == '') {
                if (isNaN(parseFloat($(txtGvPrice).val()))) {
                    $(txtGvPrice).val('');
                }
            }

            if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                    valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                    $(txtGvAmount).val(valAmount.toFixed(2));
                    //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                    var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                    $(txtGvPrice).val(valPrice.toFixed(2));
                    //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            }

            gtaxAmt = parseFloat($(hdnGSTTaxAm).val());
            //gtaxAmtGL = parseInt(gtaxGL.value);
            gtaxAmt = parseFloat(gtaxAmt) || 0;
            if (gtax == null) {
                gtaxAmt = 0.00;
                gtaxAmtGL = 0;
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);
            }
            else if (gtax.value != '') {
                if (cbg.checked == true) {

                    $(lblGstTax).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxGL).val(gtaxAmtGL.value);
                }
                else {
                    gtaxAmt = 0.00;
                    gtaxAmtGL = 0;
                }
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);

            }






            if (cbs.checked == true) {
                staxAmt = parseFloat($(txtGvStaxAmount).val());
                staxAmtGL = parseInt(staxGL.value);


            } else {
                staxAmt = 0.00;
                staxAmtGL = 0;
            }
            if (isNaN(staxAmt)) {

                staxAmt = 0.00;
            }
            if (isNaN(gtaxAmt)) {

                gtaxAmt = 0.00;
            }
            if (isNaN(valAmount)) {

                valAmount = 0.00;
            }


            //$(lblSalesTax).val(staxAmt.toFixed(2));
            $(hdnSTaxAm).val(staxAmt.toFixed(2));
            $(txtGvStaxAmount).val(staxAmt.toFixed(2));

            $(hdnSTaxGL).val(staxAmtGL);



            totamt = valAmount + staxAmt;
            if (isGst == 1) {
                totamt = totamt + gtaxAmt;
            }
            $(lblAmountWithTax).text(totamt.toFixed(2));
            //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
            $(hdnAmountWithTax).val(totamt.toFixed(2));


            CalculateTotalAmt();




        }
    }
    function CalTotalVal(obj) {

        var txt = obj.id;

        var txtGvQuan;
        var txtGvPrice;
        var txtGvAmount;
        var lblAmountWithTax;
        var hdnAmountWithTax;
        var hdnchkTaxable;
        var chkTaxable;

        var lblSalesTax;
        var hdnSTaxAm;
        var lblGstTax;
        var hdnGSTTaxAm;

        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");

        if (txt.indexOf("Quan") >= 0) {
            txtGvQuan = $(txt);
            txtGvPrice = $(txt.replace('txtGvQuan', 'txtGvPrice'));
            txtGvAmount = $(txt.replace('txtGvQuan', 'txtGvAmount'));
            lblAmountWithTax = $(txt.replace('txtGvQuan', 'lblAmountWithTax'));
            hdnAmountWithTax = $(txt.replace('txtGvQuan', 'hdnAmountWithTax'));
            hdnchkTaxable = $(txt.replace('txtGvQuan', 'hdnchkTaxable'));
            chkTaxable = $(txt.replace('txtGvQuan', 'chkTaxable'));

            lblSalesTax = $(txt.replace('txtGvQuan', 'lblSalesTax'));
            hdnSTaxAm = $(txt.replace('txtGvQuan', 'hdnSTaxAm'));
            lblGstTax = $(txt.replace('txtGvQuan', 'lblGstTax'));
            hdnGSTTaxAm = $(txt.replace('txtGvQuan', 'hdnGSTTaxAm'));
        }
        else if (txt.indexOf("Price") >= 0) {
            txtGvPrice = $(txt);
            txtGvQuan = $(txt.replace('txtGvPrice', 'txtGvQuan'));
            txtGvAmount = $(txt.replace('txtGvPrice', 'txtGvAmount'));
            lblAmountWithTax = $(txt.replace('txtGvPrice', 'lblAmountWithTax'));
            hdnAmountWithTax = $(txt.replace('txtGvPrice', 'hdnAmountWithTax'));
            hdnchkTaxable = $(txt.replace('txtGvPrice', 'hdnchkTaxable'));
            chkTaxable = $(txt.replace('txtGvPrice', 'chkTaxable'));

            lblSalesTax = $(txt.replace('txtGvPrice', 'lblSalesTax'));
            hdnSTaxAm = $(txt.replace('txtGvPrice', 'hdnSTaxAm'));
            lblGstTax = $(txt.replace('txtGvPrice', 'lblGstTax'));
            hdnGSTTaxAm = $(txt.replace('txtGvPrice', 'hdnGSTTaxAm'));
        }
        else if (txt.indexOf("Amount") >= 0) {
            txtGvPrice = $(txt.replace('txtGvAmount', 'txtGvPrice'));
            txtGvQuan = $(txt.replace('txtGvAmount', 'txtGvQuan'));
            lblAmountWithTax = $(txt.replace('txtGvAmount', 'lblAmountWithTax'));
            hdnAmountWithTax = $(txt.replace('txtGvAmount', 'hdnAmountWithTax'));
            txtGvAmount = $(txt);
            hdnchkTaxable = $(txt.replace('txtGvAmount', 'hdnchkTaxable'));
            chkTaxable = $(txt.replace('txtGvAmount', 'chkTaxable'));

            lblSalesTax = $(txt.replace('txtGvAmount', 'lblSalesTax'));
            hdnSTaxAm = $(txt.replace('txtGvAmount', 'hdnSTaxAm'));
            lblGstTax = $(txt.replace('txtGvAmount', 'lblGstTax'));
            hdnGSTTaxAm = $(txt.replace('txtGvAmount', 'hdnGSTTaxAm'));
        }
        //else if (txt.indexOf("AmountTot") >= 0) {
        //    txtGvPrice = $(txt.replace('lblAmountWithTax', 'txtGvPrice'));
        //    txtGvQuan = $(txt.replace('lblAmountWithTax', 'txtGvQuan'));
        //    txtGvAmount = $(txt.replace('lblAmountWithTax', 'txtGvAmount'));
        //    lblAmountWithTax = $(txt);
        //}


        if (!jQuery.trim($(txtGvQuan).val()) == '') {
            if (isNaN(parseFloat($(txtGvQuan).val()))) {
                $(txtGvQuan).val('0.00');
            }
        }

        if (!jQuery.trim($(txtGvPrice).val()) == '') {
            if (isNaN(parseFloat($(txtGvPrice).val()))) {
                $(txtGvPrice).val('');
            }
        }

        if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                var valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                $(txtGvAmount).val(valAmount.toFixed(2));
                $(lblAmountWithTax).text(valAmount.toFixed(2));
                $(hdnAmountWithTax).val(valAmount.toFixed(2));

                //$(hdnchkTaxable).val("0");
                //chkTaxable.checked = false;

                //$(lblSalesTax).val("0.00");
                //$(lblGstTax).val("0.00");
                //$(hdnSTaxAm).val("0.00");
                //$(hdnGSTTaxAm).val("0.00");

                if ($(hdnchkTaxable).val() == "0") {
                    $(hdnchkTaxable).val("0");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked',false);
                    }

                    $(lblSalesTax).val("0.00");
                    $(lblGstTax).val("0.00");
                    $(hdnSTaxAm).val("0.00");
                    $(hdnGSTTaxAm).val("0.00");
                    //CalTotalValStax(chkTaxable);
                }
                else {
                    $(hdnchkTaxable).val("1");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked',true);
                        CalTotalValStax(chkTaxable);
                    }

                }

                //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                $(txtGvPrice).val(valPrice.toFixed(2));
                $(lblAmountWithTax).text($(txtGvAmount).val());
                $(hdnAmountWithTax).val($(txtGvAmount).val());

                //$(hdnchkTaxable).val("0");
                //chkTaxable.checked = false;

                //$(lblSalesTax).val("0.00");
                //$(lblGstTax).val("0.00");
                //$(hdnSTaxAm).val("0.00");
                //$(hdnGSTTaxAm).val("0.00");

                if ($(hdnchkTaxable).val() == "0") {
                    $(hdnchkTaxable).val("0");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked',false);
                    }

                    $(lblSalesTax).val("0.00");
                    $(lblGstTax).val("0.00");
                    $(hdnSTaxAm).val("0.00");
                    $(hdnGSTTaxAm).val("0.00");
                    //CalTotalValStax(chkTaxable);
                }
                else {
                    $(hdnchkTaxable).val("1");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked',true);
                        CalTotalValStax(chkTaxable);
                    }

                }

                //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        }
        //CalTotalValStax(chkTaxable);
        CalculateTotalAmt();

        if (!isNaN(parseFloat($(obj.id).value))) {
            $(obj.id).value = parseFloat($(obj.id).value).toFixed(2);
        }
    }
    function showfreq() {
        if ($("#chkIsRecurr").is(':checked')) {
            displayapplycredit("0");
            $('dvfreq').style.display = 'block';
            var bqs = GetParameterValues('bill');
            var vqs = GetParameterValues('vid');
            var rqs = GetParameterValues('ref');
            if (bqs == 'c' && vqs == null && rqs == null) {
                $("#adEditPayment").css('display','none');

                    var tAmount = 0.00;
                if ($find("#RadGrid_gvJobCostItems") != null) {
                    var masterTable = $find("#RadGrid_gvJobCostItems").get_masterTableView();
                    var count = masterTable.get_dataItems().length;
                    var item;
                    for (var i = 0; i < count; i++) {
                        item = masterTable.get_dataItems()[i];
                        var Qty = item.findElement("txtGvQuan");
                        var Amount = item.findElement("txtGvAmount");
                        var Price = item.findElement("txtGvPrice");
                        var QtyVal = $(Qty).val();
                        var AmountVal = $(Amount).val();
                        if (QtyVal != "" && AmountVal != "") {
                            if (!isNaN(parseFloat(QtyVal)) && !isNaN(parseFloat(AmountVal)) && parseFloat(QtyVal) != 0) {
                                var QtyPrice = parseFloat(AmountVal) / parseFloat(QtyVal);
                                tAmount = tAmount + parseFloat(AmountVal);
                            }
                        }
                    }
                }
                $("#lblTotalAmount").text(parseFloat(tAmount).toFixed(2));
                $("#lblTotalAmount11").text(parseFloat(tAmount).toFixed(2));
                $("#lblTotalAmount11").html(cleanUpCurrency("$" + parseFloat(parseFloat(tAmount)).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                $('[id*=lblTotalAmt]').text(parseFloat(tAmount).toFixed(2));

                var _currencyInWord = inWords(parseFloat(Math.trunc(parseFloat(tAmount))));
                var d = parseFloat(tAmount) - Math.trunc(parseFloat(tAmount));
                if (d > 0) {
                    d = Math.round(d * 100);
                    _currencyInWord = _currencyInWord + " And " + d + " / 100";
                }
                _currencyInWord = "*** " + _currencyInWord + "****************";
                $("#lblDollar").html(_currencyInWord);
                    $("#hdnTPay").val(parseFloat(tAmount).toString());

            }
        } else {
            $('dvfreq').css('display','none');
            $("#adEditPayment").css('display','block');
            CalculateTotalAmt();


        }
    }
    function CallSelectedIndexChanged() {
        __doPostBack("<% ddlVendor.UniqueID %>", "");
    }
    function quickcheckvalid() {
        var rtvalue = false;
        var v = $("#rfvbillref");
        var v1 = $("#rfvMemo1");
        ValidatorValidate(v);
        ValidatorValidate(v1);
        if (v.isvalid && v1.isvalid)
            rtvalue = true;
        else
            rtvalue = false;
        return rtvalue;

    }
    function showbillgl() {
        $("#liaccrdGlAccount").show();
    }
    function checkvalidation() {
        var bqs = GetParameterValues('bill');
        var vqs = GetParameterValues('vid');
        var rqs = GetParameterValues('ref');
        if (bqs == 'c') {
            if (vqs == null) {
                ValidatorEnable($("#rfvtxtvendor")[0], true);
                ValidatorEnable($("#cvDiscGLs")[0], true);
                ValidatorEnable($("#cvDiscGL")[0], false);
                var tAmount = 0.00;


                if ($find("#RadGrid_gvJobCostItems") != null) {
                    var masterTable = $find("#RadGrid_gvJobCostItems").get_masterTableView();
                    var count = masterTable.get_dataItems().length;
                    var item;
                    for (var i = 0; i < count; i++) {
                        item = masterTable.get_dataItems()[i];
                        var Qty = item.findElement("txtGvQuan");
                        var Amount = item.findElement("txtGvAmount");
                        var Price = item.findElement("txtGvPrice");
                        var QtyVal = $(Qty).val();
                        var AmountVal = $(Amount).val();
                        if (QtyVal != "" && AmountVal != "") {
                            if (!isNaN(parseFloat(QtyVal)) && !isNaN(parseFloat(AmountVal)) && parseFloat(QtyVal) != 0) {
                                var QtyPrice = parseFloat(AmountVal) / parseFloat(QtyVal);
                                tAmount = tAmount + parseFloat(AmountVal);
                            }
                        }
                    }
                }

                var tAmt = parseFloat($("#lblTotalAmount11").text().replace(/[\$\(\),]/g, ''));


                if (parseFloat(tAmt) > 0) {
                    ValidatorEnable($("#rfvbillref")[0], true);
                    ValidatorEnable($("#rfvMemo1")[0], true);


                }
                else {
                    ValidatorEnable($("#rfvbillref")[0], false);
                    ValidatorEnable($("#rfvMemo1")[0], false);


                }
                if (quickcheckvalid() == true && parseFloat(tAmt) > 0) {
                    $("#liaccrdGlAccount").hide();
                }
                else {
                    return;
                }
                }
            else {
                ValidatorEnable($("#rfvtxtvendor")[0], false);
                ValidatorEnable($("#cvDiscGLs")[0], false);
                ValidatorEnable($("#cvDiscGL")[0], true);
            }

        }
        else {

            ValidatorEnable($("#rfvtxtvendor")[0], false);
            ValidatorEnable($("#rfvbillref")[0], false);
            ValidatorEnable($("#rfvMemo1")[0], false);
            ValidatorEnable($("#cvDiscGLs")[0], false);
            ValidatorEnable($("#cvDiscGL")[0], true);

            $("#liaccrdGlAccount").hide();
            }
    }

    function checkvalidationsave() {


        ValidatorEnable($("#cvDiscGL")[0], true);
        ValidatorEnable($("#rfvBank")[0], true);
        ValidatorEnable($("#rfvPayment")[0], true);
        ValidatorEnable($("#rfvNextCheck")[0], true);
        ValidatorEnable($("#rfvDate")[0], true);
        ValidatorEnable($("#revDate")[0], true);

    }


    function Chkbillmemo(s, args) {
        var bill = GetParameterValues('bill');
        if (bill == "c") {
            var tAmount = 0.00;
            var masterTable = $find("#RadGrid_gvJobCostItems").get_masterTableView();
            var count = masterTable.get_dataItems().length;
            var item;
            for (var i = 0; i < count; i++) {
                item = masterTable.get_dataItems()[i];
                var Qty = item.findElement("txtGvQuan");
                var Amount = item.findElement("txtGvAmount");
                var Price = item.findElement("txtGvPrice");
                var QtyVal = $(Qty).val();
                var AmountVal = $(Amount).val();
                if (QtyVal != "" && AmountVal != "") {
                    if (!isNaN(parseFloat(QtyVal)) && !isNaN(parseFloat(AmountVal)) && parseFloat(QtyVal) != 0) {
                        var QtyPrice = parseFloat(AmountVal) / parseFloat(QtyVal);
                        tAmount = tAmount + parseFloat(AmountVal);
                    }
                }
            }
            if (parseFloat(tAmount) > 0) {
                args.IsValid = args.Value != '';
            }
            else {
                args.IsValid = true;
            }


        }
        else {
            args.IsValid = true;
        }
    }
    function Chkbillref(s, args) {
        var bill = GetParameterValues('bill');
        if (bill == "c") {
            var tAmount = 0.00;
            var masterTable = $find("#RadGrid_gvJobCostItems").get_masterTableView();
            var count = masterTable.get_dataItems().length;
            var item;
            for (var i = 0; i < count; i++) {
                item = masterTable.get_dataItems()[i];
                var Qty = item.findElement("txtGvQuan");
                var Amount = item.findElement("txtGvAmount");
                var Price = item.findElement("txtGvPrice");
                var QtyVal = $(Qty).val();
                var AmountVal = $(Amount).val();
                if (QtyVal != "" && AmountVal != "") {
                    if (!isNaN(parseFloat(QtyVal)) && !isNaN(parseFloat(AmountVal)) && parseFloat(QtyVal) != 0) {
                        var QtyPrice = parseFloat(AmountVal) / parseFloat(QtyVal);
                        tAmount = tAmount + parseFloat(AmountVal);
                    }
                }
            }
            if (parseFloat(tAmount) > 0) {
                args.IsValid = args.Value != '';
            }
            else {
                args.IsValid = true;
            }

        }
        else {
            args.IsValid = true;
        }
    }
</script>*@ 