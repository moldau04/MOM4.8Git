
@{
    ViewData["Title"] = " List Page";
    Layout = "~/Views/Shared/MOMLayout.cshtml";
}


<!--Grid Control-->
<link href="~/MOMUI/Design/css/grid.css" rel="stylesheet" />

<style type="text/css">

    @@media screen and (max-width: 2048px) {

        .rgDataDiv {
            height: 50vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 2304px) {

        .rgDataDiv {
            height: 52vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 1920px) {

        .rgDataDiv {
            height: 47vh !important;
        }
    }

    @@media screen and (max-width: 1706px) {

        .rgDataDiv {
            height: 42vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 1688px) {

        .rgDataDiv {
            height: 42vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 1366px) {

        .rgDataDiv {
            height: 30vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }
</style>

<div class="divbutton-container">
    <div id="divButtons">
        <div id="breadcrumbs-wrapper">
            <header>
                <div class="container row-color-grey">
                    <div class="row">
                        <div class="col s12 m12 l12">
                            <div class="row">
                                <div class="col s12 m12 l12">
                                    <div class="row">
                                        <div class="page-title"><i class="mdi-communication-contacts"></i>&nbsp;Manage Checks</div>
                                        <div class="buttonContainer">
                                            <div class="btnlinks">
                                                <a ID="lnkWriteCheck" href="@Url.Action("Index","WriteChecks")">Add</a>
                                            </div>
                                            <div class="btnlinks">
                                                <a ID="lnkEditCheck">Edit</a>
                                            </div>
                                            <div class="btnlinks menuAction">
                                                <a onclick="DropdownMenu()" class="dropbtn" style="cursor: pointer;">
                                                    Actions
                                                </a>
                                            </div>
                                            <div class="btnlinks">
                                                <a ID="lnkVoidCheck" Style="cursor: pointer;" onclick="OpenVoidPopupEdit('void');">Void</a>
                                            </div>
                                            <ul id="drpMenu" class="nomgn hideMenu menuList">
                                                <li>
                                                    <div class="btnlinks">
                                                        @Html.Hidden("hdnCDID")
                                                        @Html.Hidden("hdnCD")
                                                        @Html.Hidden("hdnBankID1")
                                                        
                                                    </div>
                                                </li>
                                            </ul>
                                            <div class="btnlinks">
                                                <a ID="lnkDeleteCheck" onclick="return OpenVoidPopupEdit('delete');">Delete</a>
                                            </div>

                                            <div class="btnlinks">
                                                <a ID="btnExcel">Export to Excel</a>
                                            </div>
                                            <div class="btnlinks">
                                                <a ID="lnkPrint">Print</a>
                                            </div>
                                            <div class="btnlinks" style="display:block;">
                                                <a ID="lnkEditCheckNum" Style="cursor: pointer;" onclick="OpenVoidPopupEdit('edit');">Edit Check</a>
                                            </div>
                                            <div class="btnlinks">
                                                <a ID="btnReprintRange" onclick="OpenReprintCheckRangeModal();return false">
                                                    Reprint Check
                                                </a>
                                            </div>
                                            <div class="btnlinks">
                                                <a ID="btnchecknobill">
                                                    Quick Check
                                                </a>
                                            </div>
                                            <div class="btnlinks">
                                               <a ID="lnkProcess" ForeColor="Red" onclick="return CheckProcess();"> Process</a>
                                            </div>
                                            <div class="rght-content">
                                                <div class="btnclosewrap">
                                                    <a ID="lnkClose"><i class="mdi-content-clear"></i></a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
        </div>
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="srchpane">
            <div class="srchpaneinner">
                <div class="srchtitle srchtitlecustomwidth" style="padding-left: 15px;">
                    Date
                </div>
                <div class="srchinputwrap">
                    <input type="text" ID="txtFromDate" class="datepicker_mom" MaxLength="28" style="Width:100px"/>
                </div>
                <div class="srchinputwrap">
                    <input type="text" ID="txtToDate" class="datepicker_mom" MaxLength="28" style="Width:100px"/>
                </div>
                <div class="srchinputwrap tabcontainer">
                    <ul class="tabselect accrd-tabselect" id="testradiobutton">
                        <li>
                            <a AutoPostBack="False" ID="decDate" onclick="dec_date('dec','ctl00_ContentPlaceHolder1_txtToDate','ctl00_ContentPlaceHolder1_txtFromDate','rdCal');return false;"><i class='mdi-hardware-keyboard-arrow-left'></i></a>
                        </li>
                        <li>
                            <label id="lblDay">
                                <input type="radio" id="rdDay" name="rdCal" value="rdDay" onclick="SelectDate('Day', 'ctl00_ContentPlaceHolder1_txtFromDate', 'ctl00_ContentPlaceHolder1_txtToDate', '#lblDay', 'hdnChecksDate', 'rdCal')" />
                                Day
                            </label>
                        </li>
                        <li>
                            <label id="lblWeek">
                                <input type="radio" id="rdWeek" name="rdCal" value="rdWeek" onclick="SelectDate('Week', 'ctl00_ContentPlaceHolder1_txtFromDate', 'ctl00_ContentPlaceHolder1_txtToDate', '#ctl00_ContentPlaceHolder1_lblWeek', 'hdnChecksDate', 'rdCal')" />
                                Week
                            </label>
                        </li>
                        <li>
                            <label id="lblMonth">
                                <input type="radio" id="rdMonth" name="rdCal" value="rdMonth" onclick="SelectDate('Month', 'ctl00_ContentPlaceHolder1_txtFromDate', 'ctl00_ContentPlaceHolder1_txtToDate', '#ctl00_ContentPlaceHolder1_lblMonth', 'hdnChecksDate', 'rdCal')" />
                                Month
                            </label>
                        </li>
                        <li>
                            <label id="lblQuarter">
                                <input type="radio" id="rdQuarter" name="rdCal" value="rdQuarter" onclick="SelectDate('Quarter', 'ctl00_ContentPlaceHolder1_txtFromDate', 'ctl00_ContentPlaceHolder1_txtToDate', '#ctl00_ContentPlaceHolder1_lblQuarter', 'hdnChecksDate', 'rdCal')" />
                                Quarter
                            </label>
                        </li>
                        <li>
                            <label id="lblYear">
                                <input type="radio" id="rdYear" name="rdCal" value="rdYear" onclick="SelectDate('Year', 'ctl00_ContentPlaceHolder1_txtFromDate', 'ctl00_ContentPlaceHolder1_txtToDate', '#ctl00_ContentPlaceHolder1_lblYear', 'hdnChecksDate', 'rdCal')" />
                                Year
                            </label>
                        </li>
                        <li>
                            <a ID="incDate" onclick="dec_date('inc','ctl00_ContentPlaceHolder1_txtToDate','ctl00_ContentPlaceHolder1_txtFromDate','rdCal');return false"><i class='mdi-hardware-keyboard-arrow-right'></i></a>
                        </li>
                    </ul>
                </div>
                <div class="srchinputwrap rdleftmgn">
                    <div class="rdpairing">
                        <div UpdateMode="Conditional" ID="udpRdo">
                            <div>
                                <div class="rd-flt">
                                    @*<asp:RadioButton ID="rdocheck" class="with-gap rdoJournal" Text=" Checks" GroupName="JE" AutoPostBack="true" OnCheckedChanged="rdocheck_CheckedChanged" />
                                </div>
                                <div class="rd-flt">
                                    <asp:RadioButton ID="rdoRecurring" class="with-gap" Text=" Recurring Checks" GroupName="JE" AutoPostBack="true" OnCheckedChanged="rdoRecurring_CheckedChanged" />*@
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="col lblsz2 lblszfloat">
                    <div class="row">
                        <span class="tro trost">
                            <a ID="lnkClear">Clear </a>
                        </span>
                        <span class="tro trost">
                            <a ID="lnkShowAll">Show All </a>
                        </span>
                        <span class="tro trost">
                           <label ID="lblRecordCount" style="font-size:0.9rem">0 Record(s) found.</label>
                        </span>
                    </div>
                </div>
            </div>
            <div ID="upPannelSearch" UpdateMode="Conditional">
                <div>
                    <div class="srchpaneinner">
                        <div class="srchtitle srchtitlecustomwidth" style="padding-left: 15px;">
                            Search
                        </div>
                        <div class="srchinputwrap">
                            <select ID="ddlSearch" class="browser-default selectst selectsml" AutoPostBack="True">
                                <option>Select</option>
                            </select>
                        </div>
                        <div class="srchinputwrap">
                            <select ID="ddlStatus" class="browser-default selectst" Visible="false">
                                <option>Select</option>
                            </select>
                        </div>
                        <div class="srchinputwrap">
                            <input type="text" ID="txtSearch" class="srchcstm" />
                        </div>
                        <div class="srchinputwrap">
                            <select ID="ddlPaytype" class="browser-default selectst" Visible="false">
                                <option>Select</option>
                            </select>
                        </div>
                        <div class="srchinputwrap btnlinksicon srchclr">
                            <a ID="lnkSearch">
                                <i class="mdi-action-search"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid_container">
            <div class="form-section-row" style="margin-bottom: 0 !important;">
                <div class="RadGrid RadGrid_Material">
                    
                </div>
            </div>
        </div>
    </div>
</div>
@Html.Hidden("hdnChecksSelectDtRange","")
@Html.Hidden("hdnCssActive","1")


<script type="text/javascript">


    function OpenVoidPopupEdit(txtMsg) {

        var grid = $find("#RadGrid_Checks");
        var MasterTable = grid.get_masterTableView();
        var selectedRows = MasterTable.get_selectedItems();
        var ID = "";
        for (var i = 0; i < selectedRows.length; i++) {
            var row = selectedRows[i];
            ID = MasterTable.getCellByColumnUniqueName(row, "lblIndexID").innerHTML;
            ID = $(ID).html();
        }

        if (ID != "") {
            $.ajax({
                type: "POST",
                //url: "ManageChecks.aspx/VoidCheckEdit",
                url: "AccountAutoFill.asmx/VoidCheckEdit",
                data: '{lblIndex: "' + ID + '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {

                    var obj = JSON.parse(response.d);
                    //alert($.parseJSON(response.d.ID));
                    if (txtMsg == 'delete') { validateOpenVoid(txtMsg, obj[0]["Sel"], obj[0]["Ref"]) }
                    else if (obj[0]["Sel"] > 0) { validateOpenVoid(txtMsg, obj[0]["Sel"], obj[0]["Ref"]) }
                    else {

                        var wnd = $find("#VoidCheckWindow");
                        $("#hdnCDID").val(obj[0]["ID"]);

                        if (txtMsg == 'void') {
                            $("#dvVoid").show();
                            $("#lnkSave").show();
                            $("#lbtnCheckSave").hide();
                            $("#dvEditCheck").hide();
                            $("#txtVoidDate").val(obj[0]["VoidDate"]);
                            wnd.set_title("Void Check");
                        }
                        else {
                            $("#dvVoid").hide();
                            $("#dvEditCheck").show();
                            $("#lnkSave").hide();
                            $("#lbtnCheckSave").show();
                            $("#hdnCD").val(obj[0]["ID"]);
                            $("#hdnBankID1").val(obj[0]["Bank"]);
                            $("#txtCheckNo").val(obj[0]["Ref"]);
                            wnd.set_title("Edit Check #");
                        }
                        window.radopen(null, "VoidCheckWindow");
                        Materialize.updateTextFields();
                    }
                },
                failure: function (response) {
                    alert(response.d);
                }
            });
        }
        else {
            selectCheckWarning(txtMsg);
        }
    }
    function CheckProcess() {
        var result = false;
        $("#RadGrid_Checks tr").each(function () {
            var checkBox = $(this).find("input[type='checkbox']");
            if (checkBox.is(":checked")) {
                result = true;
            }
        });

        if (result == true) {
            return confirm('Are you sure you want to process this adjustment?');
        }
        else {
            alert('Please select a Recurring entry to process.')
            return false;
        }
    }
    function isNumberKey(evt, txt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }
    function dtaa() {
        this.checkno = null;
        this.bank = null;
        this.cdId = null;
    }
    function IsExistCheckNo() {

        var valCheckNo = $("#txtCheckNo").val();
        var valBank = $("#hdnBankID1").val();
        var valCD = $("#hdnCD").val();
        var dtaaa = new dtaa();
        dtaaa.checkno = valCheckNo;
        dtaaa.bank = valBank;
        dtaaa.cdId = valCD;
        debugger;
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "AccountAutoFill.asmx/CheckNumValidOnEdit",
            data: JSON.stringify(dtaaa),
            dataType: "json",
            async: true,
            success: function (data) {
                debugger;
                if (data.d == true) {
                    noty({
                        text: 'Check #' + valCheckNo + ' is already in exists in bank account. Since duplicate check numbers are not allowed, the check generation process cannot continue.',
                        type: 'warning',
                        layout: 'topCenter',
                        closeOnSelfClick: false,
                        timeout: 15000,
                        theme: 'noty_theme_default',
                        closable: true
                    });
                    $("#txtCheckNo").val('');
                }
            },
            failure: function (response) {
                alert(response);
            },
            error: function (result) {
                alert("Due to unexpected errors we were unable to load availability");
            }
        });
    }
    function validateOpenVoid(txtMsg, sel, ref) {
        var result = false;

        $("#RadGrid_Checks").find('tr:not(:first,:last)').each(function () {
            debugger;
            var $tr = $(this);
            $tr.find('input[type="checkbox"]:checked').each(function (index, value) {
                result = true;
            });
        });
        if (sel == "1") {
            noty({
                text: 'This check has cleared the bank and can therefore not be ' + txtMsg + '.',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 5000,
                theme: 'noty_theme_default',
                closable: true
            });
            return false;
        }
        else if (sel == "2") {
            noty({
                text: 'This check is not open and can therefore not be ' + txtMsg + '.',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 5000,
                theme: 'noty_theme_default',
                closable: true
            });
            return false;
        }
        else {
            if (result == true && txtMsg == 'edit') {
                return true;
            }
            else if (result == true && txtMsg != 'edit') {
                return confirm('Are you sure that you want to ' + txtMsg + ' check # ' + ref + '?');
            }
            else {
                noty({
                    text: 'Please select an check to ' + txtMsg + ' check.',
                    type: 'warning',
                    layout: 'topCenter',
                    closeOnSelfClick: false,
                    timeout: 5000,
                    theme: 'noty_theme_default',
                    closable: true
                });
                return false;
            }
        }
    }
    function selectCheckWarning(txtMsg) {
        noty({
            text: 'Please select an check to ' + txtMsg + ' check.',
            type: 'warning',
            layout: 'topCenter',
            closeOnSelfClick: false,
            timeout: 5000,
            theme: 'noty_theme_default',
            closable: true
        });
        return false;
    }
    function closedCheckWarning() {
        noty({
            text: 'This check is not open and can therefore not be deleted.',
            type: 'warning',
            layout: 'topCenter',
            closeOnSelfClick: false,
            timeout: 5000,
            theme: 'noty_theme_default',
            closable: true
        });
    }
    function CssClearLabel() {
        $("#lblDay").removeClass("labelactive");
        $("#lblWeek").removeClass("labelactive");
        $("#lblMonth").removeClass("labelactive");
        $("#lblQuarter").removeClass("labelactive");
        $("#lblYear").removeClass("labelactive");
    }
</script>
<script type="text/javascript">
    $(document).ready(function () {

        $('label input[type=radio]').click(function () {
            $('input[name="' + this.name + '"]').each(function () {
                $(this.parentNode).toggleClass('labelactive', this.checked);
            });
        });
        if (typeof (Storage) !== "undefined") {

            // Retrieve
            var SesVar = '<%= Convert.ToString(Session["lblChecksActive"])%>';
            var val;
            val = localStorage.getItem("hdnChecksDate");
            if (SesVar == '2') {
                $("#lblDay").addClass("");
                $("#lblWeek").addClass("");
                $("#lblMonth").addClass("");
                $("#lblQuarter").addClass("");
                $("#lblYear").addClass("");
            }
            else {
                if (val == 'Day') {
                    $("#lblDay").addClass("labelactive");
                    $("#rdDay").css('checked',true);
                }
                else if (val == 'Week') {

                    $("#lblWeek").addClass("labelactive");
                    $("#rdWeek").css('checked',true);
                }
                else if (val == 'Month') {

                    $("#lblMonth").addClass("labelactive");
                    $("#rdMonth").css('checked',true);
                }
                else if (val == 'Quarter') {

                    $("#lblQuarter").addClass("labelactive");
                    $("#rdQuarter").css('checked',true);
                }
                else if (val == 'Year') {

                    $("#lblYear").addClass("labelactive");
                    $("#rdYear").css('checked',true);
                }
                else {
                    $("#lblMonth").addClass("labelactive");
                    $("#rdMonth").css('checked',true);
                }
            }
        }
    });
</script>
<script type="text/javascript">
    function dec_date(select, txtDateTo, txtDateFrom, rdGroup) {
        var select = select;
        var txtDateTo = txtDateTo;
        var txtDateFrom = txtDateFrom;
        var rdGroup = rdGroup;
        var xday;
        var xWeek;
        var xMonth;
        var xYear;
        var xQuarter;
        if (select == "dec") {
            xday = -1;
            xWeek = -7;
            xMonth = -1;
            xQuarter = -3;
            xYear = -1;
        }
        if (select == "inc") {

            xday = 1;
            xWeek = 7;
            xMonth = 1;
            xQuarter = 3;
            xYear = 1;
        }
        var radio = document.getElementsByName(rdGroup); //Client ID of the RadioButtonList1
        var selected;
        for (var i = 0; i < radio.length; i++) {
            if (radio[i].checked) { // Checked property to check radio Button check or not
                //alert("Radio button having value " + radio[i].value + " was checked."); // Show the checked value
                selected = radio[i].value;

            }
            if (selected == "") {
                selected = 'rdWeek';
            }
        }
        if (selected == 'rdDay') {

            //dec the from date
            var tt = $(txtDateFrom).val();

            var date = new Date(tt);
            var newdate = new Date(date);

            newdate.setDate(newdate.getDate() + xday);

            var dd = newdate.getDate();
            var mm = newdate.getMonth() + 1;
            var y = newdate.getFullYear();

            var someFormattedDate = mm + '/' + dd + '/' + y;
            $(txtDateFrom).val(someFormattedDate);
            //dec the to date

            var TT = $(txtDateTo).val();

            var DATE = new Date(TT);
            var NEWDATE = new Date(DATE);

            NEWDATE.setDate(NEWDATE.getDate() + xday);

            var DD = NEWDATE.getDate();
            var MM = NEWDATE.getMonth() + 1;
            var Y = NEWDATE.getFullYear();

            var someFormattedDATE = MM + '/' + DD + '/' + Y;
            $(txtDateTo).val(someFormattedDATE);
        }
        else if (selected == 'rdWeek') {
            //dec the from date
            var tt = $(txtDateFrom).val();

            var date = new Date(tt);
            var newdate = new Date(date);

            newdate.setDate(newdate.getDate() + xWeek);

            var dd = newdate.getDate();
            var mm = newdate.getMonth() + 1;
            var y = newdate.getFullYear();

            var someFormattedDate = mm + '/' + dd + '/' + y;
            $(txtDateFrom).val(someFormattedDate);
            //dec the to date

            var TT = $(txtDateTo).val();

            var DATE = new Date(TT);
            var NEWDATE = new Date(DATE);

            NEWDATE.setDate(NEWDATE.getDate() + xWeek);

            var DD = NEWDATE.getDate();
            var MM = NEWDATE.getMonth() + 1;
            var Y = NEWDATE.getFullYear();

            var someFormattedDATE = MM + '/' + DD + '/' + Y;
            $(txtDateTo).val(someFormattedDATE);
        }
        else if (selected == 'rdMonth') {
            //dec the from date

            Date.isLeapYear = function (year) {
                return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
            };

            Date.getDaysInMonth = function (year, month) {
                return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
            };

            Date.prototype.isLeapYear = function () {
                return Date.isLeapYear(this.getFullYear());
            };

            Date.prototype.getDaysInMonth = function () {
                return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
            };

            Date.prototype.addMonths = function (value) {

                var n = this.getDate();
                this.setDate(1);
                this.setMonth(this.getMonth() + value);
                this.setDate(Math.min(n, this.getDaysInMonth()));
                return this;
            };

            Date.prototype.addMonthsLast = function (value) {

                var n = this.getDate();
                this.setDate(1);
                this.setMonth(this.getMonth() + 1);
                if (this.getDaysInMonth() == 31) {

                    this.setDate(Math.max(n, this.getDaysInMonth()));
                }
                else {
                    this.setDate(Math.min(n, this.getDaysInMonth()));

                }

                return this;
            };

            Date.prototype.addMonthsLastDec = function (value) {

                var n = this.getDate();
                this.setDate(1);
                this.setMonth(this.getMonth() - 1);
                if (this.getDaysInMonth() == 31) {

                    this.setDate(Math.max(n, this.getDaysInMonth()));
                }
                else {
                    this.setDate(Math.min(n, this.getDaysInMonth()));

                }

                return this;
            };
            var tt = $(txtDateFrom).val();

            var date = new Date(tt).toDateString();
            var newdate = new Date(date);

            newdate.addMonths(xMonth);

            var dd = newdate.getDate();
            var mm = newdate.getMonth() + 1;
            var y = newdate.getFullYear();

            var someFormattedDate = mm + '/' + dd + '/' + y;
            $(txtDateFrom).val(someFormattedDate);


            //dec the to date
            if (select == 'dec') {
                var ti = $(txtDateTo).val();
                var date = new Date(ti).toDateString();
                var newdateti = new Date(date);
                newdateti.addMonthsLastDec(xMonth);

                var dd = newdateti.getDate();
                var mm = newdateti.getMonth() + 1;
                var y = newdateti.getFullYear();

                var someFormattedDate = mm + '/' + dd + '/' + y;
                $(txtDateTo).val(someFormattedDate);
            }

            else {
                var ti = $(txtDateTo).val();

                var date = new Date(ti).toDateString();
                var newdateti = new Date(date);
                newdateti.addMonthsLast(xMonth);

                var dd = newdateti.getDate();
                var mm = newdateti.getMonth() + 1;
                var y = newdateti.getFullYear();

                var someFormattedDate = mm + '/' + dd + '/' + y;
                $(txtDateTo).val(someFormattedDate);
            }
        }


        else if (selected == 'rdQuarter') {
            //dec the from date
            var tt = $(txtDateFrom).val();

            var date = new Date(tt);
            var newdate = new Date(date);

            newdate.setMonth(newdate.getMonth() + xQuarter);

            var dd = newdate.getDate();
            var mm = newdate.getMonth() + 1;
            var y = newdate.getFullYear();

            var someFormattedDate = mm + '/' + dd + '/' + y;
            $(txtDateFrom).val(someFormattedDate);
            //dec the to date

            var TT = $(txtDateTo).val();

            var DATE = new Date(TT);
            var NEWDATE = new Date(DATE);

            //decrease date range
            if (select == 'dec') {
                xQuarter = -3;

                if (DATE.getMonth() == 11) {
                    NEWDATE.setDate(NEWDATE.getDate() - 1);
                    NEWDATE.setMonth(NEWDATE.getMonth() + xQuarter);

                }
                else if (DATE.getMonth() == 5) {
                    NEWDATE.setMonth(NEWDATE.getMonth() + xQuarter);
                    NEWDATE.setDate(NEWDATE.getDate() + 1);

                }
                else {
                    NEWDATE.setMonth(NEWDATE.getMonth() + xQuarter);

                }

            }
            else {
                xQuarter = 3;
                NEWDATE.setDate(NEWDATE.getDate() - 1);
                NEWDATE.setMonth(NEWDATE.getMonth() + xQuarter);
                if (NEWDATE.getMonth() == 11 || NEWDATE.getMonth() == 12 || DATE.getMonth() == 11) {
                    NEWDATE.setDate(31);
                } else {
                    if (DATE.getMonth() == 5) { NEWDATE.setDate(NEWDATE.getDate() + 1); }
                    else { NEWDATE.setDate(NEWDATE.getDate()); }

                }
            }
            var DD = NEWDATE.getDate();
            var MM = NEWDATE.getMonth() + 1;
            var Y = NEWDATE.getFullYear();

            var someFormattedDATE = MM + '/' + DD + '/' + Y;
            $(txtDateTo).val(someFormattedDATE);
        }
        else if (selected == 'rdYear') {

            var tt = $(txtDateFrom).val();

            var date = new Date(tt);
            var newdate = new Date(date);

            newdate.setFullYear(newdate.getFullYear() + xYear);

            var dd = newdate.getDate();
            var mm = newdate.getMonth() + 1;
            var y = newdate.getFullYear();

            var someFormattedDate = mm + '/' + dd + '/' + y;
            $(txtDateFrom).val(someFormattedDate);
            //dec the to date

            var TT = $(txtDateTo).val();

            var DATE = new Date(TT);
            var NEWDATE = new Date(DATE);

            NEWDATE.setFullYear(NEWDATE.getFullYear() + xYear);
            var DD = NEWDATE.getDate();
            var MM = NEWDATE.getMonth() + 1;
            var Y = NEWDATE.getFullYear();

            var someFormattedDATE = MM + '/' + DD + '/' + Y;
            $(txtDateTo).val(someFormattedDATE);
        }

        return false;

    }
    function SelectDate(type, txtDateFrom, txtdateTo, label, UniqueVal, rdGroup) {
        var type = type;
        var txtDateFrom = txtDateFrom;
        var txtdateTo = txtdateTo;
        var UniqueVal = UniqueVal;
        var label = label;
        if (type == 'Day') {
            var todaydate = new Date();
            var day = todaydate.getDate();
            var month = todaydate.getMonth() + 1;
            var year = todaydate.getFullYear();
            var datestring = month + "/" + day + "/" + year;
            $(txtdateTo).val(datestring);
            $(txtDateFrom).val(datestring);
            $(label).addClass("labelactive");
            $("#hdnChecksSelectDtRange").val("Day");
        }
        if (type == 'Week') {

            Date.prototype.GetFirstDayOfWeek = function () {
                return (new Date(this.setDate(this.getDate() - this.getDay())));
            }

            Date.prototype.GetLastDayOfWeek = function () {
                return (new Date(this.setDate(this.getDate() - this.getDay() + 6)));
            }
            var today = new Date();
            var Firstdate = today.GetFirstDayOfWeek();
            var day = Firstdate.getDate();
            var month = Firstdate.getMonth() + 1;
            var year = Firstdate.getFullYear();
            var datestring = month + "/" + day + "/" + year;
            $(txtDateFrom).val(datestring);
            var Lastdate = today.GetLastDayOfWeek();
            var day = Lastdate.getDate();
            var month = Lastdate.getMonth() + 1;
            var year = Lastdate.getFullYear();
            var dateString = month + "/" + day + "/" + year;
            $(txtdateTo).val(dateString);
            $(label).addClass("labelactive");
            $("#hdnChecksSelectDtRange").val("Week");
        }
        if (type == 'Month') {
            var date = new Date(), y = date.getFullYear(), m = date.getMonth();
            var FirstDayOfMonth = new Date(y, m, 1);
            var lastDayOfMonth = new Date(y, m + 1, 0);
            var day = FirstDayOfMonth.getDate();
            var month = FirstDayOfMonth.getMonth() + 1;
            var year = FirstDayOfMonth.getFullYear();
            var datestring = month + "/" + day + "/" + year;
            $(txtDateFrom).val(datestring);
            var day = lastDayOfMonth.getDate();
            var month = lastDayOfMonth.getMonth() + 1;
            var year = lastDayOfMonth.getFullYear();
            var dateString = month + "/" + day + "/" + year;
            $(txtdateTo).val(dateString);
            $(label).addClass("labelactive");
            $("#hdnChecksSelectDtRange").val("Month");
        }
        if (type == 'Quarter') {
            var d = new Date();
            var quarter = Math.floor((d.getMonth() / 3));
            var firstDate = new Date(d.getFullYear(), quarter * 3, 1);
            var lastDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
            var day = firstDate.getDate();
            var month = firstDate.getMonth() + 1;
            var year = firstDate.getFullYear();
            var datestring = month + "/" + day + "/" + year;
            $(txtDateFrom).val(datestring);
            var day = lastDate.getDate();
            var month = lastDate.getMonth() + 1;
            var year = lastDate.getFullYear();
            var dateString = month + "/" + day + "/" + year;
            $(txtdateTo).val(dateString);
            $(label).addClass("labelactive");
            $("#hdnChecksSelectDtRange").val("Quarter");
        }
        if (type == 'Year') {
            var date = new Date(), y = date.getFullYear(), m = date.getMonth();
            var FirstDayOfYear = new Date(y, 1, 1);
            var lastDayOfYear = new Date(y, 11, 31);
            var day = FirstDayOfYear.getDate();
            var month = FirstDayOfYear.getMonth();
            var year = FirstDayOfYear.getFullYear();
            var datestring = month + "/" + day + "/" + year;
            $(txtDateFrom).val(datestring);
            var day = lastDayOfYear.getDate();
            var month = lastDayOfYear.getMonth() + 1;
            var year = lastDayOfYear.getFullYear();
            var dateString = month + "/" + day + "/" + year;
            $(txtdateTo).val(dateString);
            $(label).addClass("labelactive");
            $("#hdnChecksSelectDtRange").val("Year");
        }
        if (typeof (Storage) !== "undefined") {
            // Store
            localStorage.setItem(UniqueVal, $("#hdnChecksSelectDtRange").val());
        }
        $("#hdnCssActive").val("CssActive");
        var clickSearchButton = $("#lnkSearch");
        clickSearchButton.click();
        $("#hdnCssActive").val("1");
    }
</script>
<script type="text/javascript">
    function OpenReprintCheckRangeModal() {
            var wnd = $find("#ReprintCheckRange");
        wnd.set_title("Reprint Check");
        wnd.Show();
    }
    function CloseReprintCheckRangeModal() {
        var wnd = $find("#ReprintCheckRange");
        wnd.Close();

    }
    function OpentemplateModal() {
        debugger;
        var d1 = parseInt($("#txtcheckfrom").val());
        var d2 = parseInt($("#txtcheckto").val());

        if (d2 < d1) {
            noty({
                text: 'Ending checkno is not less then starting checkno.',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 5000,
                theme: 'noty_theme_default',
                closable: true
            });
            return;
        }
        CloseReprintCheckRangeModal();
        var wnd = $find("#RadWindowTemplates");
        //wnd.set_title("Re-Print Check Range");
        wnd.Show();
    }
    function ClosetemplateModal() {
        var wnd = $find("#RadWindowTemplates");
        wnd.Close();
        //$('html, body').animate({ scrollTop: $('#vendorType').offset().top }, 'slow');
    }
       
        
    function CloseVoidModal() {
        var wnd = $find("#VoidCheckWindow");
        wnd.Close();
        //$('html, body').animate({ scrollTop: $('#vendorType').offset().top }, 'slow');
    }
</script>