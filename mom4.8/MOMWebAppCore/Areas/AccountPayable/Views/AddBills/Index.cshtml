
@{
    ViewData["Title"] = " List Page";
    Layout = "~/Views/Shared/MOMLayout.cshtml";
}

<!--Grid Control-->
<link href="~/MOMUI/Design/css/grid.css" rel="stylesheet" />
<!--File Upload Control-->
<link href="~/MOMUI/Design/js/plugins/dropify/css/dropify.css" type="text/css" rel="stylesheet" media="screen,projection">
<style>
    .rgRow > td {
        font-size: 0.9em !important;
    }

    .rgAltRow > td {
        font-size: 0.9em !important;
    }

    .hidden {
        visibility: hidden;
    }

    .form-section3-div4 {
        width: 23%;
        float: left;
    }

    .form-section3-div4blank {
        float: left;
        width: 2.5%;
    }

    .colbl-customval {
        text-align: right;
    }

    .highlight {
        background-color: Yellow;
    }

    .highlighted {
        background-color: Yellow;
    }

    ul.anchor-links li a {
        border-bottom: 1px groove !important;
    }
</style>
<style type="text/css">


    @@media screen and (max-width: 2048px) {

        #ctl00_ContentPlaceHolder1_RadGrid_gvPayment_GridData {
            height: 30vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 2304px) {

        #ctl00_ContentPlaceHolder1_RadGrid_gvPayment_GridData {
            height: 32vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 1920px) {

        #ctl00_ContentPlaceHolder1_RadGrid_gvPayment_GridData {
            height: 27vh !important;
        }
    }

    @@media screen and (max-width: 1706px) {

        #ctl00_ContentPlaceHolder1_RadGrid_gvPayment_GridData {
            height: 22vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 1688px) {

        #ctl00_ContentPlaceHolder1_RadGrid_gvPayment_GridData {
            height: 22vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }

    @@media screen and (max-width: 1366px) {

        #ctl00_ContentPlaceHolder1_RadGrid_gvPayment_GridData {
            height: 10vh !important;
        }

        .RadGrid_Material {
            font-size: 0.9rem !important;
        }
    }
</style>

<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">

<script type="text/javascript">
    function cleanUpCurrency(s) {

        var expression = '-';

        //Check if it is in the proper format
        if (s.match(expression)) {
            //It matched - strip out - and append parentheses
            return s.replace("$-", "\($") + ")";

        }
        else {
            return s;
        }
    }

    function OpenErrorModal() {
        window.radopen(null, "errorWindow");
    }
    function GetRadWindow() {
        var oWindow = null;
        if (window.radWindow)
            oWindow = window.radWindow;
        else if (window.frameElement && window.frameElement.radWindow)
            oWindow = window.frameElement.radWindow;
        return oWindow;
    }
    function GetParameterValues(param) {
        var url = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < url.length; i++) {
            var urlparam = url[i].split('=');
            if (urlparam[0] == param) {
                return urlparam[1];
            }
        }
    }


    function ConfirmRef(control) {

        disableControl(control);
        debugger;
        var editCase = $("#hdEditCase").val();
        if (editCase === "true") {
            var qrStr = window.location.search;
            //qrStr = qrStr.split("?")[1].split("=")[1];
            qrStr = GetParameterValues('id');
            itemJSON();
            var urlsedit;
            if ($("#chkIsRecurr").checked) {
                urlsedit = "CustomerAuto.asmx/GetBillRecurrRefExistEditAPBILL";
            }
            else {
                urlsedit = "CustomerAuto.asmx/GetBillRefExistEditAPBILL";
            }
            $.ajax({
                type: "POST",
                // url: "AddBills.aspx/GetBillRefExistEdit",
                url: urlsedit,
                async: false,
                data: '{Ref: "' + $("#txtRef")[0].val() + '",VendorID: "' + $("#hdnVendorID")[0].val() + '",PJID: "' + qrStr + '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    var chk = response.d;
                    if (chk === "True") {
                        var r = confirm("Ref number with this vendor already exists!");

                        enableControl(control);
                        retVal = false;
                        return;
                        if (r === true) {
                            itemJSON();
                            enableControl(control);
                            retVal = true;


                        } else {
                            enableControl(control);
                            $('#MOMloading').hide();
                            retVal = false;
                        }

                    }
                    else {
                        itemJSON();
                        enableControl(control);
                        retVal = true;
                    }
                },
                failure: function (response) {
                    enableControl(control);
                    $('#MOMloading').hide();
                    retVal = false;

                }

            });
            retVal = true;

        }
        else {
            var retVal = false;
            var vendorId = $("#hdnVendorID").val();
            var urlsinsert;
            if ($("#chkIsRecurr").is(':checked')) {
                urlsinsert = "CustomerAuto.asmx/GetBillRecurrRefExistAPBILL";
            }
            else {
                urlsinsert = "CustomerAuto.asmx/GetBillRefExistAPBILL";
            }
            if (vendorId !== '') {

                $.ajax({
                    type: "POST",
                    //url: "AddBills.aspx/GetBillRefExist",
                    url: urlsinsert,
                    async: false,
                    data: '{Ref: "' + $("#txtRef")[0].val() + '",VendorID: "' + $("#hdnVendorID")[0].val() + '" }',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        //$(control).css("pointer-events", "all");
                        var chk = response.d;
                        if (chk === "True") {
                            var r = confirm("Ref number with this vendor already exists!");
                            if (r === true) {
                                itemJSON();
                                enableControl(control);
                                retVal = true;
                            } else {
                                enableControl(control);
                                $('#MOMloading').hide();
                                retVal = false;
                            }
                        }
                        else {
                            itemJSON();
                            enableControl(control);
                            retVal = true;

                        }
                    },
                    failure: function (response) {
                        enableControl(control);
                        $('#MOMloading').hide();
                        retVal = false;
                    }

                });
                return retVal;
            }
            else {
                enableControl(control);
            }
        }

    }
    function disableControl(control) {
        $(control).css("pointer-events", "none");
    }

    function enableControl(control) {
        setTimeout(function () { $(control).css("pointer-events", "all"); }, 1000);

    }
    function CloseModal() {
        setTimeout(function () {
            GetRadWindow().close();
        }, 0);
    }


    $(document).ready(function () {
        function dtaa() {
            this.prefixText = null;
            this.vendor = null;
            this.con = null;
        }
        function makeReadonly(txt) {
            $("#" + txt.id).prop('readonly', true);
        }
        if ('<% Request.QueryString["id"] %>' != null && '<%=Request.QueryString["id"] %>' != "" && '<%=Request.QueryString["id"] %>' != undefined) {
            $('#aImport').hide();
        }

        $(function () {
            $("#txtQty").change(function () {
                var budgetunit = $("#txtBudgetUnit").val();
                var qty = $(this).val();
                if (budgetunit != "" && qty != "") {
                    var budgetext = parseFloat(qty) * parseFloat(budgetunit);
                    $("#lblBudgetExt").text(budgetext.toFixed(2));
                }
                if (budgetunit != "") {
                    $("#txtBudgetUnit").val(parseFloat(budgetunit).toFixed(2));
                }
                if (qty != "") {
                    $("#txtQty").val(parseFloat(qty).toFixed(2));
                }
            });
            $("#txtBudgetUnit").change(function () {
                var budgetunit = $(this).val();
                var qty = $("#txtQty").val();
                if (budgetunit != "" && qty != "") {
                    var budgetext = parseFloat(qty) * parseFloat(budgetunit);
                    $("#lblBudgetExt").text(budgetext.toFixed(2));
                }
                if (budgetunit != "") {
                    $("#txtBudgetUnit").val(parseFloat(budgetunit).toFixed(2));
                }
                if (qty != "") {
                    $("#txtQty").val(parseFloat(qty).toFixed(2));
                }
            });
            $("#txtVendor").keyup(function (event) {

                var hdnVendorID = $("#hdnVendorID");
                if ($("#txtVendor").value == '') {
                    hdnVendorID.value = '';
                }
            });

            $("[id*=txtGvJob]").focusout(function () {

                var txtGvJob = $(this).attr('id');
                var txtGvAcctNo = $(txtGvJob.replace('txtGvJob', 'txtGvAcctNo'));
                var strAcctNo = $(txtGvAcctNo).val();

                var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
                var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
                var txtGvAcctName = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvAcctName'));

                if (strAcctNo == '') {
                    var vendorId = $("#hdnVendorID").val();
                    if (vendorId != '') {
                        $.ajax({
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            url: "AccountAutoFill.asmx/GetGLbyVendor",
                            data: '{"vendor": "' + vendorId + '"}',
                            dataType: "json",
                            async: true,
                            success: function (data) {
                                var ui = $.parseJSON(data.d);

                                if (ui.length > 0) {
                                    var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct;
                                    var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).val();
                                    //-----If Inventory code select then we set default inventory Acct
                                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                    if (GvPhase == 'Inventory') {
                                        $(txtGvAcctNo).val(InvDefaultAcctName);
                                        $(hdnAcctID).val(InvDefaultAcctID);
                                    }
                                    else {
                                        $(txtGvAcctNo).val(strAcct);
                                        $(hdnAcctID).val(ui[0].DA);
                                    }
                                    //$(txtGvAcctName).val(ui[0].DefaultAcct);
                                }
                            },
                            error: function (result) {
                                alert("Due to unexpected errors we were unable to load default acct#");
                            }
                        });
                    }
                }
            });
            $("[id*=txtGvAcctNo]").focusout(function () {
                var txtGvAcctNo = $(this);
                var strAcctNo = $(this).val();

                var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
                var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
                var hdnJobID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnJobID'));

                if (strAcctNo == '') {
                    var job = $(hdnJobID).val();
                    if (job != '' && job != '0') {

                        $.ajax({
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            url: "AccountAutoFill.asmx/GetGLExpByProject",
                            data: '{"Job": "' + job + '"}',
                            dataType: "json",
                            async: true,
                            success: function (data) {

                                var ui = $.parseJSON(data.d);

                                if (ui.length > 0) {
                                    var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct
                                    var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).val();
                                    //-----If Inventory code select then we set default inventory Acct
                                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                    if (GvPhase == 'Inventory') {
                                        $(txtGvAcctNo).val(InvDefaultAcctName);
                                        $(hdnAcctID).val(InvDefaultAcctID);
                                    }
                                    else {
                                        $(txtGvAcctNo).val(strAcct);
                                        $(hdnAcctID).val(ui[0].GLExp);
                                    }
                                }
                            },
                            error: function (result) {
                                alert("Due to unexpected errors we were unable to load default expense acct#");
                            }
                        });
                    }
                    else {
                        var vendorId = $("#hdnVendorID").val();
                        if (vendorId != '') {
                            $.ajax({
                                type: "POST",
                                contentType: "application/json; charset=utf-8",
                                url: "AccountAutoFill.asmx/GetGLbyVendor",
                                data: '{"vendor": "' + vendorId + '"}',
                                dataType: "json",
                                async: true,
                                success: function (data) {
                                    var ui = $.parseJSON(data.d);

                                    if (ui.length > 0) {
                                        var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct
                                        var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).val();
                                        //-----If Inventory code select then we set default inventory Acct
                                        var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                        var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                        if (GvPhase == 'Inventory') {
                                            $(txtGvAcctNo).val(InvDefaultAcctName);
                                            $(hdnAcctID).val(InvDefaultAcctID);
                                        }
                                        else {
                                            $(txtGvAcctNo).val(strAcct);
                                            $(hdnAcctID).val(ui[0].DA);
                                        }
                                    }
                                },
                                error: function (result) {
                                    alert("Due to unexpected errors we were unable to load default acct#");
                                }
                            });
                        }
                    }
                }
            });
            $("[id*=txtGvAcctNo]").change(function () {

                var txtGvAcctNo = $(this);
                var strAcctNo = $(this).val();
                strAcctNo = strAcctNo.split(" -")[0];
                var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
                var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
                var hdnJobID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnJobID'));

                if (strAcctNo != '') {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetChartByAcct",
                        data: '{"prefixText": "' + strAcctNo + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            var ui = $.parseJSON(data.d);

                            if (ui.length == 0) {
                                var strAcct = $(txtGvAcctNo).val();
                                $(txtGvAcctNo).val('');
                                noty({
                                    text: 'Acct #' + strAcct + ' doesn\'t exist!',
                                    type: 'warning',
                                    layout: 'topCenter',
                                    closeOnSelfClick: false,
                                    timeout: false,
                                    theme: 'noty_theme_default',
                                    closable: true
                                });
                            }
                            else {
                                var strAcct = ui[0].Acct + ' - ' + ui[0].fDesc;
                                $(txtGvAcctNo).val(strAcct);
                                $(hdnAcctID).val(ui[0].ID);
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load Acct#");
                        }
                    });
                }

            });

            $("[id*=txtGvAcctNo]").autocomplete({

                //open: function (e, ui) {
                //    /* create the scrollbar each time autocomplete menu opens/updates */
                //    $(".ui-autocomplete").mCustomScrollbar({
                //        setHeight: 182,
                //        theme: "dark-3",
                //        autoExpandScrollbar: true
                //    });
                //},
                //response: function (e, ui) {
                //    /* destroy the scrollbar after each search completes, before the menu is shown */
                //    $(".ui-autocomplete").mCustomScrollbar("destroy");
                //},
                source: function (request, response) {
                    var dtaaa = new dtaa();
                    dtaaa.prefixText = request.term;
                    query = request.term;

                    var str = request.term;
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetAccountName",
                        data: JSON.stringify(dtaaa),
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            response($.parseJSON(data.d));
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load account name");
                        }
                    });
                },
                select: function (event, ui) {

                    if (ui.item.value == 0)
                        window.location.href = "addcoa.aspx";
                    else {
                        var txtGvAcctName = this.id;
                        var hdnAcctID = $(txtGvAcctName.replace('txtGvAcctNo', 'hdnAcctID'));
                        var strAcct = ui.item.acct + " - " + ui.item.label;
                        var GvPhase = $(txtGvAcctName.replace('txtGvAcctNo', 'txtGvPhase')).value;
                        //-----If Inventory code select then we set default inventory Acct
                        var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                        var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                        if (GvPhase == 'Inventory') {
                            $(txtGvAcctNo).val(InvDefaultAcctName);
                            $(hdnAcctID).val(InvDefaultAcctID);
                        }
                        else {
                            $(hdnAcctID).val(ui.item.value);
                            $(this).val(strAcct);
                        }
                    }

                    return false;
                },
                focus: function (event, ui) {
                    $(this).val(ui.item.acct);
                    return false;
                },
                change: function (event, ui) {

                    var txtGvAcctNo = this.id;
                    var hdnAcctID = $(txtGvAcctNo.replace('txtGvAcctNo', 'hdnAcctID'));
                    var strAcct = $(txtGvAcctNo).val();

                    if (strAcct == '') {
                        $(hdnAcctID).val('')
                    }
                },
                minLength: 0,
                delay: 250
            })
            $.each($(".searchinput"), function (index, item) {
                $(item).data("ui-autocomplete")._renderItem = function (ul, item) {

                    var ula = ul;
                    var itema = item;
                    var result_value = item.value;
                    var result_item = item.label;
                    var result_desc = item.acct;
                    var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                    result_item = result_item.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                    if (result_desc != null) {
                        result_desc = result_desc.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>'
                        });
                    }

                    if (result_value == 0) {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                    else {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_desc + "</span></a>")
                            .appendTo(ul);
                    }
                };
            });

            $("[id*=txtGvUseTax]").autocomplete({
                //open: function (e, ui) {
                //    /* create the scrollbar each time autocomplete menu opens/updates */
                //    $(".ui-autocomplete").mCustomScrollbar({
                //        setHeight: 182,
                //        theme: "dark-3",
                //        autoExpandScrollbar: true
                //    });
                //},
                //response: function (e, ui) {
                //    /* destroy the scrollbar after each search completes, before the menu is shown */
                //    $(".ui-autocomplete").mCustomScrollbar("destroy");
                //},

                source: function (request, response) {
                    var dtaaa = new dtaa();
                    dtaaa.prefixText = request.term;
                    query = request.term;

                    var str = request.term;
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/getUseTaxSearch",
                        data: JSON.stringify(dtaaa),
                        dataType: "json",
                        async: true,
                        success: function (data) {

                            response($.parseJSON(data.d));
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load account name");
                        }
                    });
                },
                select: function (event, ui) {

                    if (ui.item.value == 0)
                        window.location.href = "addbills.aspx";
                    else {
                        var txtGvUseTax = this.id;
                        $(this).val(ui.item.Rate);

                        var hdnUtax = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtax'));
                        var hdnUtaxGL = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtaxGL'));

                        $(hdnUtax).val(ui.item.Name);
                        $(hdnUtaxGL).val(ui.item.GL);
                    }

                    return false;
                },
                focus: function (event, ui) {

                    $(this).val(ui.item.Rate);
                    return false;
                },
                minLength: 0,
                delay: 250
            }).click(function () {
                $(this).autocomplete('search', $(this).val())
            })
            $.each($(".tsearchinput"), function (index, item) {
                $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                    var ula = ul;
                    var itema = item;
                    var result_value = item.Rate;
                    var result_item = item.Name;
                    var result_desc = item.GL;
                    var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                    result_item = result_item.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                    if (result_desc != null) {
                        result_desc = result_desc.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>'
                        });
                    }

                    if (result_value == 0) {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                    else {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_value + "</span></a>")
                            .appendTo(ul);
                    }
                };
            });

            ////   $$$$ Start JOB Autocomplete $$$$$$$

            $("[id*=txtGvJob]").autocomplete({
                //open: function (e, ui) {
                //    /* create the scrollbar each time autocomplete menu opens/updates */
                //    $(".ui-autocomplete").mCustomScrollbar({
                //        setHeight: 182,
                //        theme: "dark-3",
                //        autoExpandScrollbar: true
                //    });
                //},
                //response: function (e, ui) {
                //    /* destroy the scrollbar after each search completes, before the menu is shown */
                //    $(".ui-autocomplete").mCustomScrollbar("destroy");
                //},

                source: function (request, response) {
                    var dtaaa = new dtaa();
                    dtaaa.prefixText = request.term;
                    query = request.term;
                    var str = request.term;
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetJobLocations",
                        data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + true + '", "con": "' + dtaaa.con + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            response($.parseJSON(data.d));
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load project details");
                        }
                    });
                },
                select: function (event, ui) {
                    var txtGvJob = this.id;
                    var txtGvLoc = $(txtGvJob.replace('txtGvJob', 'txtGvLoc'));
                    var hdnJobID = $(txtGvJob.replace('txtGvJob', 'hdnJobID'));
                    var txtGvAcctNo = $(txtGvJob.replace('txtGvJob', 'txtGvAcctNo'));
                    var hdnAcctID = $(txtGvJob.replace('txtGvJob', 'hdnAcctID'));

                    $(hdnJobID).val(ui.item.ID);
                    var jobStr = ui.item.ID + ", " + ui.item.fDesc;
                    $(this).val(jobStr);
                    $(txtGvLoc).val(ui.item.Tag);
                    var GvPhase = $(txtGvJob.replace('txtGvJob', 'txtGvPhase')).val();
                    //-----If Inventory code select then we set default inventory Acct
                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                    if (GvPhase == 'Inventory') {
                        $(txtGvAcctNo).val(InvDefaultAcctName);
                        $(hdnAcctID).val(InvDefaultAcctID);
                    }
                    else {
                        $(hdnAcctID).val(ui.item.GLExp);
                        var strAcct = ui.item.Acct + ' - ' + ui.item.DefaultAcct
                        $(txtGvAcctNo).val(strAcct);
                    }

                    return false;
                },
                focus: function (event, ui) {
                    try {
                        $(this).val(ui.item.fDesc);
                    } catch{ }

                    return false;
                },
                change: function (event, ui) {
                    var txtGvJob = this.id;
                    var hdnJobID = $(txtGvJob.replace('txtGvJob', 'hdnJobID'));
                    var strJob = $(txtGvJob).val();

                    if (strJob == '') {
                        $(hdnJobID).val('')
                    }
                },
                minLength: 0,
                delay: 250
            }).click(function () {
                $(this).autocomplete('search', $(this).val())
            })
            $.each($(".psearchinput"), function (index, item) {
                $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                    var ula = ul;
                    var itema = item;
                    var result_value = item.ID;
                    var result_item = item.fDesc;
                    var result_desc = item.Tag;
                    var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                    result_item = result_item.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });

                    if (result_value != null) {
                        result_value = result_value.toString().replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>'
                        });
                    }
                    if (result_desc != null) {
                        result_desc = result_desc.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>'
                        });
                    }
                    if (result_value == 0) {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                    else {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a><b> Project: </b> " + result_value + ", " + result_item + ", <span style='color:Gray;'><b> Loc: </b>" + result_desc + "</span></a>")
                            .appendTo(ul);
                    }
                };
            });

            ////   $$$$ End JOB Autocomplete $$$$$$$ $
            //// ----- $$$ Start  txtGvPhase  autocomplete  $$$

            $("[id*=txtGvPhase]").autocomplete({
                //open: function (e, ui) {
                //    /* create the scrollbar each time autocomplete menu opens/updates */
                //    $(".ui-autocomplete").mCustomScrollbar({
                //        setHeight: 182,
                //        theme: "dark-3",
                //        autoExpandScrollbar: true
                //    });
                //},
                //response: function (e, ui) {
                //    /* destroy the scrollbar after each search completes, before the menu is shown */
                //    $(".ui-autocomplete").mCustomScrollbar("destroy");
                //},
                source: function (request, response) {

                    var curr_control = this.element.attr('id');
                    var job = $(curr_control.replace('txtGvPhase', 'hdnJobID'));
                    var prefixText = request.term;
                    var job = $(job.id).val();
                    if (job == "0") { job = ""; }
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetPhase",
                        data: '{"jobID": "' + job + '", "prefixText": "' + prefixText + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            response($.parseJSON(data.d));
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load type.");
                        },
                        complete: function () {
                            $(this).data('requestRunning', false);
                        }
                    });
                    return false;
                },
                deferRequestBy: 200,
                select: function (event, ui) {

                    var txtGvPhase = this.id;
                    var hdnTypeId = $(txtGvPhase.replace('txtGvPhase', 'hdnTypeId'));
                    var hdOpSq = $(txtGvPhase.replace('txtGvPhase', 'hdOpSq'));
                    var str = ui.item.TypeName;
                    if (str == "No Record Found!") {
                        $(this).val("");
                    }
                    else {
                        try {
                            $(hdnTypeId).val(ui.item.Type);
                            $(this).val(ui.item.TypeName);
                            $(hdOpSq).val(ui.item.Code);
                        } catch{ }
                    }

                    var GvPhase = $(txtGvPhase.replace('txtGvPhase', 'txtGvPhase')).val();
                    //-----If Inventory code select then we set default inventory Acct
                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                    if (GvPhase == 'Inventory') {
                        try {
                            var txtGvAcctNo = $(txtGvPhase.replace('txtGvPhase', 'txtGvAcctNo'));
                            var hdnAcctID = $(txtGvPhase.replace('txtGvPhase', 'hdnAcctID'));

                            txtGvWarehouse = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouse'));
                            txtGvWarehouseLocation = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouseLocation'));
                            txtGvWarehouse.readOnly = false;
                            txtGvWarehouseLocation.readOnly = false;

                            $(txtGvAcctNo).val(InvDefaultAcctName);
                            $(hdnAcctID).val(InvDefaultAcctID);
                        }
                        catch (e) { }
                    }
                    else {
                        try {
                            txtGvWarehouse = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouse'));
                            txtGvWarehouseLocation = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouseLocation'));
                            txtGvWarehouse.readOnly = true;
                            txtGvWarehouseLocation.readOnly = true;
                            $(txtGvWarehouse).val('');
                            $(txtGvWarehouseLocation).val('');
                            txtGvAcctNo = $(txtGvPhase.replace('txtGvPhase', 'txtGvAcctNo'));
                            hdnAcctID = $(txtGvPhase.replace('txtGvPhase', 'hdnAcctID'));
                            if (ui.item.AcctName != '' && ui.item.AcctID != '' && ui.item.AcctName != undefined && ui.item.AcctID != undefined) {
                                $(txtGvAcctNo).val(ui.item.AcctName);
                                $(hdnAcctID).val(ui.item.AcctID);
                            }

                        }
                        catch (e) { }
                    }


                    return false;
                },
                focus: function (event, ui) {

                    $(this).val(ui.item.TypeName);
                    return false;
                },
                minLength: 0,
                delay: 250
            })
                .click(function () {
                    $(this).autocomplete('search', $(this).val())
                })
            $.each($(".phsearchinput"), function (index, item) {

                $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                    var ula = ul;
                    var itema = item;
                    var result_value = item.Type;
                    var result_item = item.TypeName;
                    var result_GroupName = item.GroupName;
                    var result_Code = item.Code;
                    var result_CodeDesc = item.CodeDesc;
                    if (result_Code != null && result_Code != "")
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' class='fa fa-check-square' title=''></i>" + result_GroupName + ", " + result_Code + ", " + result_CodeDesc + ", <span style='color:Gray;'><b>  </b>" + result_item + "</span></span>")
                            .appendTo(ul);
                    else
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' title=''></i>" + result_item + "</span>")
                            .appendTo(ul);
                };
            });

            $("[id*=txtGvPhase]").change(function () {
                var txtGvPhase = $(this);
                var strPhase = $(this).val();

                var txtGvPhase1 = $(txtGvPhase).attr('id');
                var hdnTypeId = $(txtGvPhase1.replace('txtGvPhase', 'hdnTypeId'));
                var hdnPID = $(txtGvPhase1.replace('txtGvPhase', 'hdnPID'));
                var txtGvItem = $(txtGvPhase1.replace('txtGvPhase', 'txtGvItem'));
                var hdnItemID = $(txtGvPhase1.replace('txtGvPhase', 'hdnItemID'));
                var txtGvDesc = $(txtGvPhase1.replace('txtGvPhase', 'txtGvDesc'));

                if (strPhase != "") {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetAutoFillPhase",
                        data: '{"prefixText": "' + strPhase + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {

                            var ui = $.parseJSON(data.d);

                            if (ui.length == 0) {
                                $(txtGvPhase).val('');
                                $(hdnTypeId).val('');
                                $(hdnPID).val('');
                                $(txtGvItem).val('');
                                $(hdnItemID).val('');
                                noty({
                                    text: 'Type \'' + strPhase + '\' doesn\'t exist!',
                                    type: 'warning',
                                    layout: 'topCenter',
                                    closeOnSelfClick: false,
                                    timeout: 5000,
                                    theme: 'noty_theme_default',
                                    closable: true
                                });
                            }
                            else {
                                var lbl = ui[0].Label;
                                var val = ui[0].Value;
                                $(txtGvPhase).val(lbl);
                                $(hdnTypeId).val(val);
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load Type");
                        }
                    });
                }
                else {
                    $(hdnPID).val('');
                    $(hdnTypeId).val('');
                    $(txtGvItem).val('');
                    $(hdnItemID).val('');
                    $(txtGvDesc).val('');
                }
            });

            //// ----- $$$ END  txtGvPhase  autocomplete  $$$

            $("[id*=txtGvLoc]").autocomplete({
                open: function (e, ui) {
                    /* create the scrollbar each time autocomplete menu opens/updates */
                    $(".ui-autocomplete").mCustomScrollbar({
                        setHeight: 182,
                        theme: "dark-3",
                        autoExpandScrollbar: true
                    });
                },
                response: function (e, ui) {
                    /* destroy the scrollbar after each search completes, before the menu is shown */
                    $(".ui-autocomplete").mCustomScrollbar("destroy");
                },

                source: function (request, response) {
                    var dtaaa = new dtaa();
                    dtaaa.prefixText = request.term;
                    query = request.term;

                    var str = request.term;
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetJobLocations",
                        data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + false + '", "con": "' + dtaaa.con + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            response($.parseJSON(data.d));
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load phase details");
                        }
                    });
                },
                select: function (event, ui) {

                    var txtGvLoc = this.id;
                    var txtGvJob = $(txtGvLoc.replace('txtGvLoc', 'txtGvJob'));
                    var hdnJobID = $(txtGvLoc.replace('txtGvLoc', 'hdnJobID'));

                    $(hdnJobID).val(ui.item.ID);
                    $(txtGvJob).val(ui.item.fDesc);
                    $(this).val(ui.item.Tag);

                    return false;
                },
                focus: function (event, ui) {
                    $(this).val(ui.item.fDesc);
                    return false;
                },
                minLength: 0,
                delay: 250
            }).click(function () {
                $(this).autocomplete('search', $(this).val())
            })
            $.each($(".jsearchinput"), function (index, item) {
                $(item).data("ui-autocomplete")._renderItem = function (ul, item) {

                    var ula = ul;
                    var itema = item;
                    var result_value = item.ID;
                    var result_item = item.fDesc;
                    var result_desc = item.Tag;
                    var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                    result_item = result_item.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                    if (result_desc != null) {
                        result_desc = result_desc.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>'
                        });
                    }

                    if (result_value == 0) {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                    else {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a><b> Job: </b> " + result_item + ", <span style='color:Gray;'><b> Loc: </b>" + result_desc + "</span></a>")
                            .appendTo(ul);
                    }
                };
            });

        });

        Materialize.updateTextFields();
    });
</script>
<script type="text/javascript">
    $(document).ready(function () {
        $('#ui-active-menuitem').click(function () {

            $('.ui-menu-item').removeClass('ui-autocomplete-loading');
        })
        //InitializeGrids("#RadGrid_gvJobCostItems");

        CallCalAmountTax();
    });

    ////////// This function will be called during delete operation to call two functions ///////////
    function CallCalAmountTax() {
        CalculateTotalAmt();
        CalculateTotalUseTaxExpense();
    }
    /////////////////// To calculate Total and to make Gridview Amount Value to 2 decimal ////////////

    function CalculateTotal(obj) {
        try {
            var masterTable = $find("#RadGrid_gvJobCostItems").get_masterTableView();
            var count = masterTable.get_dataItems().length;
            var item;
            for (var i = 0; i < count; i++) {
                item = masterTable.get_dataItems()[i];
                var Qty = item.findElement("txtGvQuan");
                var Amount = item.findElement("txtGvAmount");
                var Price = item.findElement("txtGvPrice");

                var lblAmountWithTax = item.findElement("lblAmountWithTax");
                var hdnAmountWithTax = item.findElement("hdnAmountWithTax");


                //////////// PO QTY /AMOUNT CALCULATION //////////////////
                var hdnOutstandQuan = item.findElement("hdnOutstandQuan");
                var hdnOutstandBalance = item.findElement("hdnOutstandBalance");
                var hdnIsPO = item.findElement("hdnIsPO");


                if (jQuery.trim($(hdnIsPO).val()) == '2') {
                    var pobalqty = parseFloat($(hdnOutstandQuan).val());
                    var pobalamt = parseFloat($(hdnOutstandBalance).val());
                    var temTotal = 0;
                    var receiveQuan = parseFloat($(Qty).val());
                    var receiveAmnt = parseFloat($(Amount).val());
                    var Price = parseFloat($(Price).val());

                    if (parseFloat(pobalamt) == 0) { pobalamt = receiveAmnt; }

                    if ($(Amount).val() == '') {
                        $(Amount).val('0.00');

                    }
                    else {
                        if (receiveAmnt > pobalamt) {
                            $(Amount).val(pobalamt);
                        }
                        else {
                            $(Amount).val(receiveAmnt);

                        }
                    }
                    var receivef = parseFloat($(Amount).val());
                    var qtyf = 0;
                    if (Price != 0) {
                        qtyf = receivef / Price;

                    }

                    //$(Qty).val(parseFloat(qtyf));

                }
                //////////// PO QTY /AMOUNT CALCULATION //////////////////

                var QtyVal = $(Qty).val();
                var AmountVal = $(Amount).val();
                if (QtyVal != "" && AmountVal != "") {
                    if (!isNaN(parseFloat(QtyVal)) && !isNaN(parseFloat(AmountVal)) && parseFloat(QtyVal) != 0) {
                        var QtyPrice = parseFloat(AmountVal) / parseFloat(QtyVal);
                        $(Price).val(QtyPrice.toFixed(2));
                    } else {
                        $(Price).val("");
                    }

                }

            }
        } catch (e) {
            alert(e);
        }
        if (!isNaN(parseFloat($(obj.id).val()))) {
            $(obj.id).val(parseFloat($(obj.id).val()).toFixed(2));
            var hdnIsPO;
            var pobalam
            var receiveAmnt;
            var hdnOutstandBalance;
            var Amount;
            var txt = obj.id;

            if (txt.indexOf("Quan") >= 0) {
                hdnIsPO = $(txt.replace('txtGvQuan', 'hdnIsPO'));
                hdnOutstandBalance = $(txt.replace('txtGvQuan', 'hdnOutstandBalance'));
                Amount = $(txt.replace('txtGvQuan', 'txtGvAmount'));
            }
            else if (txt.indexOf("Price") >= 0) {
                hdnIsPO = $(txt.replace('txtGvPrice', 'hdnIsPO'));
                hdnOutstandBalance = $(txt.replace('txtGvPrice', 'hdnOutstandBalance'));
                Amount = $(txt.replace('txtGvPrice', 'txtGvAmount'));
            }
            else if (txt.indexOf("Amount") >= 0) {
                hdnIsPO = $(txt.replace('txtGvAmount', 'hdnIsPO'));
                hdnOutstandBalance = $(txt.replace('txtGvAmount', 'hdnOutstandBalance'));
                Amount = $(txt.replace('txtGvAmount', 'txtGvAmount'));
            }

            if (jQuery.trim($(hdnIsPO).val()) != '2') {
                CalTotalVal(obj);
            }

            if (jQuery.trim($(hdnIsPO).val()) == '2') {
                var pobalamt = parseFloat($(hdnOutstandBalance).val());
                var receiveAmnt = parseFloat($(Amount).val());


                if (parseFloat(pobalamt) == 0) { pobalamt = receiveAmnt; }

                if ($(Amount).val() == '') {
                    $(Amount).val('0.00');

                    $(hdnAmountWithTax).val('0.00');
                    $(lblAmountWithTax).text('0.00');
                }
                else {
                    if (receiveAmnt > pobalamt) {
                        $(Amount).val(pobalamt);
                        $(hdnAmountWithTax).val(pobalamt);
                        $(lblAmountWithTax).text(pobalamt.toFixed(2));
                    }
                    else {
                        $(Amount).val(receiveAmnt);
                        $(hdnAmountWithTax).val(receiveAmnt);
                        $(lblAmountWithTax).text(receiveAmnt.toFixed(2));

                    }
                }


            }
        }
        else {
            var hdnIsPO;
            var pobalamt;
            var receiveAmnt;
            var hdnOutstandBalance;
            var Amount;
            var txt = obj.id;

            if (txt.indexOf("Quan") >= 0) {
                hdnIsPO = $(txt.replace('txtGvQuan', 'hdnIsPO'));
                hdnOutstandBalance = $(txt.replace('txtGvQuan', 'hdnOutstandBalance'));
                Amount = $(txt.replace('txtGvQuan', 'txtGvAmount'));
            }
            else if (txt.indexOf("Price") >= 0) {
                hdnIsPO = $(txt.replace('txtGvPrice', 'hdnIsPO'));
                hdnOutstandBalance = $(txt.replace('txtGvPrice', 'hdnOutstandBalance'));
                Amount = $(txt.replace('txtGvPrice', 'txtGvAmount'));
            }
            else if (txt.indexOf("Amount") >= 0) {
                hdnIsPO = $(txt.replace('txtGvAmount', 'hdnIsPO'));
                hdnOutstandBalance = $(txt.replace('txtGvAmount', 'hdnOutstandBalance'));
                Amount = $(txt.replace('txtGvAmount', 'txtGvAmount'));
            }

            if (jQuery.trim($(hdnIsPO).val()) != '2') {
                CalTotalVal(obj);
            }

            if (jQuery.trim($(hdnIsPO).val()) == '2') {
                var pobalamt = parseFloat($(hdnOutstandBalance).val());
                var receiveAmnt = parseFloat($(Amount).val());


                if (parseFloat(pobalamt) == 0) { pobalamt = receiveAmnt; }

                if ($(Amount).val() == '') {
                    $(Amount).val('0.00');

                    $(hdnAmountWithTax).val('0.00');
                    $(lblAmountWithTax).text('0.00');
                }
                else {
                    if (receiveAmnt > pobalamt) {
                        $(Amount).val(pobalamt);
                        $(hdnAmountWithTax).val(pobalamt);
                        $(lblAmountWithTax).text(pobalamt.toFixed(2));
                    }
                    else {
                        $(Amount).val(receiveAmnt);
                        $(hdnAmountWithTax).val(receiveAmnt);
                        $(lblAmountWithTax).text(receiveAmnt.toFixed(2));

                    }
                }


            }
        }

        CalculateTotalAmt();
        CalculateTotalUseTaxExpense();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    function CalculateUseTaxTotal(obj) {

        if (!isNaN(parseFloat($(obj.id).val()))) {
            $(obj.id).val(parseFloat($(obj.id).val()).toFixed(4));
        }
        CalculateTotalUseTaxExpense();
    }
    function CalculateSalesTaxTotal(obj) {

        if (!isNaN(parseFloat($(obj.id).val()))) {
            $(obj.id).val(parseFloat($(obj.id).val()).toFixed(4));
        }
        CalculateTotalUseTaxExpense();
    }

    //////////////// Confirm Mail Send to worker ///////////////////
    function notyConfirm(ticid) {

        noty({
            dismissQueue: true,
            layout: 'topCenter',
            theme: 'noty_theme_default',
            animateOpen: { height: 'toggle' },
            animateClose: { height: 'toggle' },
            easing: 'swing',
            text: 'Do you want to update tax at vendor level?',
            type: 'alert',
            speed: 500,
            timeout: false,
            closeButton: false,
            closeOnSelfClick: true,
            closeOnSelfOver: false,
            force: false,
            onShow: false,
            onShown: false,
            onClose: false,
            onClosed: false,
            buttons: [
                {
                    type: 'btn-primary', text: 'Yes', click: function ($noty) {

                        //window.open("mailticket.aspx?id=" + ticid + "&c=0", "_blank");
                        var hdnVendorID = $("#hdnVendorID");
                        $noty.close();
                        if (hdnVendorID.value != '') {

                            $("#hdnUpdateStax").val('1');
                            $("#btnUpdtStax").click();
                        }
                        else {
                            noty({
                                text: 'Please select vendor.',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: 1500,
                                theme: 'noty_theme_default',
                                closable: true
                            });
                            $("#ddlSTax").val('');

                        }
                    }
                },
                {
                    type: 'btn-danger', text: 'No', click: function ($noty) {

                        var hdnVendorID = $("#hdnVendorID");
                        $noty.close();
                        if (hdnVendorID.value != '') {

                            $("#hdnUpdateStax").val('0');
                            $("#btnUpdtStax").click();
                        }
                        else {
                            noty({
                                text: 'Please select vendor.',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: 1500,
                                theme: 'noty_theme_default',
                                closable: true
                            });
                            $("#ddlSTax").val('');
                        }
                        //window.open("addticket.aspx?id=" + ticid + "&comp=0&pop=1&fr=tlv", "_self");
                    }
                }
            ],
            modal: true,
            template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
            cssPrefix: 'noty_',
            custom:
            {
                container: null
            }
        });
    }


    function GetSelectedSTax(ddlSTax) {

        var selectedText = ddlSTax.options[ddlSTax.selectedIndex].innerHTML;
        var selectedValue = ddlSTax.value;
        var lgl = "";
        var lrate = "";
        var ltype = "";
        var lname = "";
        //var lgl = "";
        function dtaa() {
            this.prefixText = null;
            this.vendor = null;
            this.con = null;
        }

        var dtaaa = new dtaa();

        var tytty = selectedValue;
        dtaaa.prefixText = tytty;
        query = tytty;
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "AccountAutoFill.asmx/getSaleTaxSearchByName",
            data: JSON.stringify(dtaaa),
            dataType: "json",
            async: true,
            success: function (data) {

                var maindata = JSON.parse(data.d);

                //$("#txtqst").text(ui.item.STax);
                $("#hdnQST").val(maindata[0].Rate);
                $("#hdnQSTGL").val(maindata[0].GL);
                $("#hdnSTaxType").val(maindata[0].Type);
                $("#hdnSTaxName").val(maindata[0].Name);

                $("#RadGrid_gvJobCostItems").find('tr:not(:first, :last)').each(function () {
                    var $tr = $(this);
                    var chk = $tr.find('input[id*=chkGTaxable]');
                    if (ret == true) {
                        chk.prop('checked', true);
                    }
                    else {
                        chk.prop('checked', false);
                    }

                    var ch_id = chk.attr('id');
                    if (ch_id != undefined) {
                        if (ch_id != "ctl00_ContentPlaceHolder1_gvBills_ctl00_ctl02_ctl00_chkSelectAllGtax") {
                            CalTotalValGtax1(ch_id);
                        }
                    }

                })





                $("#RadGrid_gvJobCostItems").find('tr:not(:first, :last)').each(function () {
                    var $tr = $(this);
                    if ($tr.find('input[id*=lblSalesTax]').attr('id') != "" && typeof $tr.find('input[id*=lblSalesTax]').attr('id') != 'undefined') {
                        $tr.find('input[id*=lblSalesTax]').val(maindata[0].Rate);
                        $tr.find('input[id*=hdnSTaxAm]').val(parseFloat(0).toFixed(4));
                        $tr.find('input[id*=txtGvStaxAmount]').val(parseFloat(0).toFixed(4));
                        $tr.find('input[id*=hdnSTaxGL]').val(maindata[0].GL);
                        $tr.find('input[id*=hdnSTaName]').val(maindata[0].Name);

                        if ($tr.find('input[id*=hdnchkTaxable]') != null) {
                            var cb = $tr.find('input[id*=hdnchkTaxable]');
                            var stax = $("#hdnQST");
                            var gtax = $("#hdnGST");
                            if (parseFloat(stax.value.toString().replace(/[\$\(\),]/g, '')) <= 0) {

                                noty({
                                    text: 'Please Set the Provincial Tax at vendor level',
                                    type: 'warning',
                                    layout: 'topCenter',
                                    closeOnSelfClick: false,
                                    timeout: 1500,
                                    theme: 'noty_theme_default',
                                    closable: true
                                });
                                $(hdnchkTaxable).val('0');
                                //checkbox.checked = false;

                            }
                            else {

                                var staxGL = $("#hdnQSTGL");
                                var gtaxGL = $("#hdnGSTGL");

                                var staxType = $("#hdnSTaxType");

                                var txtGvQuan;
                                var txtGvPrice;
                                var txtGvAmount;
                                var lblSalesTax;
                                var lblGstTax;
                                var hdnGSTTaxAm;
                                var hdnSTaxAm;
                                var txtGvStaxAmount;
                                var lblAmountWithTax;
                                var valAmount;
                                var hdnchkTaxable;
                                var hdnSTaxGL;
                                var hdnGSTTaxGL;
                                var isGst = 0;
                                var totamt = 0;
                                var staxAmt = 0;
                                var gtaxAmt = 0;
                                var staxAmtGL = 0;
                                var gtaxAmtGL = 0;

                                txtGvPrice = $tr.find('input[id*=txtGvPrice]');
                                txtGvQuan = $tr.find('input[id*=txtGvQuan]');
                                txtGvAmount = $tr.find('input[id*=txtGvAmount]');
                                lblGstTax = $tr.find('input[id*=lblGstTax]');

                                lblAmountWithTax = $tr.find('span[id$="lblAmountWithTax"]');
                                hdnAmountWithTax = $tr.find('input[id*=hdnAmountWithTax]');
                                hdnchkTaxable = $tr.find('input[id*=hdnchkTaxable]');
                                hdnSTaxGL = $tr.find('input[id*=hdnSTaxGL]');
                                hdnGSTTaxGL = $tr.find('input[id*=hdnGSTTaxGL]');
                                hdnSTaxAm = $tr.find('input[id*=hdnSTaxAm]');
                                txtGvStaxAmount = $tr.find('input[id*=txtGvStaxAmount]');
                                hdnGSTTaxAm = $tr.find('input[id*=hdnGSTTaxAm]');

                                gtaxAmt = parseFloat($(hdnGSTTaxAm).val());
                                gtaxAmt = parseFloat(gtaxAmt) || 0;

                                if (cb.val() == "1") {
                                    $(hdnchkTaxable).val('1');
                                } else {
                                    $(hdnchkTaxable).val('0');
                                }

                                isGst = 1;

                                if (!jQuery.trim($(txtGvQuan).val()) == '') {
                                    if (isNaN(parseFloat($(txtGvQuan).val()))) {
                                        $(txtGvQuan).val('0.00');
                                    }
                                }

                                if (!jQuery.trim($(txtGvPrice).val()) == '') {
                                    if (isNaN(parseFloat($(txtGvPrice).val()))) {
                                        $(txtGvPrice).val('');
                                    }
                                }

                                if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
                                    if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                                        valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                                        $(txtGvAmount).val(valAmount.toFixed(2));
                                        //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                                    }
                                } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
                                    if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                                        var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                                        $(txtGvPrice).val(valPrice.toFixed(2));
                                        //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                                    }
                                }

                                //if (isGst == 1) {
                                //    if (gtax == null) {
                                //        gtaxAmt = 0.00;
                                //        gtaxAmtGL = 0;
                                //        $(lblGstTax).val(gtaxAmt.toFixed(2));

                                //        $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                                //        $(hdnGSTTaxGL).val(gtaxAmtGL);
                                //    }
                                //    else if (gtax.value != '') {
                                //        if (cb.val() == "1") {
                                //            gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                //            $(lblGstTax).val(gtaxAmt.toFixed(2));
                                //            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                                //            gtaxAmtGL = parseInt(gtaxGL.value);
                                //            $(hdnGSTTaxGL).val(gtaxAmtGL.value);
                                //        }
                                //        else {
                                //            gtaxAmt = 0.00;
                                //            gtaxAmtGL = 0;
                                //        }
                                //        $(lblGstTax).val(gtaxAmt.toFixed(2));

                                //        $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                                //        $(hdnGSTTaxGL).val(gtaxAmtGL);

                                //    }

                                //}

                                if (cb.val() == "1") {
                                    if (parseInt(staxType.value) == 0 || parseInt(staxType.value) == 2) {
                                        if (parseFloat(valAmount) < 0) {

                                            staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                            staxAmt = staxAmt * (-1);
                                            staxAmtGL = parseInt(staxGL.value);

                                        } else {
                                            staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                            staxAmtGL = parseInt(staxGL.value);
                                        }
                                    }
                                    else if (parseInt(staxType.value) == 1) {
                                        var oldvalAmount = valAmount;
                                        if (isGst == 1) {
                                            valAmount = parseFloat(valAmount) + gtaxAmt;
                                        }
                                        if (parseFloat(valAmount) < 0) {

                                            staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                            staxAmt = staxAmt * (-1);
                                            staxAmtGL = parseInt(staxGL.value);
                                            valAmount = oldvalAmount;

                                        } else {
                                            staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                            staxAmtGL = parseInt(staxGL.value);
                                            valAmount = oldvalAmount;
                                        }
                                    }

                                } else {
                                    staxAmt = 0.00;
                                    staxAmtGL = 0;
                                }
                                if (isNaN(staxAmt)) {

                                    staxAmt = 0.00;
                                }
                                if (isNaN(gtaxAmt)) {

                                    gtaxAmt = 0.00;
                                }
                                if (isNaN(valAmount)) {

                                    valAmount = 0.00;
                                }

                                $(hdnSTaxAm).val(staxAmt.toFixed(2));
                                $(txtGvStaxAmount).val(staxAmt.toFixed(2));
                                $(hdnSTaxGL).val(staxAmtGL);
                                totamt = valAmount + staxAmt;
                                if (isGst == 1) {
                                    totamt = totamt + gtaxAmt;
                                }
                                $(lblAmountWithTax).text(totamt.toFixed(2));
                                $(hdnAmountWithTax).val(totamt.toFixed(2));
                            }
                            CalculateTotalAmt();

                        }

                    }
                });

            },
            error: function (result) {
                alert("Due to unexpected errors we were unable to load account name");
            }
        });

        notyConfirm(selectedValue);

    }
    function disablekeys() {
        return false;
    }
    function CalculateTotalUseTaxExpense() {

        var tAmount = 0.00;
        var totalTax = 0.00;
        $("[id*=txtGvUseTax]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    totalTax = totalTax + parseFloat($(this).val());
                    var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    if (totalAmount != null && totalAmount != "") {
                        tAmount = tAmount + parseFloat(totalAmount) * parseFloat($(this).val()) / 100;
                    }
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });

        $("#lblTotalUseTax").text(tAmount.toFixed(2));
    }
    function CalculateTotalAmtSST() {
        var tAmountstax = 0.00;

        //$("[id*=hdnSTaxAm]").each(function () {

        //    if (!jQuery.trim($(this).val()) == '') {
        //        if (!isNaN(parseFloat($(this).val()))) {

        //            //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
        //            //if (totalAmount != null && totalAmount != "") {
        //                tAmountstax = tAmountstax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
        //            //}
        //        } else
        //            $(this).val('');
        //    }
        //    else {
        //        $(this).val('');
        //    }
        //});
        $("[id*=txtGvStaxAmount]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    //if (totalAmount != null && totalAmount != "") {
                    tAmountstax = tAmountstax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                    //}
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });


        $('[id*=lblSalesTaxTotal]').text(tAmountstax.toFixed(2));

        var tAmountgsttax = 0.00;
        $("[id*=lblGstTax]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    //if (totalAmount != null && totalAmount != "") {
                    tAmountgsttax = tAmountgsttax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                    //}
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });


        $('[id*=lblGstTaxTotal]').text(tAmountgsttax.toFixed(2));

        if (isNaN(tAmountstax)) {

            tAmountstax = 0.00;
        }
        if (isNaN(tAmountgsttax)) {

            tAmountgsttax = 0.00;
        }

        tAmountamttax = parseFloat(tAmountstax.toFixed(2)) + parseFloat(tAmountgsttax.toFixed(2));
        var totactualamt = 0.00;
        totactualamt = parseFloat($('[id*=lblAmountPerTotalGrid]').text());
        tAmountamttax = tAmountamttax + totactualamt;
        //$("[id*=lblAmountWithTax]").each(function () {

        //    if (!jQuery.trim($(this).text()) == '') {
        //        if (!isNaN(parseFloat($(this).text()))) {

        //            //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
        //            //if (totalAmount != null && totalAmount != "") {
        //                tAmountamttax = tAmountamttax + parseFloat($(this).text().replace(/[\$\(\),]/g, ''));
        //            //}
        //        } else
        //            $(this).text('');
        //    }
        //    else {
        //        $(this).text('');
        //    }
        //});


        $('[id*=lblAmountWithTaxTotal]').text(tAmountamttax.toFixed(2));
    }
    function CalculateTotalAmt() {
        var tAmount = 0.00;
        $("[id*=txtGvAmount]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    if (totalAmount != null && totalAmount != "") {
                        tAmount = tAmount + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                    }
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });

        $("#lblTotalAmount").text(tAmount.toFixed(2));
        $('[id*=lblTotalAmt]').text(tAmount.toFixed(2));
        $('[id*=lblAmountPerTotalGrid]').text(tAmount.toFixed(2));

        var totalQty = 0.00;
        $("[id*=txtGvQuan]").each(function () {
            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {
                    totalQty = totalQty + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });
        $('[id*=lblTotalQty]').text(totalQty.toFixed(2));
        //$('[id*=lblTotalQty]').text(cleanUpCurrency(parseFloat(totalQty).toLocaleString("en-US", { minimumFractionDigits: 0 })));


        //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
        //lblGstTax = $(cb.replace('chkTaxable', 'lblGstTax'));
        //lblAmount = $(cb.replace('chkTaxable', 'lblAmount'));

        var tAmountstax = 0.00;

        //$("[id*=hdnSTaxAm]").each(function () {

        //    if (!jQuery.trim($(this).val()) == '') {
        //        if (!isNaN(parseFloat($(this).val()))) {

        //            //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
        //            //if (totalAmount != null && totalAmount != "") {
        //                tAmountstax = tAmountstax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
        //            //}
        //        } else
        //            $(this).val('');
        //    }
        //    else {
        //        $(this).val('');
        //    }
        //});
        $("[id*=txtGvStaxAmount]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    //if (totalAmount != null && totalAmount != "") {
                    tAmountstax = tAmountstax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                    //}
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });


        $('[id*=lblSalesTaxTotal]').text(tAmountstax.toFixed(2));

        var tAmountgsttax = 0.00;
        $("[id*=lblGstTax]").each(function () {

            if (!jQuery.trim($(this).val()) == '') {
                if (!isNaN(parseFloat($(this).val()))) {

                    //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
                    //if (totalAmount != null && totalAmount != "") {
                    tAmountgsttax = tAmountgsttax + parseFloat($(this).val().replace(/[\$\(\),]/g, ''));
                    //}
                } else
                    $(this).val('');
            }
            else {
                $(this).val('');
            }
        });


        $('[id*=lblGstTaxTotal]').text(tAmountgsttax.toFixed(2));

        var tAmountamttax = 0.00;

        //tAmountamttax = parseFloat(tAmountstax.toFixed(2)) + parseFloat(tAmountgsttax.toFixed(2));
        var totactualamt = 0.00;
        totactualamt = parseFloat($('[id*=lblAmountPerTotalGrid]').text());
        var totsaletaxamt = 0.00;
        totsaletaxamt = parseFloat($('[id*=lblSalesTaxTotal]').text());
        var totGSTtaxamt = 0.00;
        totGSTtaxamt = parseFloat($('[id*=lblGstTaxTotal]').text());


        if (isNaN(totsaletaxamt)) {

            totsaletaxamt = 0.00;
        }
        if (isNaN(totGSTtaxamt)) {

            totGSTtaxamt = 0.00;
        }

        tAmountamttax = totactualamt + totsaletaxamt + totGSTtaxamt;
        //$("[id*=lblAmountWithTax]").each(function () {

        //    if (!jQuery.trim($(this).text()) == '') {
        //        if (!isNaN(parseFloat($(this).text()))) {

        //            //var totalAmount = jQuery(this).parent().parent().find('.clsAmount').val();
        //            //if (totalAmount != null && totalAmount != "") {
        //                tAmountamttax = tAmountamttax + parseFloat($(this).text().replace(/[\$\(\),]/g, ''));
        //            //}
        //        } else
        //            $(this).text('');
        //    }
        //    else {
        //        $(this).text('');
        //    }
        //});


        $('[id*=lblAmountWithTaxTotal]').text(tAmountamttax.toFixed(2));
        $("#lblTotalAmount").text(tAmountamttax.toFixed(2));
        CalculateTotalUseTaxExpense();
    }
    //////////////////////To make row's textbox visible///////////////////////////////////////////
    function VisibleRow(row, txt, gridview, event) {
        var rowst = $(row)

        var grid = $(gridview);
        $('#' + gridview + ' input:text.non-trans').each(function () {
            $(this).removeClass("non-trans");
            $(this).addClass("texttransparent");
        });
        $('#' + gridview + ' select.non-trans').each(function () {
            $(this).removeClass("non-trans");
            $(this).addClass("texttransparent");
        });

        var txtGvAcctNo = $(txt);
        $(txtGvAcctNo).removeClass("texttransparent");
        $(txtGvAcctNo).addClass("non-trans");

        var txtGvDesc = $(txt.replace('txtGvAcctNo', 'txtGvDesc'));
        $(txtGvDesc).removeClass("texttransparent");
        $(txtGvDesc).addClass("non-trans");

        var txtGvAmount = $(txt.replace('txtGvAcctNo', 'txtGvAmount'));
        $(txtGvAmount).removeClass("texttransparent");
        $(txtGvAmount).addClass("non-trans");

        var txtGvUseTax = $(txt.replace('txtGvAcctNo', 'txtGvUseTax'));
        $(txtGvUseTax).removeClass("texttransparent");
        $(txtGvUseTax).addClass("non-trans");

        var txtGvLoc = $(txt.replace('txtGvAcctNo', 'txtGvLoc'));
        $(txtGvLoc).removeClass("texttransparent");
        $(txtGvLoc).addClass("non-trans");

        var txtGvJob = $(txt.replace('txtGvAcctNo', 'txtGvJob'));
        $(txtGvJob).removeClass("texttransparent");
        $(txtGvJob).addClass("non-trans");

        var txtGvPhase = $(txt.replace('txtGvAcctNo', 'txtGvPhase'));
        $(txtGvPhase).removeClass("texttransparent");
        $(txtGvPhase).addClass("non-trans");

        var txtGvItem = $(txt.replace('txtGvAcctNo', 'txtGvItem'));
        $(txtGvItem).removeClass("texttransparent");
        $(txtGvItem).addClass("non-trans");

        var lblSalesTax = $(txt.replace('txtGvAcctNo', 'lblSalesTax'));
        $(lblSalesTax).removeClass("texttransparent");
        $(lblSalesTax).addClass("non-trans");

    }
    /////////////////////////////////////////////////////////////////////////////
    ////////////// To check is entered charcter is number or not//////////////
    function isNum(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    //////////////// To make textbox value decimal ///////////////////////////
    function isDecimalKey(el, evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;

        if (charCode == 45) {
            return true;
        }

        var number = el.value.split('.');
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }

        if (number.length > 1 && charCode == 46) {
            return false;
        }
        var caratPos = getSelectionStart(el);
        var dotPos = el.value.indexOf(".");
        if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
            return false;
        }
        return true;
    }
    function enableamount(txt) {

        txt.removeAttribute('readonly');

    }
    function getSelectionStart(o) {
        if (o.createTextRange) {
            var r = document.selection.createRange().duplicate()
            r.moveEnd('character', o.value.length)
            if (r.text == '') return o.value.length
            return o.value.lastIndexOf(r.text)
        } else return o.selectionStart
    }

    //////////////////Calculate Due date based on Due In field///////////////////
    function changeDueDate1() {
        if ($("#txtDueIn").val() == '') {
            $("#txtDueIn").val("0");
        }

        var dueIn = parseInt($("#txtDueIn").val());
        //var today = new Date();

        var today = new Date();
        if ($("#txtDate").val() != '') {
            today = new Date($("#txtDate").val());
        }
        var dueDate = new Date(today);
        dueDate.setDate(today.getDate() + dueIn);
        var d = dueDate.getDate();
        if (d < 10) d = '0' + d;
        var m = dueDate.getMonth() + 1;
        if (m < 10) m = '0' + m;
        var y = dueDate.getFullYear();

        $("#txtDueDate").val(m + '/' + d + '/' + y);
    }

    function changeDueDate() {
        var PostDate = new Date;
        var DueDate = new Date;
        if ($("#txtDate").val() != '') {
            PostDate = new Date($("#txtDate").val());
        }
        if ($("#txtDueDate").val() != '') {
            DueDate = new Date($("#txtDueDate").val());
        }
        var diffDays = parseInt((DueDate - PostDate) / (1000 * 60 * 60 * 24));


        $("#txtDueIn").val(diffDays);




    }
    function ChkVendor(sender, args) {
        var hdnVendorID = $("#hdnVendorID");
        if (hdnVendorID.val() == '') {
            args.IsValid = false;
        }
    }
    (function ($) {
        $.extend({
            toDictionary: function (query) {
                var parms = {};
                var items = query.split("&");
                for (var i = 0; i < items.length; i++) {
                    var values = items[i].split("=");
                    var key1 = decodeURIComponent(values.shift().replace(/\+/g, '%20'));
                    var key = key1.split('$')[key1.split('$').length - 1];
                    var value = values.join("=")
                    parms[key] = decodeURIComponent(value.replace(/\+/g, '%20'));
                }
                return (parms);
            }
        })
    })(jQuery);
    (function ($) {
        $.fn.serializeFormJSON = function () {
            var o = [];
            $(this).find('tr:not(:first, :last)').each(function () {
                var elements = $(this).find('input, textarea, select')
                if (elements.size() > 0) {
                    var serialized = $(this).find('input, textarea, select').serialize();
                    var item = $.toDictionary(serialized);
                    o.push(item);
                }
            });
            return o;
        };
    })(jQuery);
    function itemJSON() {

        var rawData = $("#RadGrid_gvJobCostItems").serializeFormJSON();
        var formData = JSON.stringify(rawData);
        $("#hdnGLItem").val(formData);
    }

    function InitializeGrids(Gridview) {

        $("#" + Gridview).on('click', 'a.addButton', function () {
            var $tr = $(this).closest('table').find('tr').eq(1);
            var $clone = $tr.clone();
            $clone.find('input:text').val('');
            $clone.insertAfter($tr.closest('table').find('tr').eq($tr.closest('table').find('tr').length - 2));
        });

        var rowone = $("#" + Gridview).find('tr').eq(1);
        $("input", rowone).each(function () {
            $(this).blur();
        });
    }
    $("#txtVendor").keyup(function (event) {
        var hdnVendorID = $("#hdnVendorID");
        if ($("#txtVendor").val() == '') {
            hdnVendorID.val('');
        }
    });
    function addedItem(item, itemId, phaseId, typeId, type, fdesc) {
        noty({
            text: 'BOM Item added successfully!',
            type: 'success',
            layout: 'topCenter',
            closeOnSelfClick: false,
            timeout: 5000,
            theme: 'noty_theme_default',
            closable: true
        });

        var rowItem = $("#hdnRowField").val();
        var rowItemId = $(rowItem.replace('txtGvItem', 'hdnItemID'));
        var rowDesc = $(rowItem.replace('txtGvItem', 'txtGvDesc'));
        var rowPhase = $(rowItem.replace('txtGvItem', 'txtGvPhase'));
        var rowPid = $(rowItem.replace('txtGvItem', 'hdnPID'));
        var rowtid = $(rowItem.replace('txtGvItem', 'hdnTypeId'));

        $(rowItem).val(item);
        $(rowItemId).val(itemId);
        $(rowDesc).val(fdesc);
        $(rowPhase).val(type);
        $(rowPid).val(phaseId);
        $(rowtid).val(typeId);

        //window.parent.$('btnCancel').click();
    }

    function aceItem_itemSelected(sender, e) {
        var hdnItemID = $("#hdnItemID");
        if (e.get_value() != "0") {
            hdnItemID.value = e.get_value();
            $("#txtItem").val("");
        }
    }
    function SetContextKey() {
        var value = $get("#ddlBomType").val();
        $find("#AutoCompleteExtender3").set_contextKey($get("#ddlBomType").val());
    }
    function cancel() {
        window.parent.$('btnCancel').click();
        var rowItem = $("#hdnRowField").val();
        var rowItemId = $(rowItem.replace('txtGvItem', 'hdnItemID'));
        var rowPhase = $(rowItem.replace('txtGvItem', 'txtGvPhase'));
        var rowPid = $(rowItem.replace('txtGvItem', 'hdnPID'));
        var rowtid = $(rowItem.replace('txtGvItem', 'hdnTypeId'));

        $(rowItem).val('');
        $(rowItemId).val('');
        $(rowPhase).val('');
        $(rowPid).val('');
        $(rowtid).val('');

        ResetBom();
    }
    function ResetBom() {
        $("#txtBudgetUnit").val('0.00');
        $("#lblBudgetExt").val('0.00');
        $("#txtQty").val('0.00');
        $("#txtOpSeq").val('');
        $("#txtItem").val('');
        $("#hdnItemID").val('');
        $("#txtJobDesc").val('');
        $("#txtUM").val('');
        $("#ddlBomType").val('0');
    }
</script>
<script type="text/javascript">

    $(document).ready(function () {

        ///////////// Ajax call for vendor auto search ////////////////////
        var query = "";
        function dtaa() {
            this.prefixText = null;
            this.con = null;
            this.Acct = null;
        }
        $("[id*=txtGvUseTax]").keypress(function (e) {
            var keyCode = e.which;
            /*
              8 - (backspace)
              32 - (space)
              48-57 - (0-9)Numbers
            */

            //if ( (keyCode != 8 || keyCode ==32 ) && (keyCode < 48 || keyCode > 57)) {
            return false;
            //}
        });
        $("[id*=txtTotalUseTax]").keypress(function (e) {
            var keyCode = e.which;
            /*
              8 - (backspace)
              32 - (space)
              48-57 - (0-9)Numbers
            */

            //if ( (keyCode != 8 || keyCode ==32 ) && (keyCode < 48 || keyCode > 57)) {
            return false;
            //}
        });
        $("[id*=lblSalesTax]").keypress(function (e) {
            var keyCode = e.which;
            /*
              8 - (backspace)
              32 - (space)
              48-57 - (0-9)Numbers
            */

            //if ( (keyCode != 8 || keyCode ==32 ) && (keyCode < 48 || keyCode > 57)) {
            return false;
            //}
        });
        $("#txtVendor").autocomplete({

            open: function (e, ui) {
                /* create the scrollbar each time autocomplete menu opens/updates */
                $(".ui-autocomplete").mCustomScrollbar({
                    setHeight: 182,
                    theme: "dark-3",
                    autoExpandScrollbar: true
                });
            },
            response: function (e, ui) {
                /* destroy the scrollbar after each search completes, before the menu is shown */
                $(".ui-autocomplete").mCustomScrollbar("destroy");
            },
            source: function (request, response) {

                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetVendorName",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load vendor name");
                    }
                });
            },
            select: function (event, ui) {
                var str = ui.item.Name;
                if (str == "No Record Found!") {
                    $("#txtVendor").val("");
                }
                else {



                    $("#txtVendor").val(ui.item.Name);
                    $("#hdnVendorID").val(ui.item.ID);

                    $("#txtPaid").val(ui.item.Days);
                    $("#txtDueIn").val(ui.item.Term);
                    $("#txtVendorType").val(ui.item.Type);

                    if ($('txtqstgv').css('display', 'block')) {

                        $("#txtqst").text(ui.item.STax);
                        $("#hdnQST").val(ui.item.STaxRate);
                        $("#hdnQSTGL").val(ui.item.STaxGL);
                        $("#hdnSTaxType").val(ui.item.STaxType);
                        $("#hdnSTaxName").val(ui.item.STaxName);
                        $("#hdnSTaxState").val(ui.item.VState);


                        var dtaaa = new dtaa();
                        dtaaa.prefixText = $("#hdnSTaxState").val();
                        //query = request.term;
                        $("[id*=lblSalesTax]").autocomplete(dtaaa);

                        $("#btnStaxType").click();

                    }
                    else {
                        $("#txtqst").text("0");
                        $("#hdnQST").val("0");
                        $("#hdnQSTGL").val("0");
                        $("#hdnSTaxType").val("0");
                        $("#hdnSTaxName").val("0");
                        $("#hdnSTaxState").val("");
                    }

                    if ($('txttaxcodegv').css('display', 'block')) {
                        $("#txtusetaxc").text(ui.item.UTax);
                        $("#hdnusetaxc").val(ui.item.UTaxRate);
                        $("#hdnusetaxcGL").val(ui.item.SUaxGL);
                        $("#hdnUTaxType").val(ui.item.UTaxType);
                        $("#hdnUTaxName").val(ui.item.UtaxName);
                    }
                    else {
                        $("#txtusetaxc").text("0");
                        $("#hdnusetaxc").val("0");
                        $("#hdnusetaxcGL").val("0");
                        $("#hdnUTaxType").val("0");
                        $("#hdnUTaxName").val("0");
                    }




                    if ($("#txtDueIn").val() != '') {
                        var newduedt = new Date();
                        newduedt.setDate(newduedt.getDate() + parseInt($("#txtDueIn").val()));
                        var dd = newduedt.getDate();
                        var mm = newduedt.getMonth() + 1;
                        var y = newduedt.getFullYear();
                        if (parseInt(dd) < 10) { dd = "0" + dd; }
                        if (parseInt(mm) < 10) { mm = "0" + mm; }
                        var someFormattedDate = mm + '/' + dd + '/' + y;
                        $("#txtDueDate").val(someFormattedDate);
                    }

                }

                return false;
            },
            focus: function (event, ui) {


                $("#txtVendor").val(ui.item.Name);

                return false;
            },
            minLength: 0,
            delay: 250
        })
            .data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.ID;
                var result_item = item.Name;
                var result_Company = item.Company;
                var result_desc = item.desc;

                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span>' + FullMatch + '</span>'
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span>' + FullMatch + '</span>'
                    });
                }
                if (result_value == 0) {

                    return $("<li></li>")
                        .data("ui-autocomplete-item", item)
                        .append("<span class='auto_item'>" + result_item + "</span> <span class='auto_desc'>" + result_desc + "</span>")
                        .appendTo(ul);
                }
                else {
                    var append_data = "";
                    //Premission Check.....
                    var chk = '<% Convert.ToString(Session["COPer"]) %>';
                    if (chk == "1") {
                        append_data = "<span class='auto_item'>" + result_item + "</span> <span class='auto_desc'>" + result_desc + "</span>" + "<span class='con_hide' style='color:Gray;'> ," + result_Company + "</span></a>";
                    }
                    else {
                        append_data = "<span class='auto_item'>" + result_item + "</span> <span class='auto_desc'>" + result_desc + "</span>";
                    }

                    return $("<li ></li>")
                        .data("ui-autocomplete-item", item)
                        .append(append_data)
                        .appendTo(ul);
                }
            };
    });
    function openfileDialog() {
        $("#FileUploadControl").click();
    }
    function UploadFile(fileUpload) {
        if (fileUpload.val() != '') {
            $("#lnkFileUploaded").click();
        }
    }

    function KeyPressed(sender, eventArgs) {
        //debugger
        if (eventArgs.get_keyCode() == 40) {
            $("#btnAddNewLines").click();
            return false;
        }
    }

    $(window.document).keydown(function (event) {
        if (event.which == 117) {
            $("#btnCopyPrevious").click();
            return false;
        }
    })

    function resetIndexF6() {
        //debugger
        var hdnSelectPOIndex = $("#hdnSelectPOIndex");
        $(hdnSelectPOIndex).val(-1);
    }

    function checkPORPO() {
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "AccountAutoFill.asmx/GetIsSalesTaxAPBill",
            //data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + false + '", "con": "' + dtaaa.con + '"}',
            dataType: "json",
            async: true,
            success: function (data) {
                //response($.parseJSON(data.d));
                var ui = JSON.parse(data.d);

                if (ui.length > 0) {
                    var IsSalesTaxAPBill = ui[0].IsSalesTaxAPBill;
                    var IsUseTaxAPBill = ui[0].IsUseTaxAPBill;
                    if (IsSalesTaxAPBill == "1") {


                        $('txtqstgv').css('display', 'block');
                        //$('txtgstgv').style.display = 'block';
                    } else {



                        $('txtqstgv').css('display', 'none');
                        //$('txtgstgv').style.display = 'none';
                    }

                    if (IsUseTaxAPBill == "1") {
                        $('txttaxcodegv').css('display', 'none');

                    } else {

                        $('txttaxcodegv').css('display', 'none');

                    }
                    if (IsUseTaxAPBill == "1") {
                        $('txtusetaxcodegv').css('display', 'block');

                    } else {

                        $('txtusetaxcodegv').css('display', 'none');

                    }

                    //$(txtGvAcctName).val(ui[0].DefaultAcct);
                }


            },
            error: function (result) {
                alert("Due to unexpected errors we were unable to load phase details");
            }
        });
    }
</script>

<div style="height: 65px !important;">
    <div id="divButtons">
        <div id="breadcrumbs-wrapper">
            <header>
                <div class="container row-color-grey">
                    <div class="row">
                        <div class="col s12 m12 l12">
                            <div class="row">
                                <div class="page-title">
                                    <i class="mdi-editor-attach-money"></i>&nbsp;
                                    <label class="title_text" ID="lblHeader">Enter Bills</label>
                                    <label class="title_text_Name" ID="lblUserName"></label>
                                </div>
                                <div class="btnlinks">
                                    <a ID="btnSubmit" ToolTip="Save" CausesValidation="true"
                                       ValidationGroup="bills" onclick="disableButton(this,'bills'); javascript:return ConfirmRef(this); itemJSON();">Save</a>
                                </div>
                                <div class="btnlinks">
                                    <a ID="btnSubmitJob" ToolTip="Save Project Specific Details" CausesValidation="true"
                                       ValidationGroup="bills" onclick="disableButton(this,'bills'); itemJSON();" Visible="false">Update Project</a>
                                </div>
                                <div class="btnlinks">
                                    <a id="aImport" class="dropdown-button" data-beloworigin="true" href="javascript:void(0)" data-activates="dynamicUI">Import</a>
                                    <a ID="lnkQuickCheck" ToolTip="Quick Check" CausesValidation="true"
                                       ValidationGroup="bills" onclick="disableButton(this,'bills'); javascript:return ConfirmRef(this); itemJSON();">Quick Check</a>
                                    <input type="file" ID="FileUploadControl" class="hidden" onchange="UploadFile(this);" />
                                    <a ID="lnkFileUploaded" class="hidden">Import Items</a>
                                </div>

                                <ul id="dynamicUI" class="dropdown-content">
                                    <li><a id="btnImportItems" title="Import Items" href="javascript:void(0)" onclick="openfileDialog();">Upload File</a></li>
                                    <li>
                                        <a ID="btnDownloadCSV">CSV Template</a>
                                    </li>
                                    <li>
                                        <a ID="btnDownloadExcel">Excel Template</a>
                                    </li>
                                </ul>

                                <div class="rght-content">
                                    <div class="btnclosewrap">
                                        <a ID="lnkClose" CausesValidation="false" ToolTip="Close"><i class="mdi-content-clear"></i></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
        </div>

        <div class="container breadcrumbs-bg-custom">
            <div class="row">
                <div class="col s12 m12 l12">
                    <div class="row">
                        <div class="tblnks">
                            <div ID="pnlSave">
                                <ul class="anchor-links">
                                    <li><a href="#accrdBills">Bill Details</a></li>
                                    <li id="liHistoryPayment" onclick="scrollToAnchor();return false;">
                                        <a href="#accrdPayment">Payment History</a>
                                    </li>
                                    <li id="liLogs"><a href="#accrdlogs">Logs</a></li>
                                </ul>
                            </div>
                        </div>
                        <div class="tblnksright">
                            <div class="nextprev">
                                <div ID="pnlNext" Visible="False">
                                    <span class="angleicons">
                                        <a ID="lnkFirst" ToolTip="First" CausesValidation="False">
                                            <i class="fa fa-angle-double-left"></i>
                                        </a>
                                    </span>
                                    <span class="angleicons">
                                        <a ID="lnkPrevious" ToolTip="Previous" CausesValidation="False">
                                            <i class="fa fa-angle-left"></i>
                                        </a>
                                    </span>
                                    <span class="angleicons">
                                        <a ID="lnkNext" ToolTip="Next" CausesValidation="False">
                                            <i class="fa fa-angle-right"></i>
                                        </a>
                                    </span>
                                    <span class="angleicons">
                                        <a ID="lnkLast" ToolTip="Last" CausesValidation="False">
                                            <i class="fa fa-angle-double-right"></i>
                                        </a>
                                    </span>
                                </div>
                                <div ID="pnlRecurring" style="display: flex;">
                                    <span class="angleicons" style="padding-top: 15px;">
                                        <span class="css-checkbox">
                                            <input type="checkbox" ID="chkPOClose" style="padding-right: 10px;" Visible="false" />
                                            <label for="chkPOClose">Close PO</label>
                                        </span>
                                    </span>
                                    <span class="angleicons" style="padding-top: 15px;">
                                        <span class="css-checkbox">
                                            <input type="checkbox" ID="chkIsRecurr" onclick="showfreq();" />
                                            <label for="chkIsRecurr">Is Recurring</label>
                                        </span>
                                    </span>
                                    <span class="angleicons" style="width: 150px; display:block" id="dvfreq">
                                        <select ID="ddlFrequency" class="browser-default">
                                            <option>Select</option>
                                        </select>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>


    </div>
</div>
<div class="container">
    <div class="alert alert-success" id="divSuccess">
        <button type="button" class="close" data-dismiss="alert">×</button>
        These month/year period is closed out. You do not have permission to add/update this record.
    </div>
    <div class="row">
        <div class="col s12 m12 l12" id="accrdBills">
            <div class="row">
                <div class="card cardradius">
                    <div class="card-content" style="padding-top: 10px;">
                        <div class="form-content-wrap">
                            <div class="form-content-pd">
                                <div class="form-section-row">
                                    @Html.Hidden("hdnRowField")
                                    @Html.Hidden("hdnBatch")
                                    @Html.Hidden("hdnTransID")
                                    @Html.Hidden("hdnStatus")
                                    @Html.Hidden("hdnGLItem")
                                    @Html.Hidden("hdnInvDefaultAcctID", "")
                                    @Html.Hidden("hdnInvDefaultAcctName", "")
                                    <input type="button" ID="btnSelectPo" CausesValidation="False"
                                           Style="display: none;" value="Button" />
                                    <input type="button" ID="btnSelectRPo" CausesValidation="False"
                                           Style="display: none;" value="Button" />
                                    <input type="button" ID="btnStaxType" CausesValidation="False" onclick="itemJSON();"
                                           Style="display: none;" value="Button" />
                                    <input type="button" ID="btnUpdtStax" CausesValidation="False" onclick="itemJSON();"
                                           Style="display: none;" value="Button" />

                                    <div class="col s12 m12 l12">
                                        <div class="row">
                                            <div class="form-section-row">
                                                <div class="form-input-row" style="margin-left: 8px;" id="divBillInfo">
                                                    <div class="form-section3-div4">
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtVendor" MaxLength="75"
                                                                       placeholder="Search by vendor" />
                                                                @Html.Hidden("hdnVendorID")
                                                                @Html.Hidden("hdEditCase", "false")
                                                                <label for="txtVendor" class="active">Vendor</label>
                                                            </div>
                                                        </div>

                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtPO" class="posearchinput"
                                                                       MaxLength="15" placeholder="PO#" />

                                                                @Html.Hidden("hdnPO")
                                                                @Html.Hidden("hdnReceivedAmount")
                                                                @Html.Hidden("hdnTotalAmount")

                                                                <label for="txtPO" class="active">PO#</label>
                                                            </div>
                                                        </div>

                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtReceptionId" class="form-control rposearchinput" TabIndex="2"
                                                                       MaxLength="15" placeholder="RPO#" />
                                                                <label for="txtReceptionId" class="active">Reception No#</label>
                                                            </div>
                                                        </div>

                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtRef" class="form-control" TabIndex="2" MaxLength="50" onfocusout="ConfirmRef(this)" />
                                                                <label for="txtRef" class="active">Ref No.</label>
                                                            </div>
                                                        </div>

                                                        <div class="input-field col s12 pdrt lblfield" id="txtgstgv">
                                                            <div class="row">
                                                                <span class="ttlab">GST %</span>
                                                                <span class="ttlval">
                                                                    <label ID="txtgst">0.00</label>
                                                                </span>
                                                                @Html.Hidden("hdnGSTGL")
                                                                @Html.Hidden("hdnGST")
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12 pdrt lblfield" style="display:block;" id="txttaxcodegv">
                                                            <div class="row">
                                                                <span class="ttlab">Use Tax</span>
                                                                <span class="ttlval">
                                                                    <label ID="txtusetaxc">0.00</label>
                                                                </span>
                                                                @Html.Hidden("hdnusetaxcGL")
                                                                @Html.Hidden("hdnusetaxc")
                                                                @Html.Hidden("hdnUTaxType")
                                                                @Html.Hidden("hdnUTaxName")
                                                            </div>
                                                        </div>

                                                    </div>
                                                    <div class="form-section3-div4blank">
                                                        &nbsp;
                                                    </div>
                                                    <div class="form-section3-div4">

                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtVendorType" placeholder="  " />
                                                                <label for="txtVendorType" class="active">Vendor Type</label>
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <label>Date</label>
                                                                <input type="text" ID="txtDate" class="datepicker_mom" onchange="changeDueDate();" />
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtPostingDate" class="datepicker_mom"
                                                                       MaxLength="15" />
                                                                <label ID="lblPostingDate" for="txtPostingDate">Posting Date</label>
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <label>Due</label>
                                                                <input type="text" ID="txtDueDate" class="datepicker_mom" onchange="changeDueDate()" MaxLength="15" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="form-section3-div4blank">
                                                        &nbsp;
                                                    </div>
                                                    <div class="form-section3-div4">
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <div class="input-field col s5">
                                                                    <div class="row">
                                                                        <input type="text" ID="txtDueIn"
                                                                               MaxLength="3" onkeypress="return isNum(event)" onchange="changeDueDate1();" />
                                                                        <label for="txtDueIn">Due In</label>
                                                                    </div>
                                                                </div>

                                                                <div class="input-field col s2">
                                                                    <div class="row">
                                                                        &nbsp;
                                                                    </div>
                                                                </div>
                                                                <div class="input-field col s5">
                                                                    <div class="row">
                                                                        <input type="text" ID="txtPaid"
                                                                               MaxLength="2" onkeypress="return isNum(event)" />
                                                                        <label for="txtPaid" class="active">If Paid</label>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtDisc"
                                                                       MaxLength="3" />
                                                                <label for="txtDisc">% Disc</label>
                                                            </div>
                                                        </div>

                                                        <div class="input-field col s12 pdrt lblfield">
                                                            <div class="row">
                                                                <span class="ttlab">Total</span>
                                                                <span class="ttlval">$<label ID="lblTotalAmount"></label></span>
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12" style="display:block;" id="txtusetaxcodegv">
                                                            <div class="row">
                                                                <label for="drpdwn-label">Select Use Tax</label>
                                                                <input type="text" ID="txtTotalUseTax" class="form-control  clsUseTax tsearchTotalUseTax" MaxLength="15" onblur="CalculateUseTaxTotal(this);" />
                                                                @Html.Hidden("husetaxGL")
                                                                @Html.Hidden("husetaxName")
                                                                @Html.Hidden("husetaxRate")
                                                            </div>
                                                            <div class="srchclr btnlinksicon rowbtn">
                                                                $
                                                                <label ID="lblTotalUseTax"></label>
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12" style="display:block;" id="txtqstgv">
                                                            <div class="row">
                                                                <span class="ttlval" style="display:block;">
                                                                    <label ID="txtqst" Text="0.00"></label>
                                                                </span>
                                                                @Html.Hidden("hdnQSTGL")
                                                                @Html.Hidden("hdnQST")
                                                                @Html.Hidden("hdnSTaxType")
                                                                @Html.Hidden("hdnSTaxName")
                                                                @Html.Hidden("hdnSTaxState")
                                                                @Html.Hidden("hdnUpdateStax")
                                                                <label class="drpdwn-label" id="spansalestax">Sales Tax</label>
                                                                <select ID="ddlSTax" class="browser-default" onchange="GetSelectedSTax(this)">
                                                                    <option>Select</option>
                                                                </select>
                                                            </div>
                                                        </div>

                                                    </div>
                                                    <div class="form-section3-div4blank">
                                                        &nbsp;
                                                    </div>
                                                    <div class="form-section3-div4">
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <select ID="ddlStatus" class="browser-default">
                                                                    <option>Select</option>
                                                                </select>

                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtMemo" />
                                                                <label for="txtMemo" class="active">Memo</label>
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtCustom1" MaxLength="50" />
                                                                <label id="lb_txtCustom1" for="textarea1">Custom1</label>
                                                            </div>
                                                        </div>
                                                        <div class="input-field col s12">
                                                            <div class="row">
                                                                <input type="text" ID="txtCustom2" MaxLength="50" />
                                                                <label id="lb_txtCustom2" for="txtCustom2">Custom2</label>
                                                            </div>
                                                        </div>

                                                        <div class="input-field col s12">
                                                            <div class="row">

                                                                <input type="image" ID="imgPaid" src="~/MOMUI/Design/images/paid.png" style="height:40px" onclick="scrollToAnchor();return false;" />
                                                                <img ID="imgVoid" src="~/MOMUI/Design/images/void.png" style="height:40px" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="cf"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid_container" style="overflow-y:scroll;">
            <div class="form-section-row" style="margin-bottom: 0 !important;">
                <div class="RadGrid RadGrid_Material FormGrid">



                </div>
            </div>
        </div>
        <div class="btnlinks">
            <a ID="btnAddNewLines" CausesValidation="false" onclick="itemJSON();">Add New Lines</a>
            <a ID="btnCopyPrevious" CausesValidation="false" onclick="itemJSON();" style="display: block;">Copy Previous</a>
        </div>
        <div class="grid_container">
            <div class="form-section-row" style="margin-bottom: 0 !important;">
                <ul class="collapsible popout collapsible-accordion form-accordion-head" data-collapsible="expandable">
                    <li id="tblPayment" style="display: block">
                        <div id="accrdPayment" class="collapsible-header accrd accordian-text-custom"><i class="mdi-content-content-paste"></i>Payment History</div>
                        <div class="collapsible-body">
                            <div class="form-content-wrap">
                                <div class="form-content-pd">
                                    <div class="grid_container">
                                        <div class="form-section-row" style="margin-bottom: 0 !important;">
                                            <div class="RadGrid RadGrid_Material">


                                            </div>
                                        </div>
                                    </div>
                                    <div class="cf"></div>
                                </div>
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </li>


                    <li id="tbLogs">
                        <div id="accrdlogs" class="collapsible-header accrd active accordian-text-custom"><i class="mdi-content-content-paste"></i>Logs</div>
                        <div class="collapsible-body">
                            <div class="form-content-wrap">
                                <div class="form-content-pd">
                                    <div class="grid_container">
                                        <div class="form-section-row" style="margin-bottom: 0 !important;">
                                            <div class="RadGrid RadGrid_Material">

                                            </div>
                                        </div>
                                    </div>

                                    <div class="cf"></div>
                                </div>
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>


@Html.Hidden("hdOpSeqID")
@Html.Hidden("hdLineNo")
@Html.Hidden("hdnSelectPOIndex")
@Html.Hidden("hdnIsAutoCompleteSelected")

<div class="col-lg-12 col-md-12" style="display: block">
    <div class="com-cont">
        <div class="row">
            <div class="col-lg-12 col-md-12">
                @Html.Hidden("hdnJobId")
                <div class="form-col">
                    <div class="fc-label">
                        <label>Op Sequence</label>
                    </div>
                    <div class="fc-input">
                        <input type="text" ID="txtOpSeq" class="form-control" TabIndex="2" placeholder="Select Op Sequence"
                               MaxLength="50" onkeyup="EmptyValue(this);" />
                        <div id="lstAcct"></div>
                    </div>
                </div>
                <div class="form-col">
                    <div class="fc-label">
                        <label>Type</label>
                    </div>
                    <div class="fc-input">
                        <select ID="ddlBomType" DataTextField="Type" class="form-control" onchange="SetContextKey()">
                            <option>Select</option>
                        </select>
                    </div>
                </div>
                <div class="form-col">
                    <div class="fc-label">
                        <label>Item</label>
                    </div>
                    <div class="fc-input">
                        <input type="text" ID="txtItem" class="form-control" TabIndex="2" placeholder="Select Item" onkeyup="SetContextKey()" MaxLength="50" />
                        @Html.Hidden("hdnItemID")
                        <div id="lstItem"></div>
                    </div>
                </div>
                <div class="form-col">
                    <div class="fc-label">
                        <label>Description</label>
                    </div>
                    <div class="fc-input">
                        <input type="text" ID="txtJobDesc" class="form-control" TabIndex="2"
                               MaxLength="255" />
                    </div>
                </div>
                <div class="form-col">
                    <div class="fc-label">
                        <label>Qty Required</label>
                    </div>
                    <div class="fc-input">
                        <input type="text" ID="txtQty" class="form-control" TabIndex="2"
                               MaxLength="50" onkeypress="return isDecimalKey(this,event)" />
                    </div>
                </div>
                <div class="form-col">
                    <div class="fc-label">
                        <label>U/M</label>
                    </div>
                    <div class="fc-input">
                        <input type="text" ID="txtUM" class="form-control" TabIndex="2"
                               MaxLength="150" placeholder="Select U/M" />
                        <div id="lstUM"></div>
                    </div>
                </div>
                <div class="form-col">
                    <div class="fc-label">
                        <label>Budget Unit</label>
                    </div>
                    <div class="fc-input">
                        <input type="text" ID="txtBudgetUnit" class="form-control" TabIndex="2"
                               MaxLength="50" onkeypress="return isDecimalKey(this,event)" />
                    </div>
                </div>
                <div class="form-col">
                    <div class="fc-label">
                        <label>Budget Ext</label>
                    </div>
                    <div class="fc-input" style="padding-top: 5px;">
                        <label ID="lblBudgetExt">0.00</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script defer src="https://use.fontawesome.com/releases/v5.0.10/js/all.js"></script>
<script src="~/MOMUI/Design/js/moment.js"></script>
<script src="~/MOMUI/Design/js/pikaday.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        Materialize.updateTextFields();

        $(window).scroll(function () {
            if ($(window).scrollTop() >= 0) {
                $("#divButtons").addClass('fixed-header');
            }
            if ($(window).scrollTop() <= 0) {
                $("#divButtons").removeClass('fixed-header');
            }
        });

        //$.ajax({
        //    type: "POST",
        //    contentType: "application/json; charset=utf-8",
        //    url: "AccountAutoFill.asmx/GetIsSalesTaxAPBill",
        //    //data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + false + '", "con": "' + dtaaa.con + '"}',
        //    dataType: "json",
        //    async: true,
        //    success: function (data) {
        //        //response($.parseJSON(data.d));
        //        var ui = JSON.parse(data.d);

        //        if (ui.length > 0) {
        //            var IsSalesTaxAPBill = ui[0].IsSalesTaxAPBill;
        //            var IsUseTaxAPBill = ui[0].IsUseTaxAPBill;
        //            if (IsSalesTaxAPBill == "1") {


        //                $('txtqstgv').css('display', 'block');
        //                //$('txtgstgv').style.display = 'block';
        //            } else {



        //                $('txtqstgv').css('display', 'none');
        //                //$('txtgstgv').style.display = 'none';
        //            }

        //            if (IsUseTaxAPBill == "1") {
        //                $('txttaxcodegv').css('display', 'none');

        //            } else {

        //                $('txttaxcodegv').css('display', 'none');

        //            }
        //            if (IsUseTaxAPBill == "1") {
        //                $('txtusetaxcodegv').css('display', 'block');

        //            } else {

        //                $('txtusetaxcodegv').css('display', 'none');

        //            }

        //            //$(txtGvAcctName).val(ui[0].DefaultAcct);
        //        }


        //    },
        //    error: function (result) {
        //        alert("Due to unexpected errors we were unable to load phase details");
        //    }
        //});


    });


    function SetOpToHiddenPop() {
        var selectedLineNo = $("#hdLineNo").val();
        var lineItem = $("#lineItem999").val();
        $("#" + selectedLineNo).val(lineItem);

        var radwindow = $find("#RadWindowWarehouse");
        radwindow.close();
    }

    function OnClientCloseHandler(sender, args) {
        var selectedLineNo = $("#hdLineNo").val();
        var lineItem = $("#lineItem999").val();
        $("#" + selectedLineNo).val(lineItem);
    }
    function OnClientClosePOHandler(sender, args) {
    }

    function ClosePOWindow() {
        $("#btnSelectPo").click();
        var radwindow = $find("#RadWindowPO");
        radwindow.close();

    }

    function SetOpToHiddenField() {
        var selectedRow = $("#hdOpSeqID").val();
        var selectedLineNo = $("#hdLineNo").val();
        var selectedCode = $('input[name=opSquence]:checked').val();
        $("#" + selectedRow).val(selectedCode);
        var lineItem = $("#lineItem" + selectedCode).val();
        //alert(lineItem);
        $("#" + selectedLineNo).val(lineItem);

        var radwindow = $find("#RadWindowWarehouse");
        radwindow.close();
        $("#" + selectedLineNo).val(lineItem);
    }
</script>
<script>
    function pageLoad(sender, args) {
        function dtaa() {
            this.prefixText = null;
            this.vendor = null;
            this.con = null;
        }
        function makeReadonly(txt) {
            $("#" + txt.id).prop('readonly', true);
        }

        // Select row index for F6 function
        $("#RadGrid_gvJobCostItems tbody tr input:text, #RadGrid_gvJobCostItems tbody tr input:checkbox, #RadGrid_gvJobCostItems tbody tr select").on("focus", function (e) {
            // For F6
            var ctr = $(e)[0].target;
            var currRow = $(ctr).closest('tbody>tr');
            var hdnIndexVal = $(currRow).find("[id*=hdnIndex]").val();
            $("#hdnSelectPOIndex").val(hdnIndexVal);
            $(ctr).select();
            // Work around Chrome's little problem
            //$(ctr).onmouseup = function() {
            //    // Prevent further mouseup intervention
            //    $(ctr).onmouseup = null;
            //    return false;
            //};
        });

        // Focus out and autocomplete
        $("#txtQty").change(function () {
            var budgetunit = $("#txtBudgetUnit").val();
            var qty = $(this).val();
            if (budgetunit != "" && qty != "") {
                var budgetext = parseFloat(qty) * parseFloat(budgetunit);
                $("#lblBudgetExt").text(budgetext.toFixed(2));
            }
            if (budgetunit != "") {
                $("#txtBudgetUnit").val(parseFloat(budgetunit).toFixed(2));
            }
            if (qty != "") {
                $("#txtQty").val(parseFloat(qty).toFixed(2));
            }
        });
        $("#txtBudgetUnit").change(function () {
            var budgetunit = $(this).val();
            var qty = $("#txtQty").val();
            if (budgetunit != "" && qty != "") {
                var budgetext = parseFloat(qty) * parseFloat(budgetunit);
                $("#lblBudgetExt").text(budgetext.toFixed(2));
            }
            if (budgetunit != "") {
                $("#txtBudgetUnit").val(parseFloat(budgetunit).toFixed(2));
            }
            if (qty != "") {
                $("#txtQty").val(parseFloat(qty).toFixed(2));
            }
        });
        $("#txtVendor").keyup(function (event) {

            var hdnVendorID = $("#hdnVendorID");
            if ($("#txtVendor").val() == '') {
                hdnVendorID.val('');
            }
        });

        /////////////// $$$ GET PO $$$ /////////////////

        $("#txtPO").autocomplete({

            source: function (request, response) {
                var dta = new dtaa();
                dta.prefixText = request.term;
                if ($("#hdnVendorID").val() != '') {

                    dta.vendor = $("#hdnVendorID").val();
                }
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetPO",
                    data: JSON.stringify(dta),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                        var counting = JSON.parse(data.d).length;
                        if (counting == 1) {
                            x = $.parseJSON(data.d)[0].VendorName;
                            if (x == "No Record Found!") {
                                $(this).close();

                            }
                        }

                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load po");
                    }
                });
            },
            select: function (event, ui) {
                var str = ui.item.VendorName;
                if (str == "No Record Found!") {
                    $(this).val("");

                }
                else {
                    $(this).val(ui.item.PO);
                    $("#txtVendor").val(ui.item.VendorName);
                    $("#txtVendorType").val(ui.item.Type);
                    $("#hdnVendorID").val(ui.item.Vendor);
                    $("#hdnTotalAmount").val(ui.item.Amount);
                    $("#hdnReceivedAmount").val(ui.item.ReceivedAmount);
                    $("#hdnPO").val(ui.item.PO);

                    Materialize.updateTextFields();
                    if (ui.item.Status != "5") {
                        if (ui.item.POReceiveBy == "9") {
                            var radwindow = $find("#RadWindowPO");
                            radwindow.show();
                        }
                        else if (ui.item.POReceiveBy == "0") {
                            $('input[name=rdbyQty]').attr("disabled", true);
                            $('input[name=rdbyQty]').prop("checked", false);
                            $('input[name=rdbyAmt]').prop("checked", true);
                            $("#rdbyQty").attr("disabled", true);
                            var radwindow = $find("#RadWindowPO");
                            radwindow.show();
                        }
                        else if (ui.item.POReceiveBy == "1") {

                            $('input[name=rdbyAmt]').attr("disabled", true);
                            $('input[name=rdbyQty]').prop("checked", true);
                            $('input[name=rdbyAmt]').prop("checked", false);
                            $("#rdbyAmt").attr("disabled", true);
                            var radwindow = $find("#RadWindowPO");
                            radwindow.show();
                        }
                    }

                    $("#txtReceptionId").focus();

                    checkPORPO();
                }

                Materialize.updateTextFields();
                //alert("sdsdsd");
                return false;
            },
            focus: function (event, ui) {

                $(this).val(ui.item.PO);

                return false;
            },
            close: function () {
                if ($("#hdnVendorID").val() == "") {
                    noty({
                        text: 'PO doesn\'t exist!',
                        type: 'warning',
                        layout: 'topCenter',
                        closeOnSelfClick: false,
                        timeout: false,
                        theme: 'noty_theme_default',
                        closable: true
                    });
                }
                //$(this).val("");

                this.blur();

            },
            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })
        $.each($(".posearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {

                var ula = ul;
                var itema = item;
                var result_value = item.PO;
                var result_item = item.PO;

                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...

                return $("<li></li>")
                    .data("item.autocomplete", item)
                    .append("<a>" + result_item + "</a>")
                    .appendTo(ul);

            };
        });


        $("[id*=txtReceptionId]").autocomplete({
            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                dtaaa.PO = $("#txtPO").val();
                if ($("#hdnVendorID").val() != '') {
                    dtaaa.vendor = $("#hdnVendorID").val();
                }
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetReceivePOListSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                        var counting = JSON.parse(data.d).length;
                        if (counting == 1) {
                            x = $.parseJSON(data.d)[0].VendorName;
                            if (x == "No Record Found!") {
                                $(this).close();
                            }
                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load receive po");
                    }
                });
            },
            select: function (event, ui) {
                var str = ui.item.Value;
                if (str == "No Record Found!") {
                    $(this).val("");
                }
                else {
                    $(this).val(ui.item.Value);
                    $("#txtVendorType").val(ui.item.Type);
                    $("#btnSelectRPo").click();
                    // Thomas: moved this function into btnSelectRPo_Click
                    //checkPORPO();
                }
                return false;
            },
            focus: function (event, ui) {
                $(this).val(ui.item.Value);
                return false;
            },
            close: function () {
                //debugger
                //if ($(this).val() == "") {
                //    noty({
                //        text: 'PO Reception doesn\'t exist!',
                //        type: 'warning',
                //        layout: 'topCenter',
                //        closeOnSelfClick: false,
                //        timeout: false,
                //        theme: 'noty_theme_default',
                //        closable: true
                //    });
                //}
                //$(this).val("");
                //this.blur();
            },
            minLength: 0,
            delay: 250
        }).click(function () {
            //$(this).autocomplete('search', $(this).val())
        })
        $.each($(".rposearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var result_item = item.Value;
                var result_ReceiveDate = item.ReceiveDate;
                var result_RefNo = item.Ref;
                var result_desc = "";
                if (item.Ref != null) {
                    result_desc = "<a>" + result_item + ", <span style='color:Gray;'>" + result_RefNo + ", " + result_ReceiveDate + "</span></a>";
                } else {
                    result_desc = "<a>" + result_item + "</a>";
                }
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                return $("<li></li>")
                    .data("item.autocomplete", item)
                    // .append("<a>" + result_item + "</a>")
                    .append(result_desc)
                    .appendTo(ul);
            };
        });

        $("[id*=chkSelectAllGtax]").change(function () {
            //debugger;
            var ret = $(this).prop('checked');

            $("#RadGrid_gvJobCostItems").find('tr:not(:first, :last)').each(function () {
                var $tr = $(this);
                var chk = $tr.find('input[id*=chkGTaxable]');
                if (ret == true) {
                    chk.prop('checked', true);
                }
                else {
                    chk.prop('checked', false);
                }

                var ch_id = chk.attr('id');
                if (ch_id != undefined) {
                    if (ch_id != "ctl00_ContentPlaceHolder1_gvBills_ctl00_ctl02_ctl00_chkSelectAllGtax") {
                        CalTotalValGtax1(ch_id);
                    }
                }

            })

        });
        $("[id*=chkSelectAllStax]").change(function () {
            //debugger;
            var ret = $(this).prop('checked');

            $("#RadGrid_gvJobCostItems").find('tr:not(:first, :last)').each(function () {
                var $tr = $(this);
                var chk = $tr.find('input[id*=chkTaxable]');
                if (ret == true) {
                    chk.prop('checked', true);
                }
                else {
                    chk.prop('checked', false);
                }

                var ch_id = chk.attr('id');
                if (ch_id != undefined) {
                    if (ch_id != "ctl00_ContentPlaceHolder1_gvBills_ctl00_ctl02_ctl00_chkSelectAllStax") {
                        CalTotalValStax1(ch_id);
                    }
                }

            })

        });



        $("[id*=txtTotalUseTax]").autocomplete({

            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/getUseTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                if (ui.item.value == 0) {
                    $(this).val("");
                }
                else {
                    var txtGvUseTax = this.id;
                    $(this).val(ui.item.Rate);
                    $("#RadGrid_gvJobCostItems").find('tr:not(:first, :last)').each(function () {
                        var $tr = $(this);
                        if ($tr.find('input[id*=txtGvUseTax]').attr('id') != "" && typeof $tr.find('input[id*=txtGvUseTax]').attr('id') != 'undefined') {
                            $tr.find('input[id*=txtGvUseTax]').val(parseFloat(ui.item.Rate).toFixed(4));
                            $tr.find('input[id*=hdnUtax]').val(ui.item.Name);
                            $tr.find('input[id*=hdnUtaxGL]').val(ui.item.GL);
                        }
                    });
                }
                return false;
            },
            focus: function (event, ui) {

                $(this).val(ui.item.Rate);
                return false;
            },
            minLength: 0,
            delay: 250

        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })
        $.each($(".tsearchTotalUseTax"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.Rate;
                var result_item = item.Name;
                var result_desc = item.GL;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });

                if (result_value != null) {
                    result_value = result_value.toString().replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_value + "</span></a>")
                        .appendTo(ul);
                }
            };
        });

        $("[id*=txtGvJob]").focusout(function () {

            var txtGvJob = $(this).attr('id');
            var txtGvAcctNo = $(txtGvJob.replace('txtGvJob', 'txtGvAcctNo'));
            var strAcctNo = $(txtGvAcctNo).val();

            var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
            var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
            var txtGvAcctName = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvAcctName'));

            if (strAcctNo == '') {
                var vendorId = $("#hdnVendorID").val();
                if (vendorId != '') {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetGLbyVendor",
                        data: '{"vendor": "' + vendorId + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            var ui = $.parseJSON(data.d);

                            if (ui.length > 0) {
                                var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct;
                                var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).val();
                                //-----If Inventory code select then we set default inventory Acct
                                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                if (GvPhase == 'Inventory') {
                                    $(txtGvAcctNo).val(InvDefaultAcctName);
                                    $(hdnAcctID).val(InvDefaultAcctID);
                                }
                                else {
                                    $(txtGvAcctNo).val(strAcct);
                                    $(hdnAcctID).val(ui[0].DA);
                                }
                                //$(txtGvAcctName).val(ui[0].DefaultAcct);
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load default acct#");
                        }
                    });
                }
            }
        });

        $("[id*=txtGvJob]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},

            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;
                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetJobLocations",
                    data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + true + '", "con": "' + dtaaa.con + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load project details");
                    }
                });
            },
            select: function (event, ui) {
                var txtGvJob = this.id;
                var txtGvLoc = $(txtGvJob.replace('txtGvJob', 'txtGvLoc'));
                var hdnJobID = $(txtGvJob.replace('txtGvJob', 'hdnJobID'));
                var txtGvAcctNo = $(txtGvJob.replace('txtGvJob', 'txtGvAcctNo'));
                var hdnAcctID = $(txtGvJob.replace('txtGvJob', 'hdnAcctID'));

                $(hdnJobID).val(ui.item.ID);
                var jobStr = ui.item.ID + ", " + ui.item.fDesc;
                $(this).val(jobStr);
                $(txtGvLoc).val(ui.item.Tag);
                var GvPhase = $(txtGvJob.replace('txtGvJob', 'txtGvPhase')).val();
                //-----If Inventory code select then we set default inventory Acct
                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                if (GvPhase == 'Inventory') {
                    $(txtGvAcctNo).val(InvDefaultAcctName);
                    $(hdnAcctID).val(InvDefaultAcctID);
                }
                else {
                    $(hdnAcctID).val(ui.item.GLExp);
                    var strAcct = ui.item.Acct + ' - ' + ui.item.DefaultAcct;
                    $(txtGvAcctNo).val(strAcct);
                }
                $('#hdnIsAutoCompleteSelected').val('1');
                return false;
            },
            focus: function (event, ui) {
                try {
                    $(this).val(ui.item.fDesc);
                } catch{ }

                return false;
            },
            //change: function (event, ui) {
            //    var txtGvJob = this.id;
            //    var hdnJobID = $(txtGvJob.replace('txtGvJob', 'hdnJobID'));
            //    var strJob = $(txtGvJob).value;

            //    if (strJob == '') {
            //        $(hdnJobID).val('')
            //    }
            //},
            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })
        $.each($(".psearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.ID;
                var result_item = item.fDesc;
                var result_desc = item.Tag;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });

                if (result_value != null) {
                    result_value = result_value.toString().replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }
                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a><b> Project: </b> " + result_value + ", " + result_item + ", <span style='color:Gray;'><b> Loc: </b>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }
            };
        });

        $("[id*=txtGvJob]").change(function () {
            //debugger
            var isAutoCompleteSelected = $('#hdnIsAutoCompleteSelected').val();
            $('#hdnIsAutoCompleteSelected').val('0');
            if (isAutoCompleteSelected != '1') {
                //debugger
                //var txtGvJob = ;
                var strItem = $(this).val();
                var txtGvJobId = $(this).attr('id');
                var txtGvLoc = $(txtGvJobId.replace('txtGvJob', 'txtGvLoc'));
                var hdnJobID = $(txtGvJobId.replace('txtGvJob', 'hdnJobID'));
                var txtGvAcctNo = $(txtGvJobId.replace('txtGvJob', 'txtGvAcctNo'));
                var hdnAcctID = $(txtGvJobId.replace('txtGvJob', 'hdnAcctID'));
                var txtGvJob = $(txtGvJobId);

                if (strItem != "") {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetJobLocations",
                        data: '{"prefixText": "' + strItem + '", "IsJob": "' + true + '", "con": ""}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            var ui = $.parseJSON(data.d);
                            if (ui.length == 0) {
                                $(txtGvJob).val('');
                                $(hdnJobID).val('');
                            }
                            else {
                                //debugger
                                $(hdnJobID).val(ui[0].ID);
                                var jobStr = ui[0].ID + ", " + ui[0].fDesc;
                                $(txtGvJob).val(jobStr);
                                $(txtGvLoc).val(ui[0].Tag);
                                $(hdnAcctID).val(ui[0].GLExp);
                                var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct;
                                $(txtGvAcctNo).val(strAcct);
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load project details");
                        }
                    });
                }
                else {
                    $(txtGvJob).val('');
                    $(hdnJobID).val('');
                }
            }
        });

        $("[id*=txtGvAcctNo]").focusout(function () {
            var txtGvAcctNo = $(this);
            var strAcctNo = $(this).val();

            var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
            var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
            var hdnJobID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnJobID'));

            if (strAcctNo == '') {
                var job = $(hdnJobID).val();
                if (job != '' && job != '0') {

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetGLExpByProject",
                        data: '{"Job": "' + job + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {

                            var ui = $.parseJSON(data.d);

                            if (ui.length > 0) {
                                var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct
                                var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).val();
                                //-----If Inventory code select then we set default inventory Acct
                                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                if (GvPhase == 'Inventory') {
                                    $(txtGvAcctNo).val(InvDefaultAcctName);
                                    $(hdnAcctID).val(InvDefaultAcctID);
                                }
                                else {
                                    $(txtGvAcctNo).val(strAcct);
                                    $(hdnAcctID).val(ui[0].GLExp);
                                }
                            }
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load default expense acct#");
                        }
                    });
                }
                else {
                    var vendorId = $("#hdnVendorID").val();
                    if (vendorId != '') {
                        $.ajax({
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            url: "AccountAutoFill.asmx/GetGLbyVendor",
                            data: '{"vendor": "' + vendorId + '"}',
                            dataType: "json",
                            async: true,
                            success: function (data) {
                                var ui = $.parseJSON(data.d);

                                if (ui.length > 0) {
                                    var strAcct = ui[0].Acct + ' - ' + ui[0].DefaultAcct
                                    var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).val();
                                    //-----If Inventory code select then we set default inventory Acct
                                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                                    if (GvPhase == 'Inventory') {
                                        $(txtGvAcctNo).val(InvDefaultAcctName);
                                        $(hdnAcctID).val(InvDefaultAcctID);
                                    }
                                    else {
                                        $(txtGvAcctNo).val(strAcct);
                                        $(hdnAcctID).val(ui[0].DA);
                                    }
                                }
                            },
                            error: function (result) {
                                alert("Due to unexpected errors we were unable to load default acct#");
                            }
                        });
                    }
                }
            }
        });

        $("[id*=txtGvAcctNo]").change(function () {
            var txtGvAcctNo = $(this);
            var strAcctNo = $(this).val();
            strAcctNo = strAcctNo.split(" -")[0];
            var txtGvAcctNo1 = $(txtGvAcctNo).attr('id');
            var hdnAcctID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnAcctID'));
            var hdnJobID = $(txtGvAcctNo1.replace('txtGvAcctNo', 'hdnJobID'));

            if (strAcctNo != '') {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetChartByAcct",
                    data: '{"prefixText": "' + strAcctNo + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        var ui = $.parseJSON(data.d);

                        if (ui.length == 0) {
                            var strAcct = $(txtGvAcctNo).val();
                            $(txtGvAcctNo).val('');
                            noty({
                                text: 'Acct #' + strAcct + ' doesn\'t exist!',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: false,
                                theme: 'noty_theme_default',
                                closable: true
                            });
                        }
                        else {
                            var strAcct = ui[0].Acct + ' - ' + ui[0].fDesc;
                            var GvPhase = $(txtGvAcctNo1.replace('txtGvAcctNo', 'txtGvPhase')).val();
                            //-----If Inventory code select then we set default inventory Acct
                            var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                            var InvDefaultAcctName = $("#hdnInvDefaultAcctName").value;
                            if (GvPhase == 'Inventory') {
                                $(txtGvAcctNo).val(InvDefaultAcctName);
                                $(hdnAcctID).val(InvDefaultAcctID);
                            }
                            else {
                                $(txtGvAcctNo).val(strAcct);
                                $(hdnAcctID).val(ui[0].ID);
                            }
                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Acct#");
                    }
                });
            }

        });

        $("[id*=txtGvAcctNo]").autocomplete({
            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetAccountName",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            select: function (event, ui) {

                if (ui.item.value == 0)
                    window.location.href = "addcoa.aspx";
                else {
                    var txtGvAcctName = this.id;
                    var hdnAcctID = $(txtGvAcctName.replace('txtGvAcctNo', 'hdnAcctID'));
                    var strAcct = ui.item.acct + " - " + ui.item.label;
                    var GvPhase = $(txtGvAcctName.replace('txtGvAcctNo', 'txtGvPhase')).val();
                    //-----If Inventory code select then we set default inventory Acct
                    var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                    var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                    if (GvPhase == 'Inventory') {
                        $(this).val(InvDefaultAcctName);
                        $(hdnAcctID).val(InvDefaultAcctID);
                    }
                    else {
                        $(hdnAcctID).val(ui.item.value);
                        $(this).val(strAcct);
                    }
                }

                return false;
            },
            focus: function (event, ui) {
                $(this).val(ui.item.acct);
                return false;
            },
            change: function (event, ui) {

                var txtGvAcctNo = this.id;
                var hdnAcctID = $(txtGvAcctNo.replace('txtGvAcctNo', 'hdnAcctID'));
                var strAcct = $(txtGvAcctNo).val();

                if (strAcct == '') {
                    $(hdnAcctID).val('')
                }
            },
            minLength: 0,
            delay: 250
        })
        $.each($(".searchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {

                var ula = ul;
                var itema = item;
                var result_value = item.value;
                var result_item = item.label;
                var result_desc = item.acct;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }
            };
        });


        $("[id*=txtGvUseTax]").autocomplete({

            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/getUseTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {

                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                if (ui.item.value == 0)
                    window.location.href = "addbills.aspx";
                else {
                    var txtGvUseTax = this.id;
                    $(this).val(ui.item.Rate);

                    var hdnUtax = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtax'));
                    var hdnUtaxGL = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtaxGL'));

                    $(hdnUtax).val(ui.item.Name);
                    $(hdnUtaxGL).val(ui.item.GL);
                }

                return false;
            },
            focus: function (event, ui) {

                $(this).val(ui.item.Rate);
                return false;
            },
            minLength: 0,
            delay: 250

        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })
        $.each($(".tsearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.Rate;
                var result_item = item.Name;
                var result_desc = item.GL;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });

                if (result_value != null) {
                    result_value = result_value.toString().replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_value + "</span></a>")
                        .appendTo(ul);
                }
            };
        });


        $("[id*=lblSalesTax]").autocomplete({
            open: function (e, ui) {
                /* create the scrollbar each time autocomplete menu opens/updates */
                $(".ui-autocomplete").mCustomScrollbar({
                    setHeight: 182,
                    theme: "dark-3",
                    autoExpandScrollbar: true
                });
            },
            response: function (e, ui) {
                /* destroy the scrollbar after each search completes, before the menu is shown */
                $(".ui-autocomplete").mCustomScrollbar("destroy");
            },
            source: function (request, response) {
                var dtaaa = new dtaa();
                debugger;
                //dtaaa.prefixText = request.term;
                //alert($("#hdnSTaxState").val());
                var tytty = $("#hdnSTaxState").val();
                dtaaa.prefixText = tytty;
                query = tytty;

                //var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/getSaleTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                if (ui.item.value == 0)
                    window.location.href = "addbills.aspx";
                else {
                    var lblSalesTax = this.id;
                    $(this).val(ui.item.Rate);

                    var hdnSTaName = $(lblSalesTax.replace('lblSalesTax', 'hdnSTaName'));
                    var hdnSTaxGL = $(lblSalesTax.replace('lblSalesTax', 'hdnSTaxGL'));

                    var hdnSTaxAm = $(lblSalesTax.replace('lblSalesTax', 'hdnSTaxAm'));
                    var txtGvStaxAmount = $(lblSalesTax.replace('lblSalesTax', 'txtGvStaxAmount'));
                    var chkTaxable = $(lblSalesTax.replace('lblSalesTax', 'chkTaxable'));
                    var hdnchkTaxable = $(lblSalesTax.replace('lblSalesTax', 'hdnchkTaxable'));
                    var hdnGSTTaxGL = $(lblSalesTax.replace('lblSalesTax', 'hdnGSTTaxGL'));
                    var hdnGSTTaxAm = $(lblSalesTax.replace('lblSalesTax', 'hdnGSTTaxAm'));
                    var lblAmountWithTax = $(lblSalesTax.replace('lblSalesTax', 'lblAmountWithTax'));
                    var hdnAmountWithTax = $(lblSalesTax.replace('lblSalesTax', 'hdnAmountWithTax'));
                    var lblGstTax = $(lblSalesTax.replace('lblSalesTax', 'lblGstTax'));
                    var txtGvAmount = $(lblSalesTax.replace('lblSalesTax', 'txtGvAmount'));
                    var txtGvPrice = $(lblSalesTax.replace('lblSalesTax', 'txtGvPrice'));
                    var txtGvQuan = $(lblSalesTax.replace('lblSalesTax', 'txtGvQuan'));


                    $(hdnSTaName).val(ui.item.Name);
                    $(hdnSTaxGL).val(ui.item.GL);

                    //var staxGL = $("#hdnQSTGL");
                    //var gtaxGL = $("#hdnGSTGL");
                    var staxGL = ui.item.GL;
                    var gtaxGL = $("#hdnGSTGL");

                    var staxType = $("#hdnSTaxType");

                    var stax = ui.item.Rate;
                    var gtax = $("#hdnGST");





                    var valAmount;



                    var isGst = 0;
                    var totamt = 0;
                    var staxAmt = 0;
                    var gtaxAmt = 0;
                    var staxAmtGL = 0;
                    var gtaxAmtGL = 0;




                    //if (chkTaxable.checked == true) {
                    //    $(hdnchkTaxable).val('1');
                    //} else {
                    //    $(hdnchkTaxable).val('0');
                    //        }



                    isGst = 1;

                    if (!jQuery.trim($(txtGvQuan).val()) == '') {
                        if (isNaN(parseFloat($(txtGvQuan).val()))) {
                            $(txtGvQuan).val('0.00');
                        }
                    }

                    if (!jQuery.trim($(txtGvPrice).val()) == '') {
                        if (isNaN(parseFloat($(txtGvPrice).val()))) {
                            $(txtGvPrice).val('');
                        }
                    }

                    if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
                        if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                            valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                            $(txtGvAmount).val(valAmount.toFixed(2));
                            //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                        }
                    } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
                        if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                            var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                            $(txtGvPrice).val(valPrice.toFixed(2));
                            //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                        }
                    }





                    if (isGst == 1) {
                        if (gtax == null) {
                            gtaxAmt = 0.00;
                            gtaxAmtGL = 0;
                            $(lblGstTax).val(gtaxAmt.toFixed(2));

                            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                            $(hdnGSTTaxGL).val(gtaxAmtGL);
                        }
                        else if (!gtax.val('')) {
                            //if (checkbox.checked == tr()) {
                            if ($(hdnchkTaxable).val() == "1") {
                                gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                $(lblGstTax).val(gtaxAmt.toFixed(2));
                                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                                gtaxAmtGL = parseInt(gtaxGL.val());
                                $(hdnGSTTaxGL).val(gtaxAmtGL.val());
                            }
                            else {
                                gtaxAmt = 0.00;
                                gtaxAmtGL = 0;
                            }
                            $(lblGstTax).val(gtaxAmt.toFixed(2));

                            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                            $(hdnGSTTaxGL).val(gtaxAmtGL);

                        }

                    }

                    //if (chkTaxable.checked == true) {
                    if ($(hdnchkTaxable).val() == "1") {

                        if (parseInt(staxType.val()) == 0 || parseInt(staxType.val()) == 2) {
                            if (parseFloat(valAmount) < 0) {

                                staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                staxAmt = staxAmt * (-1);
                                staxAmtGL = parseInt(staxGL.val());

                            } else {
                                staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                staxAmtGL = parseInt(staxGL.val());
                            }
                        }
                        else if (parseInt(staxType.val()) == 1) {
                            var oldvalAmount = valAmount;
                            if (isGst == 1) {
                                valAmount = parseFloat(valAmount) + gtaxAmt;
                            }
                            if (parseFloat(valAmount) < 0) {

                                staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                staxAmt = staxAmt * (-1);
                                staxAmtGL = parseInt(staxGL.val());
                                valAmount = oldvalAmount;

                            } else {
                                staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                                staxAmtGL = parseInt(staxGL.val());
                                valAmount = oldvalAmount;
                            }
                        }




                    } else {
                        staxAmt = 0.00;
                        staxAmtGL = 0;
                    }
                    if (isNaN(staxAmt)) {

                        staxAmt = 0.00;
                    }
                    if (isNaN(gtaxAmt)) {

                        gtaxAmt = 0.00;
                    }
                    if (isNaN(valAmount)) {

                        valAmount = 0.00;
                    }


                    //$(lblSalesTax).val(staxAmt.toFixed(2));
                    $(hdnSTaxAm).val(staxAmt.toFixed(2));
                    $(txtGvStaxAmount).val(staxAmt.toFixed(2));

                    //$(hdnSTaxGL).val(staxAmtGL);



                    totamt = valAmount + staxAmt;
                    if (isGst == 1) {
                        totamt = totamt + gtaxAmt;
                    }
                    $(lblAmountWithTax).text(totamt.toFixed(2));
                    //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
                    $(hdnAmountWithTax).val(totamt.toFixed(2));


                    //CalculateTotalAmtSST();
                    CalculateTotalAmt();

                }

                return false;
            },
            focus: function (event, ui) {

                $(this).val(ui.item.Rate);
                return false;
            },
            minLength: 0,
            delay: 250

        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })
        $.each($(".ttsearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.Rate;
                var result_item = item.Name;
                var result_desc = item.GL;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>'
                });

                if (result_value != null) {
                    result_value = result_value.toString().replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>'
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + ", <span style='color:Gray;'>" + result_value + "</span></a>")
                        .appendTo(ul);
                }
            };
        });



        //---$$$$$ Start Items Autocomplete $$$$$$$--

        $("[id*=txtGvItem]").change(function () {

            var txtGvItem = $(this);
            var strItem = $(this).val();

            var txtGvItem1 = $(txtGvItem).attr('id');
            var hdnTypeId = $(txtGvItem1.replace('txtGvItem', 'hdnTypeId'));
            var hdnPID = $(txtGvItem1.replace('txtGvItem', 'hdnPID'));
            var txtGvItem = $(txtGvItem1.replace('txtGvItem', 'txtGvItem'));
            var hdnItemID = $(txtGvItem1.replace('txtGvItem', 'hdnItemID'));
            var txtGvDesc = $(txtGvItem1.replace('txtGvItem', 'txtGvDesc'));
            var job = $(txtGvItem1.replace('txtGvItem', 'hdnJobID')).val();
            var typeId = $(hdnTypeId).val();

            if (strItem != "") {

                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    // url: "AccountAutoFill.asmx/GetAutoFillItem",
                    url: "AccountAutoFill.asmx/GetPhaseExpByJobTypePO",
                    data: '{"prefixText": "' + strItem + '", "typeId": "' + typeId + '", "job": "' + job + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        var ui = $.parseJSON(data.d);
                        if (ui.length == 0) {
                            //$(txtGvItem).val('');
                            $(hdnItemID).val('');
                            $(hdnPID).val('');
                            //if (GvPhase == 'Materials' && job == '') {
                            //    $(hdnPID).val(1);
                            //}
                        }
                        else {
                            $(txtGvItem).val(ui[0].ItemDesc1);
                            $(hdnItemID).val(ui[0].ItemID);
                            $(hdnPID).val(ui[0].Line);
                            $(txtGvDesc).val(ui[0].fDesc);
                            //if (GvPhase == 'Materials' && job == '') {
                            //    $(hdnPID).val(1);
                            //}
                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Item");
                    }
                });
            }
            else {
                $(hdnPID).val('');
                $(hdnItemID).val('');
            }
        });

        $("[id*=txtGvItem]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},
            source: function (request, response) {

                var curr_control = this.element.attr('id');
                var job = $(curr_control.replace('txtGvItem', 'hdnJobID')).val();

                var typeId = $(curr_control.replace('txtGvItem', 'hdnTypeId')).val();
                var prefixText = request.term;
                query = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetPhaseByItem",
                    data: '{"typeId": "' + typeId + '", "jobId": "' + job + '", "prefixText": "' + prefixText + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load item.");
                    },
                    complete: function () {
                        $(this).data('requestRunning', false);
                    }
                });

                return false;
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                var curr_control = this.id;
                var hdnItemID = $(curr_control.replace('txtGvItem', 'hdnItemID'));
                var txtGvDesc = $(curr_control.replace('txtGvItem', 'txtGvDesc'));
                var hdnPID = $(curr_control.replace('txtGvItem', 'hdnPID'));
                var job = $(curr_control.replace('txtGvItem', 'hdnJobID')).val();

                var str = ui.item.ItemDesc;
                var strId = ui.item.ItemID;

                var GvPhase = $(curr_control.replace('txtGvItem', 'txtGvPhase')).val();
                //-----If Inventory code select then we set default inventory Acct
                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();
                if (GvPhase == 'Inventory') {

                    var txtGvPrice = $(curr_control.replace('txtGvItem', 'txtGvPrice'));
                    $(txtGvPrice).val(ui.item.Price);
                    CalTotalVal(txtGvPrice);
                    var txtGvAcctNo = $(curr_control.replace('txtGvItem', 'txtGvAcctNo'));
                    var hdnAcctID = $(curr_control.replace('txtGvItem', 'hdnAcctID'));
                    $(txtGvAcctNo).val(InvDefaultAcctName);
                    $(hdnAcctID).val(InvDefaultAcctID);
                }


                var CountOpsq = ui.item.CountData;
                if (CountOpsq > 1) {

                    var hdOpSq = $(curr_control.replace('txtGvItem', 'hdOpSq'));
                    var hdOpSq_ID = $(hdOpSq).attr('id');
                    var hdnPID_ID = $(hdnPID).attr('id');
                    $("#hdOpSeqID").val(hdOpSq_ID);
                    $("#hdLineNo").val(hdnPID_ID);

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "AccountAutoFill.asmx/GetOpsqList",
                        data: '{"jobId": "' + job + '", "ItemID": "' + strId + '"}',
                        dataType: "json",
                        async: true,
                        success: function (data) {
                            var dd = $.parseJSON(data.d);
                            $('#opDiv').empty();
                            $.each(dd, function (k, v) {
                                $('#opDiv').append('<div><input type="radio" id="' + v["Code"] + '" name="opSquence" value="' + v["Code"] + '" /><label for="' + v["Code"] + '">' + v["Code"] + ":" + v["fDesc"] + '</label><input type="hidden" id="lineItem' + v["Code"] + '" value="' + v["Line"] + '"></div>');
                            });
                            var radwindow = $find("#RadWindowWarehouse");
                            radwindow.show();
                        },
                        error: function (result) {
                            alert("Due to unexpected errors we were unable to load item.");
                        }
                    });
                }

                if (strId == "0") {
                    $(this).val("");
                    $(hdnItemID).val("");
                    $(hdnPID).val("");

                }
                else {
                    if (ui.item.ItemID) {
                        $(txtGvDesc).val(ui.item.fDesc);
                        $(hdnItemID).val(ui.item.ItemID);
                        $(hdnPID).val(ui.item.Line);
                        $(this).val(ui.item.ItemDesc1);
                        //if (GvPhase == 'Materials' && job == '') {
                        //    $(hdnPID).val(1);
                        //}
                    }
                    else {
                        $(this).val("");
                        $(hdnPID).val(ui.item.Line);
                        $(txtGvDesc).val(ui.item.ItemDesc1);
                        //if (GvPhase == 'Materials' && job == '') {
                        //    $(hdnPID).val(1);
                        //}
                    }
                }
                return false;
            },
            focus: function (event, ui) {
                if (ui.item) {
                    $(this).val(ui.item.ItemDesc1);
                }
                return false;
            },

            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val());
        })
        $.each($(".pisearchinput"), function (index, item) {

            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.ItemID;
                var result_item = item.ItemDesc1;
                var result_line = item.Line;
                var result_itemfdesc = item.fDesc;
                var x = new RegExp('\\b' + query, 'ig');

                try {
                    if (result_item != null) {
                        result_item = result_item.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>';
                        });
                    }

                    if (result_itemfdesc != null) {
                        result_itemfdesc = result_itemfdesc.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>';
                        });
                    }
                } catch{ }

                if (result_line == "0") {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>  " + result_item + ", <span style='color:Gray;'><b>  </b>" + result_itemfdesc + "</span></a>")
                        .appendTo(ul);
                }
                else {
                    if (result_item == undefined) { result_item = 'No Record Found!'; }
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' class='fas fa-check-square' title=''></i>" + result_item + "</span>")
                        .appendTo(ul);
                }
            };
        });

        $("[id*=txtGvPhase]").autocomplete({
            //open: function (e, ui) {
            //    /* create the scrollbar each time autocomplete menu opens/updates */
            //    $(".ui-autocomplete").mCustomScrollbar({
            //        setHeight: 182,
            //        theme: "dark-3",
            //        autoExpandScrollbar: true
            //    });
            //},
            //response: function (e, ui) {
            //    /* destroy the scrollbar after each search completes, before the menu is shown */
            //    $(".ui-autocomplete").mCustomScrollbar("destroy");
            //},

            source: function (request, response) {

                var curr_control = this.element.attr('id');
                var job = $(curr_control.replace('txtGvPhase', 'hdnJobID'));
                var prefixText = request.term;
                var job = $(job.id).val();
                if (job == "0") { job = ""; }
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetPhase",
                    data: '{"jobID": "' + job + '", "prefixText": "' + prefixText + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load type.");
                    },
                    complete: function () {
                        $(this).data('requestRunning', false);
                    }
                });
                return false;
            },
            deferRequestBy: 200,
            select: function (event, ui) {

                var txtGvPhase = this.id;
                var hdnTypeId = $(txtGvPhase.replace('txtGvPhase', 'hdnTypeId'));
                var hdOpSq = $(txtGvPhase.replace('txtGvPhase', 'hdOpSq'));
                //var hdntxtGvPhase = $(txtGvPhase.replace('txtGvPhase', 'hdntxtGvPhase'));
                var str = ui.item.TypeName;
                if (str == "No Record Found!") {
                    $(this).val("");
                }
                else {
                    try {
                        $(hdnTypeId).val(ui.item.Type);
                        $(this).val(ui.item.TypeName);
                        $(hdOpSq).val(ui.item.Code);
                    } catch{ }
                }

                var GvPhase = $(txtGvPhase.replace('txtGvPhase', 'txtGvPhase')).val();
                //-----If Inventory code select then we set default inventory Acct
                var InvDefaultAcctID = $("#hdnInvDefaultAcctID").val();
                var InvDefaultAcctName = $("#hdnInvDefaultAcctName").val();

                if (GvPhase == 'Inventory') {
                    try {
                        var txtGvAcctNo = $(txtGvPhase.replace('txtGvPhase', 'txtGvAcctNo'));
                        var hdnAcctID = $(txtGvPhase.replace('txtGvPhase', 'hdnAcctID'));

                        txtGvWarehouse = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouse'));
                        txtGvWarehouseLocation = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouseLocation'));
                        txtGvWarehouse.css('readOnly', false);
                        txtGvWarehouseLocation.css('readOnly', false);

                        $(txtGvAcctNo).val(InvDefaultAcctName);
                        $(hdnAcctID).val(InvDefaultAcctID);
                    }
                    catch (e) { }
                }
                else {
                    try {
                        txtGvWarehouse = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouse'));
                        txtGvWarehouseLocation = $(txtGvPhase.replace('txtGvPhase', 'txtGvWarehouseLocation'));
                        txtGvWarehouse.css('readOnly', true);
                        txtGvWarehouseLocation.css('readOnly', true);
                        $(txtGvWarehouse).val('');
                        $(txtGvWarehouseLocation).val('');
                        txtGvAcctNo = $(txtGvPhase.replace('txtGvPhase', 'txtGvAcctNo'));
                        hdnAcctID = $(txtGvPhase.replace('txtGvPhase', 'hdnAcctID'));
                        if (ui.item.AcctName != '' && ui.item.AcctID != '' && ui.item.AcctName != undefined && ui.item.AcctID != undefined) {
                            $(txtGvAcctNo).val(ui.item.AcctName);
                            $(hdnAcctID).val(ui.item.AcctID);
                        }

                    }
                    catch (e) { }
                }


                return false;
            },
            focus: function (event, ui) {
                //debugger
                if (ui.item != null) {
                    $(this).val(ui.item.TypeName);
                }
                return false;
            },
            minLength: 0,
            delay: 250
        })
            .click(function () {
                $(this).autocomplete('search', $(this).val())
            })
        $.each($(".phsearchinput"), function (index, item) {

            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                var ula = ul;
                var itema = item;
                var result_value = item.Type;
                var result_item = item.TypeName;
                var result_GroupName = item.GroupName;
                var result_Code = item.Code;
                var result_CodeDesc = item.CodeDesc;
                if (result_Code != null && result_Code != "")
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' class='fa fa-check-square' title=''></i>" + result_GroupName + ", " + result_Code + ", " + result_CodeDesc + ", <span style='color:Gray;'><b>  </b>" + result_item + "</span></span>")
                        .appendTo(ul);
                else
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<span class='auto_item'><i style='display:inline-block; margin-right:8px;width:auto;color:#1565C0 !important;' title=''></i>" + result_item + "</span>")
                        .appendTo(ul);
            };
        });

        $("[id*=txtGvPhase]").change(function () {
            //debugger
            //var txtGvPhase = $(this);
            var strPhase = $(this).val();
            var txtGvPhaseId = $(this).attr('id');
            var hdnTypeId = $(txtGvPhaseId.replace('txtGvPhase', 'hdnTypeId'));
            var hdntxtGvPhase = $(txtGvPhaseId.replace('txtGvPhase', 'hdntxtGvPhase'));
            var hdOpSq = $(txtGvPhaseId.replace('txtGvPhase', 'hdOpSq'));
            //var txtGvPhase1 = $(txtGvPhase).attr('id');
            //var hdnTypeId = $(txtGvPhase1.replace('txtGvPhase', 'hdnTypeId'));
            var hdnPID = $(txtGvPhaseId.replace('txtGvPhase', 'hdnPID'));
            var txtGvItem = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvItem'));
            var hdnItemID = $(txtGvPhaseId.replace('txtGvPhase', 'hdnItemID'));
            var txtGvDesc = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvDesc'));
            var txtGvAcctNo = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvAcctNo'));
            var hdnAcctID = $(txtGvPhaseId.replace('txtGvPhase', 'hdnAcctID'));
            //var txtGvWarehouse = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvWarehouse'));
            //var txtGvWarehouseLocation = $(txtGvPhaseId.replace('txtGvPhase', 'txtGvWarehouseLocation'));
            var txtGvPhase = $(txtGvPhaseId);
            var hdnJobContr = $(txtGvPhaseId.replace('txtGvPhase', 'hdnJobID'));
            var job = $(hdnJobContr.id).val();
            if (job == "0") { job = ""; }
            if (strPhase != "") {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    //url: "AccountAutoFill.asmx/GetAutoFillPhase",
                    //data: '{"prefixText": "' + strPhase + '"}',
                    url: "AccountAutoFill.asmx/GetPhase",
                    data: '{"jobID": "' + job + '", "prefixText": "' + strPhase + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        //debugger
                        var ui = $.parseJSON(data.d);
                        if (ui.length == 0) {
                            $(txtGvPhase).val('');
                            $(hdnTypeId).val('');
                            $(hdnPID).val('');
                            $(txtGvItem).val('');
                            $(hdnItemID).val('');
                            noty({
                                text: 'Type \'' + strPhase + '\' doesn\'t exist!',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: 5000,
                                theme: 'noty_theme_default',
                                closable: true
                            });
                        }
                        else {
                            $(hdnTypeId).val(ui[0].Type);
                            console.log(hdnTypeId.val());
                            $(hdOpSq).val(ui[0].Code);
                            $(txtGvPhase).val(ui[0].TypeName);
                            $(hdntxtGvPhase).val(ui[0].TypeName);

                            if (ui[0].TypeName == "Inventory") {
                                try {
                                    //HideGridColums("true");
                                    //do inventory default account

                                    $(txtGvAcctNo).val($("#hdnInvDefaultAcctName").val());
                                    $(hdnAcctID).val($("#hdnInvDefaultAcctID").val());

                                    //$(txtGvWarehouse).attr('readOnly', false);
                                    //$(txtGvWarehouseLocation).attr('readOnly', false);
                                } catch (e) { }
                            }
                            else {
                                // HideGridColums("false");
                                try {

                                    if (ui[0].AcctName != '' && ui[0].AcctID != '' && ui[0].AcctName != undefined && ui[0].AcctID != undefined) {
                                        $(txtGvAcctNo).val(ui.item.AcctName);
                                        $(hdnAcctID).val(ui.item.AcctID);
                                    }
                                } catch (e) { }
                            }
                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Type");
                    }
                });
            }
            else {
                $(hdnPID).val('');
                $(hdnTypeId).val('');
                $(txtGvItem).val('');
                $(hdnItemID).val('');
                $(txtGvDesc).val('');
            }
        });
        $("[id*=txtGvPhase]").focusout(function () {
            $(this).change();
        });



        $("[id*=txtGvUseTax]").change(function () {

            //var txtGvPhase = $(this);
            var strPhase = $(this).val();
            var txtGvUseTax = this.id;
            var hdnUtax = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtax'));
            var hdnUtaxGL = $(txtGvUseTax.replace('txtGvUseTax', 'hdnUtaxGL'));
            var dtaaa = new dtaa();
            dtaaa.prefixText = strPhase;
            if (strPhase != "") {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    //url: "AccountAutoFill.asmx/GetAutoFillPhase",
                    //data: '{"prefixText": "' + strPhase + '"}',
                    url: "AccountAutoFill.asmx/getUseTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        // debugger

                        var ui = $.parseJSON(data.d);

                        if (ui.length == 0) {

                            $(hdnUtax).val('');
                            $(hdnUtaxGL).val('');
                            $(this).val('');

                            noty({
                                text: 'Tax \'' + strPhase + '\' doesn\'t exist!',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: 5000,
                                theme: 'noty_theme_default',
                                closable: true
                            });

                            return;
                        }
                        else {
                            $(this).val(ui[0].Rate);
                            $(hdnUtax).val(ui[0].Name);

                            $(hdnUtaxGL).val(ui[0].GL);


                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Type");
                    }
                });
            }
            else {
                $(hdnUtax).val('');
                $(hdnUtaxGL).val('');
                $(this).val('');
            }
        });

        $("[id*=lblSalesTax]").change(function () {

            //var txtGvPhase = $(this);
            var strPhase = $(this).val();
            var lblSalesTax = this.id;

            var txtGvAmount = $(lblSalesTax.replace('lblSalesTax', 'txtGvAmount'));
            var hdnSTaxAm = $(lblSalesTax.replace('lblSalesTax', 'hdnSTaxAm'));
            var txtGvStaxAmount = $(lblSalesTax.replace('lblSalesTax', 'txtGvStaxAmount'));

            var hdnSTaName = $(lblSalesTax.replace('lblSalesTax', 'hdnSTaName'));
            var hdnSTaxGL = $(lblSalesTax.replace('lblSalesTax', 'hdnSTaxGL'));
            var dtaaa = new dtaa();
            dtaaa.prefixText = strPhase;
            if (strPhase != "") {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    //url: "AccountAutoFill.asmx/GetAutoFillPhase",
                    //data: '{"prefixText": "' + strPhase + '"}',
                    url: "AccountAutoFill.asmx/getSaleTaxSearch",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        // debugger

                        var ui = $.parseJSON(data.d);

                        if (ui.length == 0) {

                            $(hdnSTaName).val('');
                            $(hdnSTaxGL).val('');
                            $(this).val('');

                            noty({
                                text: 'Tax \'' + strPhase + '\' doesn\'t exist!',
                                type: 'warning',
                                layout: 'topCenter',
                                closeOnSelfClick: false,
                                timeout: 5000,
                                theme: 'noty_theme_default',
                                closable: true
                            });

                            return;
                        }
                        else {
                            $(this).val(ui[0].Rate);
                            $(hdnSTaName).val(ui[0].Name);
                            $(hdnSTaxGL).val(ui[0].GL);

                            //var rrGvAmount = parseFloat($(txtGvAmount).val());
                            //var rrate = parseFloat(ui[0].Rate);
                            //var rstaxamt = rrGvAmount * rrate / 100;
                            //$(hdnSTaxAm).val(rstaxamt);

                        }
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load Type");
                    }
                });
            }
            else {
                $(hdnSTaName).val('');
                $(hdnSTaxGL).val('');
                $(this).val('');
            }
        });

        //$("[id*=txtGvUseTax]").focusout(function () {
        //    $(this).change();
        //});


        //---$$$$$ END Items  autocomplete $$$$$$$--
        function dtInv() {
            this.prefixText = null;
            this.con = null;
            this.InvID = null;
        }
        $("[id*=txtGvWarehouse]").autocomplete({

            open: function (e, ui) {
                /* create the scrollbar each time autocomplete menu opens/updates */
                $(".ui-autocomplete").mCustomScrollbar({
                    setHeight: 182,
                    theme: "dark-3",
                    autoExpandScrollbar: true
                });
            },
            response: function (e, ui) {
                /* destroy the scrollbar after each search completes, before the menu is shown */
                try {
                    $(".ui-autocomplete").mCustomScrollbar("destroy");
                }
                catch (e) { }
            },
            source: function (request, response) {
                debugger
                var dtaaa = new dtInv();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;

                var txtGvWarehouse_GetID = $(this.element).attr("id");
                var hdnInvID = $(txtGvWarehouse_GetID.replace('txtGvWarehouse', 'hdnItemID'));

                var hdntxtGvPhase = $(txtGvWarehouse_GetID.replace('txtGvWarehouse', 'txtGvPhase'));
                if (hdntxtGvPhase.val() != "Inventory") { return; }

                console.log(hdntxtGvPhase.val());

                var ID = $(hdnInvID).val();

                dtaaa.InvID = ID;
                dtaaa.isShowAll = "yes";
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetWarehouseName",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {

                        response($.parseJSON(data.d));

                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            select: function (event, ui) {
                try {
                    var txtGvWarehouse = this.id;
                    var hdnWarehouse = $(txtGvWarehouse.replace('txtGvWarehouse', 'hdnWarehouse'));
                    var hdnWarehousefdesc = $(txtGvWarehouse.replace('txtGvWarehouse', 'hdnWarehousefdesc'));
                    var hdnInvID = $(txtGvWarehouse.replace('txtGvWarehouse', 'hdnItemID'));


                    var Str = ui.item.WarehouseID + ", " + ui.item.WarehouseName;

                    $(this).val(Str);

                    $(hdnWarehousefdesc).val(Str);
                    $(txtGvWarehouse).val(Str);
                    $(hdnWarehouse).val(ui.item.WarehouseID);

                    var locationID = 0;
                    var warehouseID = $(hdnWarehouse).val();
                    var invID = $(hdnInvID).val();

                } catch (e) { }
                return false;
            },
            focus: function (event, ui) {
                try {
                    $(this).val(ui.item.WarehouseID);
                } catch (e) { }
                return false;
            },
            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        });

        $.each($(".Warehousesearchinput"), function (index, item) {
            if (item && typeof item == "object")
                $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                    var ula = ul;
                    var itema = item;
                    var result_value = item.ID;
                    var result_item = item.WarehouseName;
                    var result_desc = item.WarehouseID;
                    var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                    result_item = result_item.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>';
                    });
                    if (result_desc != null) {
                        result_desc = result_desc.replace(x, function (FullMatch, n) {
                            return '<span class="highlight">' + FullMatch + '</span>';
                        });
                    }

                    if (result_value == 0) {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                    else {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a style='color:blue;'>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                };
        });

        //txtGvWarehouseLocation
        $("[id*=txtGvWarehouseLocation]").autocomplete({


            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;

                var txtGvWarehouseLocation_GetID = $(this.element).attr("id");
                var hdnWarehouse = $(txtGvWarehouseLocation_GetID.replace('txtGvWarehouseLocation', 'hdnWarehouse'));
                var ID = $(hdnWarehouse).val();

                var hdntxtGvPhase = $(txtGvWarehouseLocation_GetID.replace('txtGvWarehouseLocation', 'txtGvPhase'));
                if (!hdntxtGvPhase.val("Inventory")) { return; }

                dtaaa.WarehouseID = ID;

                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetWarehouseLocation",
                    data: JSON.stringify(dtaaa),
                    dataType: "json",
                    async: true,
                    success: function (data) {

                        response($.parseJSON(data.d));

                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load account name");
                    }
                });
            },
            select: function (event, ui) {
                try {

                    var txtGvWarehouseLocation = this.id;
                    var hdnWarehouseLocationID = $(txtGvWarehouseLocation.replace('txtGvWarehouseLocation', 'hdnWarehouseLocationID'));
                    var hdnInvID = $(txtGvWarehouseLocation.replace('txtGvWarehouseLocation', 'hdnItemID'));
                    var hdnWarehouse = $(txtGvWarehouseLocation.replace('txtGvWarehouseLocation', 'hdnWarehouse'));
                    var hdnLocationfdesc = $(txtGvWarehouseLocation.replace('txtGvWarehouseLocation', 'hdnLocationfdesc'));
                    //var Str = ui.item.ID + ", " + ui.item.Name;
                    var Str = ui.item.Name;
                    $(this).val(Str);

                    $(hdnLocationfdesc).val(Str);
                    $(txtGvWarehouseLocation).val(Str);
                    $(hdnWarehouseLocationID).val(ui.item.ID);

                    var locationID = $(hdnWarehouseLocationID).val();
                    var warehouseID = $(hdnWarehouse).val();
                    var invID = $(hdnInvID).val();






                } catch (e) { alert('error'); }



                return false;
            },
            focus: function (event, ui) {
                try {
                    $(this).val(ui.item.ID);
                } catch (e) { }
                return false;
            },
            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val())
        })


        $.each($(".WarehouseLocationsearchinput"), function (index, item) {
            if (item && typeof item == "object")
                $(item).data("ui-autocomplete")._renderItem = function (ul, item) {
                    var ula = ul;
                    var itema = item;
                    var result_value = item.ID;
                    var result_item = item.Name;

                    var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                    result_item = result_item.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>';
                    });

                    if (result_value == 0) {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                    else {
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a style='color:blue;'>" + result_item + "</a>")
                            .appendTo(ul);
                    }
                };
        });

















        $("[id*=txtGvLoc]").autocomplete({
            open: function (e, ui) {
                /* create the scrollbar each time autocomplete menu opens/updates */
                $(".ui-autocomplete").mCustomScrollbar({
                    setHeight: 182,
                    theme: "dark-3",
                    autoExpandScrollbar: true
                });
            },
            response: function (e, ui) {
                /* destroy the scrollbar after each search completes, before the menu is shown */
                $(".ui-autocomplete").mCustomScrollbar("destroy");
            },

            source: function (request, response) {
                var dtaaa = new dtaa();
                dtaaa.prefixText = request.term;
                query = request.term;

                var str = request.term;
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "AccountAutoFill.asmx/GetJobLocations",
                    data: '{"prefixText": "' + dtaaa.prefixText + '", "IsJob": "' + false + '", "con": "' + dtaaa.con + '"}',
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        response($.parseJSON(data.d));
                    },
                    error: function (result) {
                        alert("Due to unexpected errors we were unable to load phase details");
                    }
                });
            },
            select: function (event, ui) {

                var txtGvLoc = this.id;
                var txtGvJob = $(txtGvLoc.replace('txtGvLoc', 'txtGvJob'));
                var hdnJobID = $(txtGvLoc.replace('txtGvLoc', 'hdnJobID'));

                $(hdnJobID).val(ui.item.ID);
                $(txtGvJob).val(ui.item.fDesc);
                $(this).val(ui.item.Tag);

                return false;
            },
            focus: function (event, ui) {
                $(this).val(ui.item.fDesc);
                return false;
            },
            minLength: 0,
            delay: 250
        }).click(function () {
            $(this).autocomplete('search', $(this).val());
        })
        $.each($(".jsearchinput"), function (index, item) {
            $(item).data("ui-autocomplete")._renderItem = function (ul, item) {

                var ula = ul;
                var itema = item;
                var result_value = item.ID;
                var result_item = item.fDesc;
                var result_desc = item.Tag;
                var x = new RegExp('\\b' + query, 'ig'); // notice the escape \ here...
                result_item = result_item.replace(x, function (FullMatch, n) {
                    return '<span class="highlight">' + FullMatch + '</span>';
                });
                if (result_desc != null) {
                    result_desc = result_desc.replace(x, function (FullMatch, n) {
                        return '<span class="highlight">' + FullMatch + '</span>';
                    });
                }

                if (result_value == 0) {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>" + result_item + "</a>")
                        .appendTo(ul);
                }
                else {
                    return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a><b> Job: </b> " + result_item + ", <span style='color:Gray;'><b> Loc: </b>" + result_desc + "</span></a>")
                        .appendTo(ul);
                }
            };
        });

        CalculateTotalAmt();
    }

    $(document).ready(function () {

        CalculateTotalAmt();
        CalculateTotalUseTaxExpense();

    });
</script>
<script type="text/javascript">
    /////////////////// To calculate Total and to make Gridview Amount Value to 2 decimal ////////////NK
    function CalTotalValStax(checkbox) {
        debugger;
        var cb = checkbox.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");
        if (parseFloat(stax.val().toString().replace(/[\$\(\),]/g, '')) <= 0) {

            noty({
                text: 'Please Set the Provincial Tax at vendor level',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 1500,
                theme: 'noty_theme_default',
                closable: true
            });
            $(hdnchkTaxable).val('0');
            checkbox.checked = false;

        }
        else {


            var staxGL = $("#hdnQSTGL");
            var gtaxGL = $("#hdnGSTGL");

            var staxType = $("#hdnSTaxType");

            var txtGvQuan;
            var txtGvPrice;
            var txtGvAmount;
            var lblSalesTax;
            var lblGstTax;
            var hdnGSTTaxAm;
            var hdnSTaxAm;
            var txtGvStaxAmount;
            var lblAmountWithTax;
            var valAmount;
            var hdnchkTaxable;
            var hdnSTaxGL;
            var hdnGSTTaxGL;
            var isGst = 0;
            var totamt = 0;
            var staxAmt = 0;
            var gtaxAmt = 0;
            var staxAmtGL = 0;
            var gtaxAmtGL = 0;

            txtGvPrice = $(cb.replace('chkTaxable', 'txtGvPrice'));
            txtGvQuan = $(cb.replace('chkTaxable', 'txtGvQuan'));
            txtGvAmount = $(cb.replace('chkTaxable', 'txtGvAmount'));
            //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
            lblGstTax = $(cb.replace('chkTaxable', 'lblGstTax'));
            lblAmountWithTax = $(cb.replace('chkTaxable', 'lblAmountWithTax'));
            hdnAmountWithTax = $(cb.replace('chkTaxable', 'hdnAmountWithTax'));
            hdnchkTaxable = $(cb.replace('chkTaxable', 'hdnchkTaxable'));
            hdnSTaxGL = $(cb.replace('chkTaxable', 'hdnSTaxGL'));
            hdnGSTTaxGL = $(cb.replace('chkTaxable', 'hdnGSTTaxGL'));
            hdnSTaxAm = $(cb.replace('chkTaxable', 'hdnSTaxAm'));
            txtGvStaxAmount = $(cb.replace('chkTaxable', 'txtGvStaxAmount'));
            hdnGSTTaxAm = $(cb.replace('chkTaxable', 'hdnGSTTaxAm'));

            gtaxAmt = parseFloat($(hdnGSTTaxAm).val());
            gtaxAmt = parseFloat(gtaxAmt) || 0;

            valAmount = parseFloat($(txtGvAmount).val()) || 0;

            if (checkbox.checked == true) {
                $(hdnchkTaxable).val('1');
            } else {
                $(hdnchkTaxable).val('0');
            }

            isGst = 1;



            if (checkbox.is(':checked') == true) {
                if (parseInt(staxType.val()) == 0 || parseInt(staxType.val()) == 2) {
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.val());

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.val());
                    }
                }
                else if (parseInt(staxType.val()) == 1) {
                    var oldvalAmount = valAmount;
                    //if (isGst == 1) {

                    valAmount = parseFloat(valAmount) + gtaxAmt;

                    //}


                    // if (parseFloat(gtaxAmt) > 0) {

                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.val());
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.val());
                        valAmount = oldvalAmount;
                    }

                }




            } else {
                staxAmt = 0.00;
                staxAmtGL = 0;
            }
            if (isNaN(staxAmt)) {

                staxAmt = 0.00;
            }
            if (isNaN(gtaxAmt)) {

                gtaxAmt = 0.00;
            }
            if (isNaN(valAmount)) {

                valAmount = 0.00;
            }


            //$(lblSalesTax).val(staxAmt.toFixed(2));
            $(hdnSTaxAm).val(staxAmt.toFixed(2));
            $(txtGvStaxAmount).val(staxAmt.toFixed(2));

            $(hdnSTaxGL).val(staxAmtGL);



            totamt = valAmount + staxAmt;
            if (isGst == 1) {
                totamt = totamt + gtaxAmt;
            }
            $(lblAmountWithTax).text(totamt.toFixed(2));
            //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
            $(hdnAmountWithTax).val(totamt.toFixed(2));
        }

        //CalculateTotalAmtSST();
        CalculateTotalAmt();
    }

    function CalTotalValGtax(checkbox) {

        var cb = checkbox.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");


        var staxGL = $("#hdnQSTGL");
        var gtaxGL = $("#hdnGSTGL");

        var staxType = $("#hdnSTaxType");

        var txtGvQuan;
        var txtGvPrice;
        var txtGvAmount;
        var lblSalesTax;
        var lblGstTax;
        var hdnGSTTaxAm;
        var hdnSTaxAm;
        var txtGvStaxAmount;
        var lblAmountWithTax;
        var valAmount;
        var hdnchkTaxable;
        var hdnSTaxGL;
        var hdnGSTTaxGL;
        var isGst = 0;
        var totamt = 0;
        var staxAmt = 0;
        var gtaxAmt = 0;
        var staxAmtGL = 0;
        var gtaxAmtGL = 0;

        txtGvPrice = $(cb.replace('chkGTaxable', 'txtGvPrice'));
        txtGvQuan = $(cb.replace('chkGTaxable', 'txtGvQuan'));
        txtGvAmount = $(cb.replace('chkGTaxable', 'txtGvAmount'));
        //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
        lblGstTax = $(cb.replace('chkGTaxable', 'lblGstTax'));
        lblAmountWithTax = $(cb.replace('chkGTaxable', 'lblAmountWithTax'));
        hdnAmountWithTax = $(cb.replace('chkGTaxable', 'hdnAmountWithTax'));
        hdnchkGTaxable = $(cb.replace('chkGTaxable', 'hdnchkGTaxable'));
        hdnSTaxGL = $(cb.replace('chkGTaxable', 'hdnSTaxGL'));
        hdnGSTTaxGL = $(cb.replace('chkGTaxable', 'hdnGSTTaxGL'));
        hdnSTaxAm = $(cb.replace('chkGTaxable', 'hdnSTaxAm'));
        txtGvStaxAmount = $(cb.replace('chkGTaxable', 'txtGvStaxAmount'));
        hdnGSTTaxAm = $(cb.replace('chkGTaxable', 'hdnGSTTaxAm'));

        hdnchkTaxable = $(cb.replace('chkGTaxable', 'hdnchkTaxable'));


        staxAmt = parseFloat($(hdnSTaxAm).val());

        valAmount = parseFloat($(txtGvAmount).val()) || 0;

        if (checkbox.checked == true) {
            $(hdnchkGTaxable).val('1');
        } else {
            $(hdnchkGTaxable).val('0');
        }



        isGst = 1;



        if (checkbox.is(':checked') == true) {
            //if (isGst == 1) {
            if (gtax == null) {
                gtaxAmt = 0.00;
                gtaxAmtGL = 0;
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);
            }
            else if (!gtax.val('')) {
                if (checkbox.is(':checked') == true) {
                    gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                    $(lblGstTax).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    gtaxAmtGL = parseInt(gtaxGL.val());
                    $(hdnGSTTaxGL).val(gtaxAmtGL.val());
                }
                else {
                    gtaxAmt = 0.00;
                    gtaxAmtGL = 0;
                }
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);


                if ($(hdnchkTaxable).val() == '1') {
                    if (parseInt(staxType.val()) == 1) {
                        var oldvalAmount = valAmount;
                        if (checkbox.is(':checked') == true) {
                            valAmount = parseFloat(valAmount) + gtaxAmt;
                        }
                        if (parseFloat(valAmount) < 0) {

                            staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                            staxAmt = staxAmt * (-1);
                            //staxAmtGL = parseInt(staxGL.val());
                            valAmount = oldvalAmount;

                        } else {
                            staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                            //staxAmtGL = parseInt(staxGL.value);
                            valAmount = oldvalAmount;
                        }
                    }
                }
                else {
                    staxAmt = 0;
                }
                $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
                $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));








            }

        }
        else {
            gtaxAmt = 0.00;
            gtaxAmtGL = 0;
            $(lblGstTax).val(gtaxAmt.toFixed(2));

            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
            $(hdnGSTTaxGL).val(gtaxAmtGL);

            if ($(hdnchkTaxable).val() == '1') {
                if (parseInt(staxType.val()) == 1) {
                    var oldvalAmount = valAmount;
                    if (checkbox.is(':checked') == true) {
                        valAmount = parseFloat(valAmount) + gtaxAmt;
                    }
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;
                    }
                }
            }
            else {
                staxAmt = 0;
            }


            $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
            $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));
        }


        debugger;


        //} else {
        //    staxAmt = 0.00;
        //    staxAmtGL = 0;
        //}
        if (isNaN(staxAmt)) {

            staxAmt = 0.00;
        }
        if (isNaN(gtaxAmt)) {

            gtaxAmt = 0.00;
        }
        if (isNaN(valAmount)) {

            valAmount = 0.00;
        }

        totamt = valAmount + staxAmt;
        if (isGst == 1) {
            totamt = totamt + gtaxAmt;
        }
        $(lblAmountWithTax).text(totamt.toFixed(2));
        //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
        $(hdnAmountWithTax).val(totamt.toFixed(2));
        //}

        //CalculateTotalAmtSST();
        CalculateTotalAmt();
    }
    function CalTotalValGtax1(checkbox) {
        //var cb = checkbox.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");

        var staxGL = $("#hdnQSTGL");
        var gtaxGL = $("#hdnGSTGL");
        var staxType = $("#hdnSTaxType");
        var txtGvQuan;
        var txtGvPrice;
        var txtGvAmount;
        var lblSalesTax;
        var lblGstTax;
        var hdnGSTTaxAm;
        var hdnSTaxAm;
        var txtGvStaxAmount;
        var lblAmountWithTax;
        var valAmount;
        var hdnchkTaxable;
        var hdnchkGTaxable;
        var hdnSTaxGL;
        var hdnGSTTaxGL;
        var isGst = 0;
        var totamt = 0;
        var staxAmt = 0;
        var gtaxAmt = 0;
        var staxAmtGL = 0;
        var gtaxAmtGL = 0;

        txtGvPrice = $(checkbox.replace('chkGTaxable', 'txtGvPrice'));
        txtGvQuan = $(checkbox.replace('chkGTaxable', 'txtGvQuan'));
        txtGvAmount = $(checkbox.replace('chkGTaxable', 'txtGvAmount'));
        //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
        lblGstTax = $(checkbox.replace('chkGTaxable', 'lblGstTax'));
        lblAmountWithTax = $(checkbox.replace('chkGTaxable', 'lblAmountWithTax'));
        hdnAmountWithTax = $(checkbox.replace('chkGTaxable', 'hdnAmountWithTax'));
        hdnchkGTaxable = $(checkbox.replace('chkGTaxable', 'hdnchkGTaxable'));
        hdnSTaxGL = $(checkbox.replace('chkGTaxable', 'hdnSTaxGL'));
        hdnGSTTaxGL = $(checkbox.replace('chkGTaxable', 'hdnGSTTaxGL'));
        hdnSTaxAm = $(checkbox.replace('chkGTaxable', 'hdnSTaxAm'));
        txtGvStaxAmount = $(checkbox.replace('chkGTaxable', 'txtGvStaxAmount'));
        hdnGSTTaxAm = $(checkbox.replace('chkGTaxable', 'hdnGSTTaxAm'));
        hdnchkTaxable = $(checkbox.replace('chkGTaxable', 'hdnchkTaxable'));

        var cb = $(checkbox);

        staxAmt = parseFloat($(hdnSTaxAm).val());

        valAmount = parseFloat($(txtGvAmount).val()) || 0;

        if (cb.checked == true) {
            $(hdnchkGTaxable).val('1');
        } else {
            $(hdnchkGTaxable).val('0');
        }

        isGst = 1;


        if (cb.is(':checked') == true) {
            //if (isGst == 1) {
            if (gtax == null) {
                gtaxAmt = 0.00;
                gtaxAmtGL = 0;
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);
            }
            else if (!gtax.val('')) {
                if (cb.is(':checked') == true) {
                    gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                    $(lblGstTax).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    gtaxAmtGL = parseInt(gtaxGL.val());
                    $(hdnGSTTaxGL).val(gtaxAmtGL.val());
                }
                else {
                    gtaxAmt = 0.00;
                    gtaxAmtGL = 0;
                }
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);


                if ($(hdnchkTaxable).val() == '1') {
                    if (parseInt(staxType.val()) == 1) {
                        var oldvalAmount = valAmount;
                        if (cb.is(':checked') == true) {
                            valAmount = parseFloat(valAmount) + gtaxAmt;
                        }
                        if (parseFloat(valAmount) < 0) {

                            staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                            staxAmt = staxAmt * (-1);
                            //staxAmtGL = parseInt(staxGL.value);
                            valAmount = oldvalAmount;

                        } else {
                            staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                            //staxAmtGL = parseInt(staxGL.value);
                            valAmount = oldvalAmount;
                        }
                    }
                }
                else {
                    staxAmt = 0;
                }
                $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
                $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));

            }

        }
        else {
            gtaxAmt = 0.00;
            gtaxAmtGL = 0;
            $(lblGstTax).val(gtaxAmt.toFixed(2));

            $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
            $(hdnGSTTaxGL).val(gtaxAmtGL);

            if ($(hdnchkTaxable).val() == '1') {
                if (parseInt(staxType.val()) == 1) {
                    var oldvalAmount = valAmount;
                    if (isGst == 1) {
                        valAmount = parseFloat(valAmount) + gtaxAmt;
                    }
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        //staxAmtGL = parseInt(staxGL.value);
                        valAmount = oldvalAmount;
                    }
                }
            }
            else {
                staxAmt = 0;
            }


            $(hdnSTaxAm).val(parseFloat(staxAmt).toFixed(2));
            $(txtGvStaxAmount).val(parseFloat(staxAmt).toFixed(2));
        }



        if (isNaN(staxAmt)) {

            staxAmt = 0.00;
        }
        if (isNaN(gtaxAmt)) {

            gtaxAmt = 0.00;
        }
        if (isNaN(valAmount)) {

            valAmount = 0.00;
        }

        totamt = valAmount + staxAmt;
        if (isGst == 1) {
            totamt = totamt + gtaxAmt;
        }
        $(lblAmountWithTax).text(totamt.toFixed(2));
        $(hdnAmountWithTax).val(totamt.toFixed(2));

        CalculateTotalAmt();
    }
    function CalTotalValStax1(checkbox) {

        //var cb = checkbox.id;
        var cb = $(checkbox);
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");
        if (parseFloat(stax.val().toString().replace(/[\$\(\),]/g, '')) <= 0) {

            noty({
                text: 'Please Set the Provincial Tax at vendor level',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 1500,
                theme: 'noty_theme_default',
                closable: true
            });
            //$(hdnchkTaxable).val('0');
            cb.css('checked', false);

        }
        else {


            var staxGL = $("#hdnQSTGL");
            var gtaxGL = $("#hdnGSTGL");

            var staxType = $("#hdnSTaxType");

            var txtGvQuan;
            var txtGvPrice;
            var txtGvAmount;
            var lblSalesTax;
            var lblGstTax;
            var hdnGSTTaxAm;
            var hdnSTaxAm;
            var txtGvStaxAmount;
            var lblAmountWithTax;
            var valAmount;
            var hdnchkTaxable;
            var hdnSTaxGL;
            var hdnGSTTaxGL;
            var isGst = 0;
            var totamt = 0;
            var staxAmt = 0;
            var gtaxAmt = 0;
            var staxAmtGL = 0;
            var gtaxAmtGL = 0;

            txtGvPrice = $(checkbox.replace('chkTaxable', 'txtGvPrice'));
            txtGvQuan = $(checkbox.replace('chkTaxable', 'txtGvQuan'));
            txtGvAmount = $(checkbox.replace('chkTaxable', 'txtGvAmount'));
            //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
            lblGstTax = $(checkbox.replace('chkTaxable', 'lblGstTax'));
            lblAmountWithTax = $(checkbox.replace('chkTaxable', 'lblAmountWithTax'));
            hdnAmountWithTax = $(checkbox.replace('chkTaxable', 'hdnAmountWithTax'));
            hdnchkTaxable = $(checkbox.replace('chkTaxable', 'hdnchkTaxable'));
            hdnSTaxGL = $(checkbox.replace('chkTaxable', 'hdnSTaxGL'));
            hdnGSTTaxGL = $(checkbox.replace('chkTaxable', 'hdnGSTTaxGL'));
            hdnSTaxAm = $(checkbox.replace('chkTaxable', 'hdnSTaxAm'));
            txtGvStaxAmount = $(checkbox.replace('chkTaxable', 'txtGvStaxAmount'));
            hdnGSTTaxAm = $(checkbox.replace('chkTaxable', 'hdnGSTTaxAm'));

            gtaxAmt = parseFloat($(hdnGSTTaxAm).val());
            gtaxAmt = parseFloat(gtaxAmt) || 0;

            valAmount = parseFloat($(txtGvAmount).val()) || 0;

            if (cb.is(':checked') == true) {
                $(hdnchkTaxable).val('1');
            } else {
                $(hdnchkTaxable).val('0');
            }

            isGst = 1;

            if (cb.is(':checked') == true) {
                if (parseInt(staxType.val()) == 0 || parseInt(staxType.val()) == 2) {
                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.val());

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.value);
                    }
                }
                else if (parseInt(staxType.value) == 1) {
                    var oldvalAmount = valAmount;
                    //if (isGst == 1) {
                    valAmount = parseFloat(valAmount) + gtaxAmt;

                    if (parseFloat(valAmount) < 0) {

                        staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.val());
                        valAmount = oldvalAmount;

                    } else {
                        staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.val().toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmtGL = parseInt(staxGL.val());
                        valAmount = oldvalAmount;
                    }

                }


            } else {
                staxAmt = 0.00;
                staxAmtGL = 0;
            }
            if (isNaN(staxAmt)) {

                staxAmt = 0.00;
            }
            if (isNaN(gtaxAmt)) {

                gtaxAmt = 0.00;
            }
            if (isNaN(valAmount)) {

                valAmount = 0.00;
            }

            $(hdnSTaxAm).val(staxAmt.toFixed(2));
            $(txtGvStaxAmount).val(staxAmt.toFixed(2));

            $(hdnSTaxGL).val(staxAmtGL);

            totamt = valAmount + staxAmt;
            if (isGst == 1) {
                totamt = totamt + gtaxAmt;
            }
            $(lblAmountWithTax).text(totamt.toFixed(2));
            $(hdnAmountWithTax).val(totamt.toFixed(2));
        }

        CalculateTotalAmt();
    }


    function TotalwithTax(txtGvStaxAmount) {

        var cb = txtGvStaxAmount.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");
        var txtGvStaxAmounts = $(cb.replace('txtGvStaxAmount', 'txtGvStaxAmount'));
        var cbs = $(cb.replace('txtGvStaxAmount', 'chkTaxable'));
        //var ch_id = chk.attr('id');
        //var cbs = $(ch_id);

        var cbg = $(cb.replace('txtGvStaxAmount', 'chkGTaxable'));
        //var ch_idg = chkg.attr('id');
        //var cbg = $(ch_idg);

        if (parseFloat(stax.value.toString().replace(/[\$\(\),]/g, '')) <= 0) {

            noty({
                text: 'Please Set the Provincial Tax at vendor level',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 1500,
                theme: 'noty_theme_default',
                closable: true
            });
            $(hdnchkTaxable).val('0');
            $(txtGvStaxAmounts).val(0);
            cbs.checked = false;

        }
        else {
            var staxGL = $("#hdnQSTGL");
            var gtaxGL = $("#hdnGSTGL");

            var staxType = $("#hdnSTaxType");

            var txtGvQuan;
            var txtGvPrice;
            var txtGvAmount;
            var lblSalesTax;
            var lblGstTax;
            var hdnGSTTaxAm;
            var hdnSTaxAm;
            var txtGvStaxAmount;
            var lblAmountWithTax;
            var valAmount;
            var hdnchkTaxable;
            var hdnSTaxGL;
            var hdnGSTTaxGL;
            var isGst = 0;
            var totamt = 0;
            var staxAmt = 0;
            var gtaxAmt = 0;
            var staxAmtGL = 0;
            var gtaxAmtGL = 0;

            txtGvPrice = $(cb.replace('txtGvStaxAmount', 'txtGvPrice'));
            txtGvQuan = $(cb.replace('txtGvStaxAmount', 'txtGvQuan'));
            txtGvAmount = $(cb.replace('txtGvStaxAmount', 'txtGvAmount'));
            //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
            lblGstTax = $(cb.replace('txtGvStaxAmount', 'lblGstTax'));
            lblAmountWithTax = $(cb.replace('txtGvStaxAmount', 'lblAmountWithTax'));
            hdnAmountWithTax = $(cb.replace('txtGvStaxAmount', 'hdnAmountWithTax'));
            hdnchkTaxable = $(cb.replace('txtGvStaxAmount', 'hdnchkTaxable'));
            hdnSTaxGL = $(cb.replace('txtGvStaxAmount', 'hdnSTaxGL'));
            hdnGSTTaxGL = $(cb.replace('txtGvStaxAmount', 'hdnGSTTaxGL'));
            hdnSTaxAm = $(cb.replace('txtGvStaxAmount', 'hdnSTaxAm'));
            txtGvStaxAmount = $(cb.replace('txtGvStaxAmount', 'txtGvStaxAmount'));
            hdnGSTTaxAm = $(cb.replace('txtGvStaxAmount', 'hdnGSTTaxAm'));

            isGst = 1;
            if (!jQuery.trim($(txtGvQuan).val()) == '') {
                if (isNaN(parseFloat($(txtGvQuan).val()))) {
                    $(txtGvQuan).val('0.00');
                }
            }

            if (!jQuery.trim($(txtGvPrice).val()) == '') {
                if (isNaN(parseFloat($(txtGvPrice).val()))) {
                    $(txtGvPrice).val('');
                }
            }

            if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                    valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                    $(txtGvAmount).val(valAmount.toFixed(2));
                    //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                    var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                    $(txtGvPrice).val(valPrice.toFixed(2));
                    //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            }

            gtaxAmt = parseFloat($(hdnGSTTaxAm).val());
            gtaxAmt = parseFloat(gtaxAmt) || 0;


            //gtaxAmtGL = parseInt(gtaxGL.value);


            if (gtax == null) {

                gtaxAmt = 0.00;
                gtaxAmtGL = 0;
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);
            }
            else if (gtax.value != '') {
                if (cbg.checked == true) {
                    gtaxAmtGL = parseInt(gtaxGL.val());
                    $(lblGstTax).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxGL).val(gtaxAmtGL.val());
                }
                else {
                    gtaxAmt = 0.00;
                    gtaxAmtGL = 0;
                }
                $(lblGstTax).val(gtaxAmt.toFixed(2));

                $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                $(hdnGSTTaxGL).val(gtaxAmtGL);

            }






            if (cbs.checked == true) {
                staxAmt = parseFloat($(txtGvStaxAmount).val());
                staxAmtGL = parseInt(staxGL.val());


            } else {
                staxAmt = 0.00;
                staxAmtGL = 0;
            }
            if (isNaN(staxAmt)) {

                staxAmt = 0.00;
            }
            if (isNaN(gtaxAmt)) {

                gtaxAmt = 0.00;
            }
            if (isNaN(valAmount)) {

                valAmount = 0.00;
            }


            //$(lblSalesTax).val(staxAmt.toFixed(2));
            $(hdnSTaxAm).val(staxAmt.toFixed(2));
            $(txtGvStaxAmount).val(staxAmt.toFixed(2));

            $(hdnSTaxGL).val(staxAmtGL);



            totamt = valAmount + staxAmt;
            if (isGst == 1) {
                totamt = totamt + gtaxAmt;
            }
            $(lblAmountWithTax).text(totamt.toFixed(2));
            //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
            $(hdnAmountWithTax).val(totamt.toFixed(2));


            CalculateTotalAmt();




        }
    }


    function TotalwithTax1(txtGvStaxAmount) {

        //          if(checkbox.checked == true){
        //     alert('checked');
        // }else{
        //     alert('unchecked');
        //}


        var cb = txtGvStaxAmount.id;
        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");
        if (parseFloat(stax.value.toString().replace(/[\$\(\),]/g, '')) <= 0) {

            noty({
                text: 'Please Set the Provincial Tax at vendor level',
                type: 'warning',
                layout: 'topCenter',
                closeOnSelfClick: false,
                timeout: 1500,
                theme: 'noty_theme_default',
                closable: true
            });
            $(hdnchkTaxable).val('0');
            //checkbox.checked = false;

        }
        else {


            var staxGL = $("#hdnQSTGL");
            var gtaxGL = $("#hdnGSTGL");

            var staxType = $("#hdnSTaxType");

            var txtGvQuan;
            var txtGvPrice;
            var txtGvAmount;
            var lblSalesTax;
            var lblGstTax;
            var hdnGSTTaxAm;
            var hdnSTaxAm;
            var txtGvStaxAmount;
            var lblAmountWithTax;
            var valAmount;
            var hdnchkTaxable;
            var hdnSTaxGL;
            var hdnGSTTaxGL;
            var isGst = 0;
            var totamt = 0;
            var staxAmt = 0;
            var gtaxAmt = 0;
            var staxAmtGL = 0;
            var gtaxAmtGL = 0;

            txtGvPrice = $(cb.replace('chkTaxable', 'txtGvPrice'));
            txtGvQuan = $(cb.replace('chkTaxable', 'txtGvQuan'));
            txtGvAmount = $(cb.replace('chkTaxable', 'txtGvAmount'));
            //lblSalesTax = $(cb.replace('chkTaxable', 'lblSalesTax'));
            lblGstTax = $(cb.replace('chkTaxable', 'lblGstTax'));
            lblAmountWithTax = $(cb.replace('chkTaxable', 'lblAmountWithTax'));
            hdnAmountWithTax = $(cb.replace('chkTaxable', 'hdnAmountWithTax'));
            hdnchkTaxable = $(cb.replace('chkTaxable', 'hdnchkTaxable'));
            hdnSTaxGL = $(cb.replace('chkTaxable', 'hdnSTaxGL'));
            hdnGSTTaxGL = $(cb.replace('chkTaxable', 'hdnGSTTaxGL'));
            hdnSTaxAm = $(cb.replace('chkTaxable', 'hdnSTaxAm'));
            //txtGvStaxAmount = $(cb.replace('chkTaxable', 'txtGvStaxAmount'));
            hdnGSTTaxAm = $(cb.replace('chkTaxable', 'hdnGSTTaxAm'));

            isGst = 1;

            if (!jQuery.trim($(txtGvQuan).val()) == '') {
                if (isNaN(parseFloat($(txtGvQuan).val()))) {
                    $(txtGvQuan).val('0.00');
                }
            }

            if (!jQuery.trim($(txtGvPrice).val()) == '') {
                if (isNaN(parseFloat($(txtGvPrice).val()))) {
                    $(txtGvPrice).val('');
                }
            }

            if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                    valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                    $(txtGvAmount).val(valAmount.toFixed(2));
                    //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
                if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                    var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                    $(txtGvPrice).val(valPrice.toFixed(2));
                    //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
                }
            }





            if (isGst == 1) {
                if (gtax == null) {
                    gtaxAmt = 0.00;
                    gtaxAmtGL = 0;
                    $(lblGstTax).val(gtaxAmt.toFixed(2));

                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxGL).val(gtaxAmtGL);
                }
                else if (gtax.value != '') {
                    if ($(hdnchkTaxable).val() == '1') {
                        gtaxAmt = Math.round(((parseFloat(valAmount) * parseFloat(gtax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        $(lblGstTax).val(gtaxAmt.toFixed(2));
                        $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                        gtaxAmtGL = parseInt(gtaxGL.val());
                        $(hdnGSTTaxGL).val(gtaxAmtGL.val());
                    }
                    else {
                        gtaxAmt = 0.00;
                        gtaxAmtGL = 0;
                    }
                    $(lblGstTax).val(gtaxAmt.toFixed(2));

                    $(hdnGSTTaxAm).val(gtaxAmt.toFixed(2));
                    $(hdnGSTTaxGL).val(gtaxAmtGL);

                }

            }

            if ($(hdnchkTaxable).val() == '1') {
                if (parseInt(staxType.val()) == 0 || parseInt(staxType.val()) == 2) {
                    if (parseFloat(valAmount) < 0) {

                        //staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = parseFloat(txtGvStaxAmount.val());
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.val());

                    } else {
                        //staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = parseFloat(txtGvStaxAmount.val());
                        staxAmtGL = parseInt(staxGL.val());
                    }
                }
                else if (parseInt(staxType.val()) == 1) {
                    var oldvalAmount = valAmount;
                    if (isGst == 1) {
                        valAmount = parseFloat(valAmount) + gtaxAmt;
                    }
                    if (parseFloat(valAmount) < 0) {

                        //staxAmt = Math.round(((parseFloat(valAmount * (-1)) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = parseFloat(txtGvStaxAmount.val());
                        staxAmt = staxAmt * (-1);
                        staxAmtGL = parseInt(staxGL.val());
                        valAmount = oldvalAmount;

                    } else {
                        //staxAmt = Math.round(((parseFloat(valAmount) * parseFloat(stax.value.toString().replace(/[\$\(\),]/g, ''))) / 100) * 100) / 100;
                        staxAmt = parseFloat(txtGvStaxAmount.val());
                        staxAmtGL = parseInt(staxGL.val());
                        valAmount = oldvalAmount;
                    }
                }




            } else {
                staxAmt = 0.00;
                staxAmtGL = 0;
            }
            if (isNaN(staxAmt)) {

                staxAmt = 0.00;
            }
            if (isNaN(gtaxAmt)) {

                gtaxAmt = 0.00;
            }
            if (isNaN(valAmount)) {

                valAmount = 0.00;
            }


            //$(lblSalesTax).val(staxAmt.toFixed(2));
            $(hdnSTaxAm).val(staxAmt.toFixed(2));
            $(txtGvStaxAmount).val(staxAmt.toFixed(2));

            $(hdnSTaxGL).val(staxAmtGL);



            totamt = valAmount + staxAmt;
            if (isGst == 1) {
                totamt = totamt + gtaxAmt;
            }
            $(lblAmountWithTax).text(totamt.toFixed(2));
            //$(hdnAmountWithTax).val(staxAmt.toFixed(2));
            $(hdnAmountWithTax).val(totamt.toFixed(2));
        }

        //CalculateTotalAmtSST();
        CalculateTotalAmt();
    }


    function CalTotalVal(obj) {
        debugger;
        var txt = obj.id;

        var txtGvQuan;
        var txtGvPrice;
        var txtGvAmount;
        var lblAmountWithTax;
        var hdnAmountWithTax;
        var hdnchkTaxable;
        var chkTaxable;

        var lblSalesTax;
        var hdnSTaxAm;
        var txtGvStaxAmount;
        var lblGstTax;
        var hdnGSTTaxAm;

        var stax = $("#hdnQST");
        var gtax = $("#hdnGST");



        if (txt.indexOf("Quan") >= 0) {
            txtGvQuan = $(txt);
            txtGvPrice = $(txt.replace('txtGvQuan', 'txtGvPrice'));
            txtGvAmount = $(txt.replace('txtGvQuan', 'txtGvAmount'));
            lblAmountWithTax = $(txt.replace('txtGvQuan', 'lblAmountWithTax'));
            hdnAmountWithTax = $(txt.replace('txtGvQuan', 'hdnAmountWithTax'));
            hdnchkTaxable = $(txt.replace('txtGvQuan', 'hdnchkTaxable'));
            chkTaxable = $(txt.replace('txtGvQuan', 'chkTaxable'));
            hdnchkGTaxable = $(txt.replace('txtGvQuan', 'hdnchkGTaxable'));
            chkGTaxable = $(txt.replace('txtGvQuan', 'chkGTaxable'));

            //lblSalesTax = $(txt.replace('txtGvQuan', 'lblSalesTax'));
            hdnSTaxAm = $(txt.replace('txtGvQuan', 'hdnSTaxAm'));
            txtGvStaxAmount = $(txt.replace('txtGvQuan', 'txtGvStaxAmount'));
            lblGstTax = $(txt.replace('txtGvQuan', 'lblGstTax'));
            hdnGSTTaxAm = $(txt.replace('txtGvQuan', 'hdnGSTTaxAm'));
            hdnIsPO = $(txt.replace('txtGvQuan', 'hdnIsPO'));
            hdnOutstandQuan = $(txt.replace('txtGvQuan', 'hdnOutstandQuan'));
            hdnOutstandBalance = $(txt.replace('txtGvQuan', 'hdnOutstandBalance'));
        }
        else if (txt.indexOf("Price") >= 0) {
            txtGvPrice = $(txt);
            txtGvQuan = $(txt.replace('txtGvPrice', 'txtGvQuan'));
            txtGvAmount = $(txt.replace('txtGvPrice', 'txtGvAmount'));
            lblAmountWithTax = $(txt.replace('txtGvPrice', 'lblAmountWithTax'));
            hdnAmountWithTax = $(txt.replace('txtGvPrice', 'hdnAmountWithTax'));
            hdnchkTaxable = $(txt.replace('txtGvPrice', 'hdnchkTaxable'));
            chkTaxable = $(txt.replace('txtGvPrice', 'chkTaxable'));
            hdnchkGTaxable = $(txt.replace('txtGvPrice', 'hdnchkGTaxable'));
            chkGTaxable = $(txt.replace('txtGvPrice', 'chkGTaxable'));
            //lblSalesTax = $(txt.replace('txtGvPrice', 'lblSalesTax'));
            hdnSTaxAm = $(txt.replace('txtGvPrice', 'hdnSTaxAm'));
            txtGvStaxAmount = $(txt.replace('txtGvPrice', 'txtGvStaxAmount'));
            lblGstTax = $(txt.replace('txtGvPrice', 'lblGstTax'));
            hdnGSTTaxAm = $(txt.replace('txtGvPrice', 'hdnGSTTaxAm'));
            hdnIsPO = $(txt.replace('txtGvPrice', 'hdnIsPO'));
            hdnOutstandQuan = $(txt.replace('txtGvPrice', 'hdnOutstandQuan'));
            hdnOutstandBalance = $(txt.replace('txtGvPrice', 'hdnOutstandBalance'));
        }
        else if (txt.indexOf("Amount") >= 0) {
            txtGvPrice = $(txt.replace('txtGvAmount', 'txtGvPrice'));
            txtGvQuan = $(txt.replace('txtGvAmount', 'txtGvQuan'));
            lblAmountWithTax = $(txt.replace('txtGvAmount', 'lblAmountWithTax'));
            hdnAmountWithTax = $(txt.replace('txtGvAmount', 'hdnAmountWithTax'));
            txtGvAmount = $(txt);
            hdnchkTaxable = $(txt.replace('txtGvAmount', 'hdnchkTaxable'));
            chkTaxable = $(txt.replace('txtGvAmount', 'chkTaxable'));
            hdnchkGTaxable = $(txt.replace('txtGvAmount', 'hdnchkGTaxable'));
            chkGTaxable = $(txt.replace('txtGvAmount', 'chkGTaxable'));
            //lblSalesTax = $(txt.replace('txtGvAmount', 'lblSalesTax'));
            hdnSTaxAm = $(txt.replace('txtGvAmount', 'hdnSTaxAm'));
            txtGvStaxAmount = $(txt.replace('txtGvAmount', 'txtGvStaxAmount'));
            lblGstTax = $(txt.replace('txtGvAmount', 'lblGstTax'));
            hdnGSTTaxAm = $(txt.replace('txtGvAmount', 'hdnGSTTaxAm'));
            hdnIsPO = $(txt.replace('txtGvAmount', 'hdnIsPO'));
            hdnOutstandQuan = $(txt.replace('txtGvAmount', 'hdnOutstandQuan'));
            hdnOutstandBalance = $(txt.replace('txtGvAmount', 'hdnOutstandBalance'));
        }
        //else if (txt.indexOf("AmountTot") >= 0) {
        //    txtGvPrice = $(txt.replace('lblAmountWithTax', 'txtGvPrice'));
        //    txtGvQuan = $(txt.replace('lblAmountWithTax', 'txtGvQuan'));
        //    txtGvAmount = $(txt.replace('lblAmountWithTax', 'txtGvAmount'));
        //    lblAmountWithTax = $(txt);
        //}

        //////////// PO QTY /AMOUNT CALCULATION //////////////////


        if (jQuery.trim($(hdnIsPO).val()) == '2') {
            var pobalqty = parseFloat($(hdnOutstandQuan).val());
            var pobalamt = parseFloat($(hdnOutstandBalance).val());
            var temTotal = 0;
            var receiveQuan = parseFloat($(txtGvQuan).val());
            var receiveAmnt = parseFloat($(txtGvAmount).val());
            var Price = parseFloat($(txtGvPrice).val());

            if (parseFloat(pobalqty) == 0) { pobalqty = receiveQuan; }

            if ($(txtGvQuan).val() == '') {
                $(txtGvQuan).val('0.00');
            }
            else {
                if (receiveQuan > pobalqty) {
                    $(txtGvQuan).val(pobalqty);
                }
                else {
                    $(txtGvQuan).val(receiveQuan);
                }
            }
            var receiveQuanf = parseFloat($(txtGvQuan).val());
            temTotal = temTotal + (receiveQuanf * Price);
            //$(txtGvAmount).val(temTotal.toLocaleString("en-US", { minimumFractionDigits: 2 }));
            $(txtGvAmount).val(parseFloat(temTotal));

        }
        //////////// PO QTY /AMOUNT CALCULATION //////////////////



        if (!jQuery.trim($(txtGvQuan).val()) == '') {
            if (isNaN(parseFloat($(txtGvQuan).val()))) {
                $(txtGvQuan).val('0.00');
            }
        }

        if (!jQuery.trim($(txtGvPrice).val()) == '') {
            if (isNaN(parseFloat($(txtGvPrice).val()))) {
                $(txtGvPrice).val('');
            }
        }

        if (!jQuery.trim($(txtGvQuan).val()) == '' && !jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && !isNaN(parseFloat($(txtGvPrice).val()))) {
                var valAmount = parseFloat($(txtGvQuan).val()) * parseFloat($(txtGvPrice).val());
                $(txtGvAmount).val(valAmount.toFixed(2));
                $(lblAmountWithTax).text(valAmount.toFixed(2));
                $(hdnAmountWithTax).val(valAmount.toFixed(2));

                if ($(hdnchkTaxable).val() == "0") {
                    $(hdnchkTaxable).val("0");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked', false);
                    }

                    //$(lblSalesTax).val("0.00");
                    $(lblGstTax).val("0.00");
                    $(hdnSTaxAm).val("0.00");
                    $(txtGvStaxAmount).val("0.00");
                    $(hdnGSTTaxAm).val("0.00");
                }
                else {
                    $(hdnchkTaxable).val("1");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked', true);
                        CalTotalValStax(chkTaxable);
                    }

                }
                //$(txtGvAmount).val(cleanUpCurrency(parseFloat(valAmount).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        } else if (!jQuery.trim($(txtGvQuan).val()) == '' && $(txtGvAmount).val() != '' && jQuery.trim($(txtGvPrice).val()) == '') {
            if (!isNaN(parseFloat($(txtGvQuan).val())) && parseFloat($(txtGvQuan).val()) != 0 && !isNaN(parseFloat($(txtGvAmount).val()))) {
                var valPrice = parseFloat($(txtGvAmount).val()) / parseFloat($(txtGvQuan).val());
                if (jQuery.trim($(hdnIsPO).val()) != '2') {
                    $(txtGvPrice).val(valPrice.toFixed(2));
                }
                $(lblAmountWithTax).text($(txtGvAmount).val());
                $(hdnAmountWithTax).val($(txtGvAmount).val());

                if ($(hdnchkTaxable).val() == "0") {
                    $(hdnchkTaxable).val("0");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked', false);
                    }

                    //$(lblSalesTax).val("0.00");
                    $(lblGstTax).val("0.00");
                    $(hdnSTaxAm).val("0.00");
                    $(txtGvStaxAmount).val("0.00");

                    $(hdnGSTTaxAm).val("0.00");
                }
                else {
                    $(hdnchkTaxable).val("1");
                    if (chkTaxable != null) {
                        chkTaxable.css('checked', true);
                        CalTotalValStax(chkTaxable);
                    }

                }
                //$(txtGvPrice).val(cleanUpCurrency(parseFloat(valPrice).toLocaleString("en-US", { minimumFractionDigits: 2 })));
            }
        }
        CalculateTotalAmt();

        if (!isNaN(parseFloat($(obj.id).val()))) {
            //$(obj.id).value = parseFloat($(obj.id).value).toFixed(2);
            if (jQuery.trim($(hdnIsPO).val()) != '2') {
                $(obj.id).val(parseFloat($(obj.id).val()).toFixed(2));
            }
            else {
                if (txt.indexOf("Quan") >= 0) {
                    $(obj.id).val(parseFloat($(obj.id).val()).toFixed(4));
                }
            }
        }
        if (chkTaxable != null) {
            CalTotalValStax(chkTaxable);
        }
        if (chkGTaxable != null) {
            CalTotalValGtax(chkGTaxable);
        }
    }
    function scrollToAnchor() {


        var aTag = $("#accrdPayment");
        if (aTag.hasClass("active") == false) {
            $("#accrdPayment").click();
        }

        $('html,body').animate({ scrollTop: aTag.offset().top }, 'slow');
        aTag.focus();
        return false;
    }
    function showfreq() {
        if ($("#chkIsRecurr").is(':checked')) {
            $("#dvfreq").css('display', 'block');
            $("#lnkQuickCheck").css('visibility', 'hidden');
        } else {
            $("#dvfreq").css('display', 'none');
            $("#lnkQuickCheck").css('visibility', 'visible');
        }
    }

    function OpenApplyCreditModal(sdate) {
        //alert(sdate);

        $("#hdnolddate").val(sdate);
        $("#txtaplyDate").val(sdate);

        var wnd = $find("#ReprintCheckRange");
        wnd.set_title("Apply Credit");
        wnd.Show();
    }
    function CloseApplyCreditModal() {
        var wnd = $find("#ReprintCheckRange");
        wnd.Close();

    }
</script>
