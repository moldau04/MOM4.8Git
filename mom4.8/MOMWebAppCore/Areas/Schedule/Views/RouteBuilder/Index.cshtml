
@{
    ViewData["Title"] = " List Page";
    Layout = "~/Views/Shared/MOMLayout.cshtml";
}

<link href="Design/css/grid.css" rel="stylesheet" />

<style>
    .RadGrid a {
        padding: initial;
    }

    .tabs .active {
        font-weight: bold;
    }

    .btnlinks a[disabled='disabled'] {
        color: grey;
        pointer-events: none;
    }
</style>

<style>

    .context_menu_item {
        padding: 3px 6px;
        background-color: whitesmoke;
        border: 1px solid black;
    }

        .context_menu_item:hover {
            background-color: #CCCCCC;
            font-weight: 700;
        }

    .context_menu_separator {
        background-color: gray;
        height: 1px;
        margin: 0.5px;
        padding: 0.5px;
    }
</style>


<script src="~/MOMUI/Design/js/ContextMenu.js" type="text/javascript"></script>
<script src="~/MOMUI/Design/js/maps.google.polygon.containsLatLng.js" type="text/javascript"></script>
<script src="~/MOMUI/Design/js/markerwithlabel_packed.js" type="text/javascript"></script>

<script type="text/javascript">

    var GooglemarkersArray = [];
    var GooglemarkersArrayAssigned = [];
    var markerselected = new Array();
    var map;
    var coord = new Array();
    var directionsDisplay;
    var directionsService = new google.maps.DirectionsService();
    directionsDisplay = new google.maps.DirectionsRenderer();
    var cityCircle;
    var contextMenu;
    var contextMenuCircle;
    var infoWindow;
    var bounds;
    var GooglePolygonsArray = new Array();
    var polycount = 0;
    var IsPolygonEdited = 0;

    function initialize() {
        cityCircle = new google.maps.Circle();
        GooglemarkersArray = [];
        GooglePolygonsArray = [];
        markerselected = new Array();
        coord = new Array();
        infoWindow = new google.maps.InfoWindow({ maxWidth: 300 });
        bounds = new google.maps.LatLngBounds();

        var mapOptions = {
            zoom: 6,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: new google.maps.LatLng(0, 0),
            scrollwheel: true
        }
        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        var markers = JSON.parse(document.getElementById("#hdnMarkers").val());
        AddMarker(markers, 1, 'NONE');

        // alert(markers.length);

        AddContextMenu();
    }

    google.maps.event.addDomListener(window, 'load', initialize);


    function AddMarker(markers, boundmap, animation) {

        for (var i = 0; i < markers.length; i++) {
            AddSingleMarker(markers[i], infoWindow, bounds);
        }
        if (boundmap == 1) {
            map.fitBounds(bounds);
        }
    }

    function AddSingleMarker(markeradd) {
        var data = markeradd;
        var myLatlng = new google.maps.LatLng(data.lat, data.lng);
        var marker = new google.maps.Marker({
            position: myLatlng,
            map: map,
            title: data.title,
            icon: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=|" + GetColor(data.worker) + "|ffffff"
            //                    ,animation: google.maps.Animation.DROP
        });
        (function (marker, data) {
            google.maps.event.addListener(marker, "click", function (e) {
                infoWindow.setContent('<div STYLE=width:200px; height:150px><DIV  width:200px; height:150px><a style="cursor:pointer;" onclick=" openAssignMarkerPopup(' + data.loc + ');"><i>' + data.worker + '</i></a></br><b>' + data.title + '</b></br>' + data.description + '</DIV></DIV>');
                infoWindow.open(map, marker);
            });
            //                google.maps.event.addListener(marker, 'rightclick', function(e) {
            //                    openAssignMarkerPopup(data.loc);
            //                });
        })(marker, data);
        GooglemarkersArray[data.loc] = marker;
        bounds.extend(myLatlng);
    }

    function openAssignMarkerPopup(loc) {
        $("#hdnMarkerLoc").val(loc);
        $find("#PMPMarker").show();
    }

    function AddAssignedMarker() {
        GooglemarkersArrayAssigned = [];
        var markerValues = document.getElementById("#hdnAssignedMarkers").val();
        if (markerValues == "") {
            return;
        }
        var markers = JSON.parse(markerValues);

        var infoWindow = new google.maps.InfoWindow({ maxWidth: 300 });
        for (var i = 0; i < markers.length; i++) {
            var data = markers[i];
            var myLatlng = new google.maps.LatLng(data.lat, data.lng);
            var marker = new google.maps.Marker({
                animation: google.maps.Animation.DROP,
                position: myLatlng,
                map: map,
                title: data.title,
                optimized: false,
                icon: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=T|" + GetColor(data.assdwrkr) + "|000"
            });
            (function (marker, data) {
                google.maps.event.addListener(marker, "click", function (e) {
                    infoWindow.setContent('<div STYLE=width:200px; height:150px><DIV  width:200px; height:150px>Newly assigned worker: <i>' + data.assdwrkr + '</i></br><b>' + data.title + '</b></br>' + data.description + '</DIV></DIV>');
                    infoWindow.open(map, marker);
                });
            })(marker, data);
            GooglemarkersArrayAssigned.push(marker);
        }
    }

    function AddLocationMarker() {
        var markers = JSON.parse(document.getElementById("#hdnMarkers").val());
        var marker;

        var loc = $("#hdnMarkerLoc").val();
        deleteMarker(GooglemarkersArray[loc]);

        $(markers).each(function (ind) {
            if (this["loc"] == loc) {
                marker = this;
            }
        });
        AddSingleMarker(marker);
    }

    function AddAllMarkers() {
        deleteAllMarkers();
        var markers = JSON.parse(document.getElementById("hdnMarkers").val());
        AddMarker(markers, 0, 'NONE');
    }


    function deleteAllMarkers() {
        var markers = JSON.parse(document.getElementById("#hdnMarkers").val());
        $.each(markers, function (index) {
            if (typeof GooglemarkersArray[this["loc"]] != "undefined") {
                deleteMarker(GooglemarkersArray[this["loc"]]);
            }
        });
        GooglemarkersArray = [];
    }

    function deleteMarker(marker) {
        marker.setMap(null);
    }

    function clearOverlays(markersArray) {
        for (var i = 0; i < markersArray.length; i++) {
            markersArray[i].setMap(null);
        }
        markersArray = [];
    }

    function ClearPolygons() {
        $.each(GooglePolygonsArray, function (index) {
            this.setMap(null);
        });
        GooglePolygonsArray = [];
        polycount = 0;
        $("#hdnLocsInPolygon").val("");
        $("#hdnPolyID").val("");
        $("#hdnAssignedWorker").val("");
        bounds = new google.maps.LatLngBounds();
    }

    function GetColor(worker) {
        var color;
        workers = JSON.parse(document.getElementById("#hdnColor").val());
        $(workers).each(function (ind) {
            if (this["worker"] == worker) {
                color = this["color"];
            }
        });
        return color;
    }

    function GridHover(i) {
        google.maps.event.trigger(GooglemarkersArray[i], "click");
    }

    function DeleteTemplate() {
        var ddltemplate = $("#ddlTemplates").val();
        if (ddltemplate == "0" || ddltemplate == "-1") {
            alert('Please select template to delete.');
            return false;
        }
        else {
            return confirm('Are you sure you want to delete the selected template?');
        }
    }

    function AddContextMenu() {
        var contextMenuOptions = {};
        contextMenuOptions.classNames = { menu: 'context_menu', menuSeparator: 'context_menu_separator' };

        var menuItems = [];
        menuItems.push({ className: 'context_menu_item', eventName: 'add_polygon_here', label: 'Add Polygon Here' });
        menuItems.push({});
        //            menuItems.push({ className: 'context_menu_item', eventName: 'add_circle_here', label: 'Add Circle Here' });
        //            menuItems.push({});
        menuItems.push({ className: 'context_menu_item', eventName: 'center_map_click', label: 'Center map here' });
        contextMenuOptions.menuItems = menuItems;

        contextMenu = new ContextMenu(map, contextMenuOptions);

        google.maps.event.addListener(map, 'rightclick', function (mouseEvent) {
            contextMenu.show(mouseEvent.latLng);
        });

        eventRightClick(contextMenu);
    }

    function AddContextMenuCircle() {
        var contextMenuOptions = {};
        contextMenuOptions.classNames = { menu: 'context_menu', menuSeparator: 'context_menu_separator' };

        var menuItemsCircle = [];
        menuItemsCircle.push({ className: 'context_menu_item', eventName: 'clear_circle', label: 'Clear Circle' });
        menuItemsCircle.push({});
        menuItemsCircle.push({ className: 'context_menu_item', eventName: 'assign_worker', label: 'Assign Worker' });
        contextMenuOptions.menuItems = menuItemsCircle;

        contextMenuCircle = new ContextMenu(map, contextMenuOptions);

        google.maps.event.addListener(cityCircle, 'rightclick', function (mouseEvent) {
            contextMenuCircle.show(mouseEvent.latLng);
        });

        google.maps.event.addListener(cityCircle, 'click', function (mouseEvent) {
            contextMenuCircle.hide();
        });

        eventRightClick(contextMenuCircle);
    }

    function AddContextMenuPolygon(polygon) {
        var contextMenuOptions = {};
        contextMenuOptions.classNames = { menu: 'context_menu', menuSeparator: 'context_menu_separator' };

        var menuItemsPolygon = [];
        menuItemsPolygon.push({ className: 'context_menu_item', eventName: 'clear_polygon', label: 'Clear Polygon' });
        menuItemsPolygon.push({});
        menuItemsPolygon.push({ className: 'context_menu_item', eventName: 'assign_worker', label: 'Assign Worker' });
        menuItemsPolygon.push({});
        menuItemsPolygon.push({ className: 'context_menu_item', eventName: 'update_worker', label: 'Update' });
        contextMenuOptions.menuItems = menuItemsPolygon;

        var contextMenuPolygon = new ContextMenu(map, contextMenuOptions);

        google.maps.event.addListener(polygon, 'rightclick', function (mouseEvent) {
            contextMenuPolygon.show(mouseEvent.latLng);
            contextMenu.hide();
        });

        google.maps.event.addListener(polygon, 'click', function (mouseEvent) {
            contextMenuPolygon.hide();
            contextMenu.hide();
        });

        eventRightClick(contextMenuPolygon, polygon);
    }

    function eventRightClick(contextMenu, polygon) {
        google.maps.event.addListener(contextMenu, 'menu_item_selected', function (latLng, eventName) {
            switch (eventName) {
                case 'add_circle_here':
                    var zoomLevel = map.getZoom();
                    var radius = 12000;
                    if (zoomLevel > 12) {
                        radius = 5000 / zoomLevel
                    }
                    AddCircle(latLng, radius);
                    break;
                case 'center_map_click':
                    map.panTo(latLng);
                    break;
                case 'clear_circle':
                    cityCircle.setMap(null);
                    break;
                case 'clear_polygon':
                    //polygon.setMap(null);
                    ClearPolygon(polygon);
                    break;
                case 'assign_worker':
                    var polygonpts = PointWithinPolygon(polygon);
                    if (polygonpts.length == 0) {
                        alert('No locations found.');
                    }
                    else {
                        $find("#PMPBehaviour").show();
                        $("#Button2").unbind("click");
                        $("#Button2").click(function () {
                            assignClick(polygon, 0);
                        });
                    }
                    break;
                case 'update_worker':
                    if (IsExistingPolygon(polygon) == 1) {
                        var polygonpts = PointWithinPolygon(polygon);
                        if (polygonpts.length == 0) {
                            alert('No locations found.');
                        }
                        else {
                            polygon.MarkerWithLabel.setVisible(false);
                            $("#lstWorker").val(polygon.msmrb_worker);
                            assignClick(polygon, 0);
                        }
                    }
                    break;
                case 'add_polygon_here':
                    AddPolygon(latLng);
                    break;
            }
        });
    }

    function AddCircleLatLng() {

        var latLng = $("#hdnCenter").val();
        var radius = $("#hdnRadius").val();
        var lat = latLng.split(",")[0];
        var lng = latLng.split(",")[1];
        AddCircle(new google.maps.LatLng(lat, lng), parseFloat(radius));
        map.fitBounds(cityCircle.getBounds());
    }

    function AddCircle(latLng, radius) {
        $("#hdnOverlay").val("circle");
        cityCircle.setMap(null);

        var populationOptions = {
            strokeColor: '#000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0',
            fillOpacity: 0.35,
            map: map,
            center: latLng,
            radius: radius,
            draggable: true,
            editable: true
        };
        cityCircle = new google.maps.Circle(populationOptions);

        AddContextMenuCircle();
        //            map.fitBounds(cityCircle.getBounds());
    }

    function CreatePolygon(PointArray) {
        $("#hdnOverlay").val("polygon");
        cityCircle.setMap(null);

        var polygon = new google.maps.Polygon({
            paths: PointArray,
            strokeColor: '#000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FFF',
            editable: true,
            draggable: true,
            fillOpacity: 0.35
        });
        polygon.setMap(map);
        AddContextMenuPolygon(polygon);
        return polygon;
    }

    function AddPolygon(latlng) {
        var zoomLevel = map.getZoom();

        var lat = latlng.lat();
        var lon = latlng.lng();
        var latOffset = 0.5;
        var lonOffset = 0.5;
        if (zoomLevel > 9) {
            latOffset = 0.1 / zoomLevel;
            lonOffset = 0.1 / zoomLevel;
        }

        var v = [];
        v[0] = new google.maps.LatLng(lat, lon - lonOffset);
        v[1] = new google.maps.LatLng(lat + latOffset, lon);
        v[2] = new google.maps.LatLng(lat, lon + lonOffset);
        v[3] = new google.maps.LatLng(lat - latOffset, lon);
        //            v[4] = new google.maps.LatLng(lat, lon - lonOffset)
        CreatePolygon(v);
    }


    function ClearPolygon(polygon) {
        var existing = IsExistingPolygon(polygon);
        if (existing != 0) {
            assignClick(polygon, 1);
        }
        else {
            polygon.setMap(null);
        }
    }

    function IsExistingPolygon(polygon) {
        var existing = 0;
        $(GooglePolygonsArray).each(function (ind) {
            var polid = this["msmrb_id"];
            if (polid == polygon.msmrb_id) {
                existing = 1;
            }
        });

        console.log("existing:" + existing);
        return existing;
    }

    function PolygonCoordsJson() {

        var arrayList = [];

        $(GooglePolygonsArray).each(function (ind) {
            var polid = this["msmrb_id"];
            var workerid = this["msmrb_worker"];
            var workername = this["msmrb_workername"];
            //var polyJSON = JSON.stringify(this.getPath().getArray());
            //var latlngArray = JSON.parse(polyJSON);
            var latlngArray = this.getPath().getArray();

            var newAr = [];
            newAr.push({ polid: polid, workerid: workerid, workername: workername });

            for (var i = 0; i < latlngArray.length; i++) {
                var obj = new Object();
                //var u = 0;
                //for (var x in latlngArray[i]) {
                //    if (u == 0)
                //        obj['lat'] = latlngArray[i][x];
                //    else
                //        obj['lon'] = latlngArray[i][x];
                //    u++;
                //}

                obj['lat'] = latlngArray[i].lat();
                obj['lon'] = latlngArray[i].lng();

                newAr.push(obj);
            }
            arrayList.push(newAr);
        });
        $("#hdnPolygon").val(JSON.stringify(arrayList));
    }

    function AddPolygonFromArray() {

        ClearPolygons();

        $("#view1").css('background', '#ffffff url(images/loader_wheel.gif) no-repeat center');
        $("#view2").css('background', '#ffffff url(images/loader_wheel.gif) no-repeat center');

        var poygonsarray = JSON.parse($("#hdnPolygon").val());
        var locs = [];
        var locsworker = { locations: [] };

        $(poygonsarray).each(function (index) {
            var latlngArray = this;
            var v = [];
            var polyid;
            var workerid;
            var workername;
            $(latlngArray).each(function (ind) {
                if (ind == 0) {
                    polyid = this["polid"];
                    workerid = this["workerid"];
                    workername = this["workername"];
                    $("#lstWorker").val(workerid);
                    //$("#lstWorker.ClientID%> option:select').val(workerid);
                }
                else if (ind != 0) {
                    var latlng = new google.maps.LatLng(this["lat"], this["lon"]);
                    v[ind - 1] = latlng;
                    bounds.extend(latlng);
                }
            });
            polycount++;
            var polygon = CreatePolygon(v);
            polygon.setOptions({ fillColor: '#' + GetColor(workername) });
            attachPolygonInfoWindow(polygon, workername);
            polygon.msmrb_id = polycount;
            polygon.msmrb_worker = workerid;
            polygon.msmrb_workername = workername;
            GooglePolygonsArray.push(polygon);

            var locsarray = PointWithinPolygon(polygon);
            $(locsarray).each(function (locindex) {
                locs.push(this);
                locsworker.locations.push({ locid: this, workerid: workerid, workername: workername, polid: polycount });
            });
        });
        map.fitBounds(bounds);
        $("#hdnAssignedWorker").val(JSON.stringify(locsworker));
        $("#hdnLocsInPolygon").val(locs);
        $("#btnAssignMethodCall").click();
    }


    function UpdateLocationPolygonArray() {
        $("#hdnAssignedWorker").val("");
        $("#hdnLocsInPolygon").val("");
        $("#view1").css('background', '#ffffff url(images/loader_wheel.gif) no-repeat center');
        $("#view2").css('background', '#ffffff url(images/loader_wheel.gif) no-repeat center');

        polycount = 0;

        var locs = [];
        var locsworker = { locations: [] };

        $(GooglePolygonsArray).each(function (index) {
            var latlngArray = this;
            var polyid;
            var workerid;
            var workername;
            var polygon = this;
            polycount = polygon.msmrb_id;
            workerid = polygon.msmrb_worker;
            workername = polygon.msmrb_workername;

            var locsarray = PointWithinPolygon(polygon);
            $(locsarray).each(function (locindex) {
                locs.push(this);
                locsworker.locations.push({ locid: this, workerid: workerid, workername: workername, polid: polycount });
            });
        });
        $("#hdnAssignedWorker").val(JSON.stringify(locsworker));
        $("#hdnLocsInPolygon").val(locs);
        $("#btnAssignMethodCall").click();
    }

    function assignClick(polygon, remove) {
        var overlay = $("#hdnOverlay").val();
        $("#hdnLocsInPolygon").val('');
        $("#hdnPolyID").val('');
        if (overlay == "polygon") {
            if (remove == 0) {

                $("#hdnLocsInPolygon").val(PointWithinPolygon(polygon));
                var lstw = $("#lstWorker option:selected").text();
                polygon.setOptions({ fillColor: '#' + GetColor(lstw) });
                polygon.setOptions({ strokeColor: '#000' });

                attachPolygonInfoWindow(polygon, lstw);
            }
            else {
                $("#hdnLocsInPolygon").val("");
            }

            var ex = 0;
            if (polycount != 0) {
                $(GooglePolygonsArray).each(function (ind) {
                    var polid = this["msmrb_id"];
                    if (polid == polygon.msmrb_id) {
                        ex = 1;
                        $("#hdnPolyID").val(polid);
                        polygon.msmrb_worker = $("#lstWorker option:selected").val();
                        polygon.msmrb_workername = $("#lstWorker option:selected").text();
                    }
                });
            }
            if (polycount == 0 || ex == 0) {
                polycount++;
                $("#hdnPolyID").val(polycount);
                polygon.msmrb_id = polycount;
                polygon.msmrb_worker = $("#lstWorker option:selected").val();
                polygon.msmrb_workername = $("#lstWorker option:selected").text();
            }
            if (ex == 0) {
                GooglePolygonsArray.push(polygon);
            }
            if (remove == 1) {
                polygon.MarkerWithLabel.setMap(null);
                polygon.setMap(null);
                var index = GooglePolygonsArray.indexOf(polygon);
                if (index > -1) {
                    GooglePolygonsArray.splice(index, 1);

                }
            }
        }
        else if (overlay == "circle") {
            $("#hdnCenter").val(cityCircle.getCenter().lat() + ',' + cityCircle.getCenter().lng());
            $("#hdnRadius").val((cityCircle.getRadius()));
        }

        $("#btnAssign").click();
    }

    function attachPolygonInfoWindow(polygon, polyLabel) {

        polygon.MarkerWithLabel = new MarkerWithLabel({
            position: new google.maps.LatLng(0, 0),
            draggable: false,
            raiseOnDrag: false,
            map: map,
            labelContent: polyLabel,
            labelAnchor: new google.maps.Point(30, 20),
            labelClass: "labels", // the CSS class for the label
            labelStyle: { opacity: 1.0 },
            icon: "http://placehold.it/1x1",
            visible: false
        });

        google.maps.event.addListener(polygon, "mousemove", function (event) {
            polygon.MarkerWithLabel.setPosition(event.latLng);
            polygon.MarkerWithLabel.setVisible(true);
        });
        google.maps.event.addListener(polygon, "mouseout", function (event) {
            polygon.MarkerWithLabel.setVisible(false);
        });


        google.maps.event.addListener(polygon.getPath(), 'set_at', function (index) {
            polygon.setOptions({ strokeColor: 'red' });

        });

        google.maps.event.addListener(polygon.getPath(), 'insert_at', function (index) {
            polygon.setOptions({ strokeColor: 'red' });

        });

        google.maps.event.addListener(polygon, "dragstart", function () {
            google.maps.event.clearListeners(polygon.getPath(), 'set_at');
        });

        google.maps.event.addListener(polygon, "dragend", function () {
            google.maps.event.addListener(polygon.getPath(), 'set_at', function (index) {
                polygon.setOptions({ strokeColor: 'red' });

            });
            polygon.setOptions({ strokeColor: 'red' });

        });

    }

    function assignCall() {
        $("#view1").css('background', '#ffffff url(images/loader_wheel.gif) no-repeat center');
        $("#view2").css('background', '#ffffff url(images/loader_wheel.gif) no-repeat center');

        $("#btnAssignMethodCall").click();
    }

    function PointWithinPolygon(polygon) {

        $("#hdnLocsInPolygon").val("");
        var locs = new Array();
        var markers = JSON.parse(document.getElementById("#hdnMarkers").val());
        $(markers).each(function (ind) {
            if (polygon.containsLatLng(parseFloat(this["lat"]), parseFloat(this["lng"]))) {
                locs.push(this["loc"]);
            }
        });

        return locs;
    }

    function validateSave() {

        var txtTemplate = $("#txtTemplate").val();
        if (txtTemplate == "") {
            alert('Please enter the template name.');
            return false;
        }
        else {
            var ret = confirm('Are you sure you want to save the template?');
            if (ret == true) {
                PolygonCoordsJson();
                return true;
            }
            else {
                return false;
            }
        }

    }

    function ClickTemplateDropdown() {
        var hdnEdited = $("#hdnEdited").val();
        if (hdnEdited == "1") {
            if ($("#hdnPreviousTempl").val() == "0" || $("#hdnPreviousTempl").val() == "-1") {
                return confirm('You have not saved the new template. Do you want to continue without saving and move to existing template?');
            }
            else {
                return confirm('There are unsaved changes to the current template. Do you want to continue without saving?');
            }
        }
        else {
            return true;
        }
    }

    function DisplayConfirmation() {
        if (ClickTemplateDropdown() == true) {
            __doPostBack("#ddlTemplates", '');
        }
        else {
            $("#ddlTemplates").val($("#hdnPreviousTempl").val());
        }
    }

    function ClickAssignCheck() {

    }

    function AssignedMarker() {
        if ($("#chkMap").is(":checked")) {
            AddAssignedMarker();
        }
        else {
            clearOverlays(GooglemarkersArrayAssigned);
        }
    }

    function sizeContent() {
        var contentHeight = $(".content").height();
        var newHeight = $("html").height() - ($("#footer").height() + $("#header_main").height()) - 50; // + "px";

        if (contentHeight < newHeight) {
            $(".content").css("height", newHeight + "px");
        }
    }

    function tabState(link) {
        $("#tabState").val(link);

        var select = $('#' + link);
        $active = $(select.attr('href'));

        $('.show-hide-item').each(function () {
            $(this).hide();
        });

        $('.tabs .tab-item').each(function () {
            $(this).removeClass('active');
        });
        $('#' + link).addClass('active');

        $active.show();
    }

    $(document).ready(sizeContent);

    $(window).resize(sizeContent);


    function UpdatehdnPreviousTempl() {
        $("#dnPreviousTempl").val($("#ddlTemplates").val());
    }
</script>

<div class="divbutton-container">
    <div id="divButtons">
        <div id="breadcrumbs-wrapper">
            <header>
                <div class="container row-color-grey">
                    <div class="row">
                        <div class="col s12 m12 l12">
                            <div class="row">
                                <div class="page-title"><i class="mdi-maps-pin-drop"></i>&nbsp;<label class="title_text" ID="lblHeader" style="font-size:15px">Route Builder</label></div>
                                <div class="btnlinks"><a href="setup.aspx?rw=true" id="anAdd">Setup</a></div>
                                <div class="btnclosewrap">
                                    <a href="Home.aspx"><i class="mdi-content-clear"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div ID="UpdatePanel3">
            <div>
                <input type="button" ID="btnAssign" value="btnAssign"
                       Style="display: block" onclick="ClickAssignCheck();" />
                <input type="button" ID="btnAssignMethodCall" value="btnAssignMethodCall" Style="display: block" />
                @Html.Hidden("hdnCenter")
                @Html.Hidden("hdnRadius")
                @Html.Hidden("hdnEdited", "0")
                @Html.Hidden("hdnPreviousTempl", "0")
                @Html.Hidden("hdnAssignedWorker")
                @Html.Hidden("hdnPolygon")
                @Html.Hidden("hdnOverlay")
                @Html.Hidden("hdnLocsInPolygon")
                @Html.Hidden("hdnMarkerLoc")
                @Html.Hidden("hdnPolyID")

            </div>
        </div>

        <input type="button" ID="hiddenTargetControlForModalPopup" Style="display: block"
               CausesValidation="False" />

        <div id="Panel2" style="display: block; background: #fff; border: solid;"
             cssclass="roundCorner shadow">
            <div id="Panel3" style="background: #ccc; width: 100%; height: 20px; color: #23AEE8; font-weight: bold; font-size: 12px; padding-top: 5px; cursor: move">
                <label Style="float: left; color: #000; margin-right: 20px; margin-left: 10px;"
                       ID="Label5">Workers</label>
            </div>
            <div>
                @*<asp:ListBox ID="lstWorker" Style="max-height: 200px; min-height: 200px; width: 100%"></asp:ListBox>*@
            </div>
            <input id="Button2" type="button" value="Assign" style="width: 80px" />
            <input id="Button1" type="button" value="Cancel" style="width: 80px" onclick="$find('#PMPBehaviour').hide();" />
        </div>

        <div id="Panel1" style="display: block; background: #fff; border: solid;"
             class="roundCorner shadow">

            <div id="Panel4" style="background: #ccc; width: 100%; height: 20px; color: #23AEE8; font-weight: bold; font-size: 12px; padding-top: 5px; cursor: move">
                <label Style="float: left; color: #000; margin-right: 20px; margin-left: 10px;"
                       ID="Label1">Assign Worker</label>
            </div>
            <div>
                @*<asp:ListBox ID="lstWorkerAssignMarker" Style="max-height: 200px; min-height: 200px; width: 100%"></asp:ListBox>*@
                <input type="button" ID="btnAssignWorkerMarker" value="Assign" Style="width: 80px"
                       onclick="if(!confirm('This will assign worker to the selected location. Do you want to continue?')) return false;" />
                <input id="btnCloseAssignMarker" type="button" value="Cancel" style="width: 80px"
                       onclick="$find('#PMPMarker').hide();" />

            </div>
        </div>

        <div id="Panel5" style="display: block; background: #fff; border: solid;"
             class="roundCorner shadow">

            <div>
                <div ID="UpdatePanel5">
                    <div>
                        <input id="btnCloseAdd" type="button" value="Cancel" style="width: 80px; display: block"
                               onclick="$find('PMPAddress').hide();" />
                        <input type="button" ID="btnClearClick" value="Button" CausesValidation="false" Style="display: block" />
                        @*<iframe id="iframeAddr" frameborder="0" width="800px" height="350px"></iframe>*@
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<script>
    $(window).scroll(function () {
        if ($(window).scrollTop() >= 0) {
            $("#divButtons").addClass('fixed-header');
        }
        if ($(window).scrollTop() <= 0) {
            $("#divButtons").removeClass('fixed-header');
        }
    });

    $(function () {
        var tabval = $("#tabState").val();
        $("#" + tabval).click();
    });
</script>
