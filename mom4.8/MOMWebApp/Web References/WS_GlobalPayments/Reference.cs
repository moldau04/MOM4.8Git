//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MOMWebApp.WS_GlobalPayments {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WS_GlobalPaymentsSoap", Namespace="http://tempuri.org/")]
    public partial class WS_GlobalPayments : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessDebitCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessEBTCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessACHOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessSignatureOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WS_GlobalPayments() {
            this.Url = global::MOMWebApp.Properties.Settings.Default.MOMWebApp_WS_GlobalPayments_WS_GlobalPayments;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTransactionCompletedEventHandler GetTransactionCompleted;
        
        /// <remarks/>
        public event GetInfoCompletedEventHandler GetInfoCompleted;
        
        /// <remarks/>
        public event ProcessCreditCardCompletedEventHandler ProcessCreditCardCompleted;
        
        /// <remarks/>
        public event ProcessDebitCardCompletedEventHandler ProcessDebitCardCompleted;
        
        /// <remarks/>
        public event ProcessEBTCardCompletedEventHandler ProcessEBTCardCompleted;
        
        /// <remarks/>
        public event ProcessACHCompletedEventHandler ProcessACHCompleted;
        
        /// <remarks/>
        public event ProcessSignatureCompletedEventHandler ProcessSignatureCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response GetTransaction(string GlobalUserName, string GlobalPassword, string PNRef) {
            object[] results = this.Invoke("GetTransaction", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        PNRef});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionAsync(string GlobalUserName, string GlobalPassword, string PNRef) {
            this.GetTransactionAsync(GlobalUserName, GlobalPassword, PNRef, null);
        }
        
        /// <remarks/>
        public void GetTransactionAsync(string GlobalUserName, string GlobalPassword, string PNRef, object userState) {
            if ((this.GetTransactionOperationCompleted == null)) {
                this.GetTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionOperationCompleted);
            }
            this.InvokeAsync("GetTransaction", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        PNRef}, this.GetTransactionOperationCompleted, userState);
        }
        
        private void OnGetTransactionOperationCompleted(object arg) {
            if ((this.GetTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionCompleted(this, new GetTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response GetInfo(string GlobalUserName, string GlobalPassword, string TransType, string ExtData) {
            object[] results = this.Invoke("GetInfo", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void GetInfoAsync(string GlobalUserName, string GlobalPassword, string TransType, string ExtData) {
            this.GetInfoAsync(GlobalUserName, GlobalPassword, TransType, ExtData, null);
        }
        
        /// <remarks/>
        public void GetInfoAsync(string GlobalUserName, string GlobalPassword, string TransType, string ExtData, object userState) {
            if ((this.GetInfoOperationCompleted == null)) {
                this.GetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInfoOperationCompleted);
            }
            this.InvokeAsync("GetInfo", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        ExtData}, this.GetInfoOperationCompleted, userState);
        }
        
        private void OnGetInfoOperationCompleted(object arg) {
            if ((this.GetInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInfoCompleted(this, new GetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessCreditCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessCreditCard(string GlobalUserName, string GlobalPassword, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Zip, string Street, string CVNum, string ExtData) {
            object[] results = this.Invoke("ProcessCreditCard", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Zip,
                        Street,
                        CVNum,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessCreditCardAsync(string GlobalUserName, string GlobalPassword, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Zip, string Street, string CVNum, string ExtData) {
            this.ProcessCreditCardAsync(GlobalUserName, GlobalPassword, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Zip, Street, CVNum, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessCreditCardAsync(string GlobalUserName, string GlobalPassword, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Zip, string Street, string CVNum, string ExtData, object userState) {
            if ((this.ProcessCreditCardOperationCompleted == null)) {
                this.ProcessCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessCreditCardOperationCompleted);
            }
            this.InvokeAsync("ProcessCreditCard", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Zip,
                        Street,
                        CVNum,
                        ExtData}, this.ProcessCreditCardOperationCompleted, userState);
        }
        
        private void OnProcessCreditCardOperationCompleted(object arg) {
            if ((this.ProcessCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessCreditCardCompleted(this, new ProcessCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessDebitCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessDebitCard(string GlobalUserName, string GlobalPassword, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            object[] results = this.Invoke("ProcessDebitCard", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessDebitCardAsync(string GlobalUserName, string GlobalPassword, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            this.ProcessDebitCardAsync(GlobalUserName, GlobalPassword, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessDebitCardAsync(
                    string GlobalUserName, 
                    string GlobalPassword, 
                    string TransType, 
                    string CardNum, 
                    string ExpDate, 
                    string MagData, 
                    string NameOnCard, 
                    string Amount, 
                    string InvNum, 
                    string PNRef, 
                    string Pin, 
                    string RegisterNum, 
                    string SureChargeAmt, 
                    string CashBackAmt, 
                    string ExtData, 
                    object userState) {
            if ((this.ProcessDebitCardOperationCompleted == null)) {
                this.ProcessDebitCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessDebitCardOperationCompleted);
            }
            this.InvokeAsync("ProcessDebitCard", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData}, this.ProcessDebitCardOperationCompleted, userState);
        }
        
        private void OnProcessDebitCardOperationCompleted(object arg) {
            if ((this.ProcessDebitCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessDebitCardCompleted(this, new ProcessDebitCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessEBTCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessEBTCard(string GlobalUserName, string GlobalPassword, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            object[] results = this.Invoke("ProcessEBTCard", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessEBTCardAsync(string GlobalUserName, string GlobalPassword, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            this.ProcessEBTCardAsync(GlobalUserName, GlobalPassword, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessEBTCardAsync(
                    string GlobalUserName, 
                    string GlobalPassword, 
                    string TransType, 
                    string CardNum, 
                    string ExpDate, 
                    string MagData, 
                    string NameOnCard, 
                    string Amount, 
                    string InvNum, 
                    string PNRef, 
                    string Pin, 
                    string RegisterNum, 
                    string SureChargeAmt, 
                    string CashBackAmt, 
                    string ExtData, 
                    object userState) {
            if ((this.ProcessEBTCardOperationCompleted == null)) {
                this.ProcessEBTCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessEBTCardOperationCompleted);
            }
            this.InvokeAsync("ProcessEBTCard", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData}, this.ProcessEBTCardOperationCompleted, userState);
        }
        
        private void OnProcessEBTCardOperationCompleted(object arg) {
            if ((this.ProcessEBTCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessEBTCardCompleted(this, new ProcessEBTCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessACH", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessACH(
                    string GlobalUserName, 
                    string GlobalPassword, 
                    string TransType, 
                    string CheckNum, 
                    string TransitNum, 
                    string AccountNum, 
                    string Amount, 
                    string PNRef, 
                    string NameOnCheck, 
                    string StreetAddress, 
                    string City, 
                    string State, 
                    string PostalCode, 
                    string Phone, 
                    string CheckType, 
                    string IDType, 
                    string IDNumber, 
                    string IDStateCode, 
                    string ExtData) {
            object[] results = this.Invoke("ProcessACH", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CheckNum,
                        TransitNum,
                        AccountNum,
                        Amount,
                        PNRef,
                        NameOnCheck,
                        StreetAddress,
                        City,
                        State,
                        PostalCode,
                        Phone,
                        CheckType,
                        IDType,
                        IDNumber,
                        IDStateCode,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessACHAsync(
                    string GlobalUserName, 
                    string GlobalPassword, 
                    string TransType, 
                    string CheckNum, 
                    string TransitNum, 
                    string AccountNum, 
                    string Amount, 
                    string PNRef, 
                    string NameOnCheck, 
                    string StreetAddress, 
                    string City, 
                    string State, 
                    string PostalCode, 
                    string Phone, 
                    string CheckType, 
                    string IDType, 
                    string IDNumber, 
                    string IDStateCode, 
                    string ExtData) {
            this.ProcessACHAsync(GlobalUserName, GlobalPassword, TransType, CheckNum, TransitNum, AccountNum, Amount, PNRef, NameOnCheck, StreetAddress, City, State, PostalCode, Phone, CheckType, IDType, IDNumber, IDStateCode, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessACHAsync(
                    string GlobalUserName, 
                    string GlobalPassword, 
                    string TransType, 
                    string CheckNum, 
                    string TransitNum, 
                    string AccountNum, 
                    string Amount, 
                    string PNRef, 
                    string NameOnCheck, 
                    string StreetAddress, 
                    string City, 
                    string State, 
                    string PostalCode, 
                    string Phone, 
                    string CheckType, 
                    string IDType, 
                    string IDNumber, 
                    string IDStateCode, 
                    string ExtData, 
                    object userState) {
            if ((this.ProcessACHOperationCompleted == null)) {
                this.ProcessACHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessACHOperationCompleted);
            }
            this.InvokeAsync("ProcessACH", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        TransType,
                        CheckNum,
                        TransitNum,
                        AccountNum,
                        Amount,
                        PNRef,
                        NameOnCheck,
                        StreetAddress,
                        City,
                        State,
                        PostalCode,
                        Phone,
                        CheckType,
                        IDType,
                        IDNumber,
                        IDStateCode,
                        ExtData}, this.ProcessACHOperationCompleted, userState);
        }
        
        private void OnProcessACHOperationCompleted(object arg) {
            if ((this.ProcessACHCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessACHCompleted(this, new ProcessACHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessSignature", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessSignature(string GlobalUserName, string GlobalPassword, string SignatureType, string SignatureData, string PNRef, string Result, string AuthCode, string ExtData) {
            object[] results = this.Invoke("ProcessSignature", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        SignatureType,
                        SignatureData,
                        PNRef,
                        Result,
                        AuthCode,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessSignatureAsync(string GlobalUserName, string GlobalPassword, string SignatureType, string SignatureData, string PNRef, string Result, string AuthCode, string ExtData) {
            this.ProcessSignatureAsync(GlobalUserName, GlobalPassword, SignatureType, SignatureData, PNRef, Result, AuthCode, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessSignatureAsync(string GlobalUserName, string GlobalPassword, string SignatureType, string SignatureData, string PNRef, string Result, string AuthCode, string ExtData, object userState) {
            if ((this.ProcessSignatureOperationCompleted == null)) {
                this.ProcessSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessSignatureOperationCompleted);
            }
            this.InvokeAsync("ProcessSignature", new object[] {
                        GlobalUserName,
                        GlobalPassword,
                        SignatureType,
                        SignatureData,
                        PNRef,
                        Result,
                        AuthCode,
                        ExtData}, this.ProcessSignatureOperationCompleted, userState);
        }
        
        private void OnProcessSignatureOperationCompleted(object arg) {
            if ((this.ProcessSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessSignatureCompleted(this, new ProcessSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="GlobalPayments")]
    public partial class Response {
        
        private int resultField;
        
        private string respMSGField;
        
        private string messageField;
        
        private string message1Field;
        
        private string message2Field;
        
        private string authCodeField;
        
        private string pNRefField;
        
        private string hostCodeField;
        
        private string hostURLField;
        
        private string receiptURLField;
        
        private string getAVSResultField;
        
        private string getAVSResultTXTField;
        
        private string getStreetMatchTXTField;
        
        private string getZipMatchTXTField;
        
        private string getCVResultField;
        
        private string getCVResultTXTField;
        
        private string getGetOrigResultField;
        
        private string getCommercialCardField;
        
        private string workingKeyField;
        
        private string keyPointerField;
        
        private string extDataField;
        
        /// <remarks/>
        public int Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string RespMSG {
            get {
                return this.respMSGField;
            }
            set {
                this.respMSGField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Message1 {
            get {
                return this.message1Field;
            }
            set {
                this.message1Field = value;
            }
        }
        
        /// <remarks/>
        public string Message2 {
            get {
                return this.message2Field;
            }
            set {
                this.message2Field = value;
            }
        }
        
        /// <remarks/>
        public string AuthCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PNRef {
            get {
                return this.pNRefField;
            }
            set {
                this.pNRefField = value;
            }
        }
        
        /// <remarks/>
        public string HostCode {
            get {
                return this.hostCodeField;
            }
            set {
                this.hostCodeField = value;
            }
        }
        
        /// <remarks/>
        public string HostURL {
            get {
                return this.hostURLField;
            }
            set {
                this.hostURLField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiptURL {
            get {
                return this.receiptURLField;
            }
            set {
                this.receiptURLField = value;
            }
        }
        
        /// <remarks/>
        public string GetAVSResult {
            get {
                return this.getAVSResultField;
            }
            set {
                this.getAVSResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetAVSResultTXT {
            get {
                return this.getAVSResultTXTField;
            }
            set {
                this.getAVSResultTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetStreetMatchTXT {
            get {
                return this.getStreetMatchTXTField;
            }
            set {
                this.getStreetMatchTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetZipMatchTXT {
            get {
                return this.getZipMatchTXTField;
            }
            set {
                this.getZipMatchTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetCVResult {
            get {
                return this.getCVResultField;
            }
            set {
                this.getCVResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetCVResultTXT {
            get {
                return this.getCVResultTXTField;
            }
            set {
                this.getCVResultTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetGetOrigResult {
            get {
                return this.getGetOrigResultField;
            }
            set {
                this.getGetOrigResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetCommercialCard {
            get {
                return this.getCommercialCardField;
            }
            set {
                this.getCommercialCardField = value;
            }
        }
        
        /// <remarks/>
        public string WorkingKey {
            get {
                return this.workingKeyField;
            }
            set {
                this.workingKeyField = value;
            }
        }
        
        /// <remarks/>
        public string KeyPointer {
            get {
                return this.keyPointerField;
            }
            set {
                this.keyPointerField = value;
            }
        }
        
        /// <remarks/>
        public string ExtData {
            get {
                return this.extDataField;
            }
            set {
                this.extDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetTransactionCompletedEventHandler(object sender, GetTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetInfoCompletedEventHandler(object sender, GetInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProcessCreditCardCompletedEventHandler(object sender, ProcessCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProcessDebitCardCompletedEventHandler(object sender, ProcessDebitCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessDebitCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessDebitCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProcessEBTCardCompletedEventHandler(object sender, ProcessEBTCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessEBTCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessEBTCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProcessACHCompletedEventHandler(object sender, ProcessACHCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessACHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessACHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProcessSignatureCompletedEventHandler(object sender, ProcessSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591